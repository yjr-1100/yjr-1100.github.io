<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fluter学习（三）</title>
      <link href="/2022/11/12/Flutter%E5%AD%A6%E4%B9%A03/"/>
      <url>/2022/11/12/Flutter%E5%AD%A6%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h1 id="有状态的组件-StatefulWidget"><a href="#有状态的组件-StatefulWidget" class="headerlink" title="有状态的组件 StatefulWidget"></a>有状态的组件 StatefulWidget</h1><p>之前我们学习的组件都是自定义了一个<strong>StatelessWidget</strong>组件来进行学习的，但是那样的页面是静态的，不能动态改变，如果我们想要实现点击按钮，让页面上的值进行改变，我们需要用到<strong>StatefulWidget</strong>组件来实现。这是一个有状态组件，可以刷新页面的状态</p><p>比如我们点击按钮，上数字增加</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121446059.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">        body: <span class="keyword">const</span> MyHomePage()),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [</span><br><span class="line">        Text(</span><br><span class="line">          <span class="string">&quot;<span class="subst">$_count</span>&quot;</span>,</span><br><span class="line">          style: Theme.of(context).textTheme.headline2,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(</span><br><span class="line">          height: <span class="number">60</span>,</span><br><span class="line">        ),</span><br><span class="line">        ElevatedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                <span class="comment">// 执行setState的时候，会重新build，然后显示页面</span></span><br><span class="line">                _count++;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: <span class="keyword">const</span> Text(<span class="string">&quot;增加数据&quot;</span>))</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个动态增加的列表，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121457855.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MaterialApp(</span><br><span class="line">    home: MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _list = [<span class="string">&quot;我是原来的数据&quot;</span>];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        <span class="comment">// 把scaffold放在子组件中，方便用其中的floatingActionButton属性</span></span><br><span class="line">        appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _list.add(<span class="string">&quot;我是新增数据&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        ),</span><br><span class="line">        body: ListView(</span><br><span class="line">          children: _list</span><br><span class="line">              .map((e) =&gt; ListTile(</span><br><span class="line">                    title: Text(e),</span><br><span class="line">                  ))</span><br><span class="line">              .toList(),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scaffold-组件属性"><a href="#Scaffold-组件属性" class="headerlink" title="Scaffold 组件属性"></a>Scaffold 组件属性</h1><h2 id="bottomNavigationBar-自定义底部导航"><a href="#bottomNavigationBar-自定义底部导航" class="headerlink" title="bottomNavigationBar 自定义底部导航"></a>bottomNavigationBar 自定义底部导航</h2><p><code>items</code>  List底部导航条按钮集合<br><code>iconSize</code>  配置菜单大小<br><code>currentlridex</code>  默认选中第几个<br><code>onTap</code>  选中变化回调函数<br><code>fixedColor</code>  选中的颜色<br><code>type</code>  </p><ul><li><code>BottomNavigationBarType.fixed</code>  如果底部有4个或4个以上的菜单，就要配置这个，否则会被挤掉</li><li><code>BottomNavigationBarType.shifting</code></li></ul><p>下图是点击导航栏切换的演示图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121545867.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), Myhome(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&quot;主页&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myhome</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Myhome(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是home页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCategory</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCategory(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是category页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySettings</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MySettings(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是Settings页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="floatingActionButton-浮动按钮"><a href="#floatingActionButton-浮动按钮" class="headerlink" title="floatingActionButton  浮动按钮"></a>floatingActionButton  浮动按钮</h2><p>通过floatingActionButton来实现一个导航栏中间突起的圆形按钮，在上面导航栏的代码上直接进行修改，效果入下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121616442.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), Myhome(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&quot;主页&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">      floatingActionButton: Container( <span class="comment">// 浮动的按钮 ，外面包裹一个Container可以改变按钮的大小等</span></span><br><span class="line">        height: <span class="number">60</span>,</span><br><span class="line">        width: <span class="number">60</span>,</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">2</span>),</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">6</span>),</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">30</span>),</span><br><span class="line">        ),</span><br><span class="line">        child: FloatingActionButton(</span><br><span class="line">          backgroundColor: currentindex == <span class="number">1</span> ? Colors.blue : Colors.yellow,</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = <span class="number">1</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Drawer侧边栏"><a href="#Drawer侧边栏" class="headerlink" title="Drawer侧边栏"></a>Drawer侧边栏</h2><p>Flutter 中通过 <code>drawer</code> 可以配置左侧侧边栏，<code>endDrawer</code>来配置右侧侧边栏,如果没有设置 <strong>AppBar</strong> 的 <code>leading</code> 属性，则当使用 <strong>Drawer</strong> 的时候会自动显示一个 <strong>IconButton</strong> 来告诉用户有侧边栏（在 Android 上通常是显示为三个横的图标）</p><p><strong>Drawer</strong> 组件的属性</p><ul><li><code>backgroundColor</code> 整个Drawer的背景颜色</li><li><code>elevation</code> 设置 z 轴的 elevation,和父容器相关，阴影的部分</li><li><code>width</code> 画出来侧边栏的宽度</li><li><code>child</code> 子组件</li></ul><p>在侧边栏<strong>Drawer</strong>组件中，可以在<code>child</code>中放一个<strong>ListView</strong>组件或者<strong>Column</strong>组件来设置自己的布局，我们会在列组件的<code>children</code> 属性中放一个 <strong>DrawerHeader</strong> 组件，设置侧边栏的头部。 我们还有一个 <strong>UerAccountDrawerHeader</strong> 组件，可以快速形成一个个人名片样子的侧边栏头部。</p><p><strong>DrawerHeader</strong> 组件的属性</p><ul><li><code>decoration</code> 设置顶部颜色背景图片等</li><li><code>margin</code> 外边距</li><li><code>padding</code> 内边距</li><li><code>child</code> 子元素</li></ul><p><strong>UerAccountDrawerHeader</strong> 组件的属性</p><ul><li><code>decoration</code>  设置顶部背景颜色</li><li><code>accountName</code>  账户名称</li><li><code>accountEmail</code> 账户邮箱 </li><li><code>currentAccountPicture</code>  用户头像</li><li><code>otherAccountsPictures</code>  用来设置当前账户其他账户头像</li><li><code>onDetailsPressed</code> 点击监听</li><li><code>margin</code>  外边距</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121716660.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), Myhome(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      drawer: Drawer(</span><br><span class="line">          <span class="comment">// backgroundColor: Colors.black38,</span></span><br><span class="line">          <span class="comment">// elevation: 1,</span></span><br><span class="line">          <span class="comment">// shape: ,</span></span><br><span class="line">          width: <span class="number">300</span>,</span><br><span class="line">          <span class="comment">// shape: const ShapeBorder(),</span></span><br><span class="line">          semanticLabel: <span class="string">&quot;sdfsdfsdfsdf&quot;</span>,</span><br><span class="line">          child: Column(</span><br><span class="line">            children: <span class="keyword">const</span> [</span><br><span class="line">              SizedBox(</span><br><span class="line">                  width: <span class="built_in">double</span>.infinity, <span class="comment">// 外面套一个SizedBox让组件平铺</span></span><br><span class="line">                  child: DrawerHeader(</span><br><span class="line">                      decoration: BoxDecoration(color: Colors.yellow),</span><br><span class="line">                      <span class="comment">// margin: EdgeInsets.all(10),</span></span><br><span class="line">                      duration: <span class="built_in">Duration</span>(seconds: <span class="number">20</span>),</span><br><span class="line">                      child: Text(<span class="string">&quot;头部&quot;</span>)) <span class="comment">// 这里可以写别的组件进行自己的布局</span></span><br><span class="line">                  ),</span><br><span class="line">              ListTile(</span><br><span class="line">                leading: CircleAvatar(child: Icon(Icons.person)),</span><br><span class="line">                title: Text(<span class="string">&quot;个人中心&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Divider(),</span><br><span class="line">              ListTile(</span><br><span class="line">                leading: CircleAvatar(child: Icon(Icons.settings)),</span><br><span class="line">                title: Text(<span class="string">&quot;系统设置&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Divider()</span><br><span class="line">            ],</span><br><span class="line">          )),</span><br><span class="line">      endDrawer: <span class="keyword">const</span> Drawer(child: Text(<span class="string">&quot;右侧侧边栏&quot;</span>)),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&quot;主页&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myhome</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Myhome(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是home页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCategory</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCategory(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是category页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySettings</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MySettings(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是Settings页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppBar顶部导航栏"><a href="#AppBar顶部导航栏" class="headerlink" title="AppBar顶部导航栏"></a>AppBar顶部导航栏</h2><p><strong>AppBar</strong> 自定义顶部按钮图标、颜色</p><p><strong>AppBar</strong> 的一些属性</p><p><code>leading</code> 在标题前面显乐的一个控件，在首页通常显示应用的logo;在其他界面通常显示为返回按钮<br><code>title</code>  标题，通常显示为当前界面的标题文字，可以放组件<br><code>actions</code>  通常使用IconButton来表示，可以放按钮组<br><code>backgroundColor</code>  导航背景颜色<br><code>iconTheme</code>  图标样式<br><code>centerTitle</code>  标题是否居中显示<br><code>bottom</code>  通常放tabBar,标题下面显示一个Tab导航栏</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211150816426.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        leading: IconButton(</span><br><span class="line">          <span class="comment">// 前面左侧的图标</span></span><br><span class="line">          icon: <span class="keyword">const</span> Icon(Icons.menu),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;左侧的按钮&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;顶部导航&quot;</span>), <span class="comment">// 顶部导航显示的标题</span></span><br><span class="line">        backgroundColor: Colors.red, <span class="comment">// 设置背景颜色的红色</span></span><br><span class="line">        actions: [</span><br><span class="line">          <span class="comment">// 右侧的图标，可以有多个</span></span><br><span class="line">          IconButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;右侧的按钮&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.search)),</span><br><span class="line">          IconButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;右侧的按钮&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.more_horiz)),</span><br><span class="line">        ],</span><br><span class="line">        centerTitle: <span class="keyword">true</span>, <span class="comment">// 标题居中显示</span></span><br><span class="line">      ),</span><br><span class="line">      body: Text(<span class="string">&quot;我是主页&quot;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AppBar</strong> 配合 <strong>TabBar</strong> 和 <strong>TabBarView</strong> 实现滑动效果</p><p><strong>TabBar</strong> 的一些属性</p><p><code>tabs</code> 显示的标签内容，一般使用Tab对象，也可以是其它的Widget<br><code>controller</code> TabController对象<br><code>isScrollable</code> 是否可以滚动<br><code>indicatorColor</code> 指示器颜色 ，指示器就是下面那个条条，指示当前选中的是哪一个<br><code>indicatorWeight</code> 指示器高度<br><code>indicatorPadding</code> 底部指示器的Padding<br><code>indicator</code> 指示器decoration，比如边框等<br><code>indicatorSize</code> 指示器大小计算方式，</p><ul><li><code>TabBarIndicatorSize.label</code> 跟文字等宽</li><li><code>TabBarIndicatorSize.tab</code> 跟每个tab等宽<br><code>labelColor</code> 选中label的颜色<br><code>labelStyle</code> 选中label的Style<br><code>labelPadding</code> 每个label的padding值<br><code>unselectedLabelStyle</code> 未选中label的Style<br><code>unselectedLabelStyle</code> 未选中label的Style</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211150849993.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>首先我们要在我们的类中 <code>with  SingleTickerProviderStateMixin</code> 然后定义<code>TabController</code> 并指定它的长度<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211150853985.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>在这之后，在<strong>AppBar</strong>的 <code>bottom</code> 属性中，传入<strong>TabBar</strong>组件，并在<strong>TabBar</strong>组件中传入刚才定义的<code>TabController</code> ,最后在<strong>Scaffold</strong>的<code>body</code>属性中使用<strong>TabBarView</strong> 组件，也传入刚才定义的 <code>TabController</code> ，并在<code>children</code> 属性中传入想要布局的组件,注意：<strong>TabBar</strong>的<code>tabs</code> 属性和 <strong>TabBarView</strong>的<code>chilidren</code> 属性中的元素个数要和<code>TabController</code> 在定义的时候传入的一样</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> TabController _tabController;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期函数：当组件初始化的时候就会触发</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = TabController(length: <span class="number">9</span>, vsync: <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        leading: IconButton(</span><br><span class="line">          <span class="comment">// 前面左侧的图标</span></span><br><span class="line">          icon: <span class="keyword">const</span> Icon(Icons.menu),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;左侧的按钮&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;顶部导航&quot;</span>), <span class="comment">// 顶部导航显示的标题</span></span><br><span class="line">        backgroundColor: Colors.red, <span class="comment">// 设置背景颜色的红色</span></span><br><span class="line">        actions: [</span><br><span class="line">          <span class="comment">// 右侧的图标，可以有多个</span></span><br><span class="line">          IconButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;右侧的按钮&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.search)),</span><br><span class="line">          IconButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;右侧的按钮&quot;</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.more_horiz)),</span><br><span class="line">        ],</span><br><span class="line">        centerTitle: <span class="keyword">true</span>, <span class="comment">// 标题居中显示</span></span><br><span class="line">        bottom: TabBar(</span><br><span class="line">            controller: _tabController,</span><br><span class="line">            isScrollable: <span class="keyword">true</span>, <span class="comment">// 可以滚动,</span></span><br><span class="line">            indicatorColor: Colors.white, <span class="comment">// 指示器颜色</span></span><br><span class="line">            indicatorWeight: <span class="number">2</span>, <span class="comment">// 指示器高度</span></span><br><span class="line">            indicatorPadding:</span><br><span class="line">                <span class="keyword">const</span> EdgeInsets.all(<span class="number">5</span>), <span class="comment">// 指示器和上下左右的间距都是5，视觉效果就是浮在空中</span></span><br><span class="line">            indicatorSize: TabBarIndicatorSize.label, <span class="comment">// 指示器和文字等宽</span></span><br><span class="line">            labelColor: Colors.yellow,</span><br><span class="line">            unselectedLabelColor: Colors.white,</span><br><span class="line">            labelStyle: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">15</span>),</span><br><span class="line">            unselectedLabelStyle: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">12</span>),</span><br><span class="line">            tabs: <span class="keyword">const</span> [</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;关注&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;热门&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;视频&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;关注&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;热门&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;视频&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;关注&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;热门&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              Tab(</span><br><span class="line">                child: Text(<span class="string">&quot;视频&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">            ]),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView(controller: _tabController, children: [</span><br><span class="line">        Container(</span><br><span class="line">          child: ListView(</span><br><span class="line">            children: <span class="keyword">const</span> [</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注container列表&quot;</span>),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是视频列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是热门列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是关注列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是视频列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是热门列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是关注列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是视频列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是热门列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有底部导航栏的页面加载顶部导航栏，只需要在body挂在的页面中也使用<strong>Scaffold</strong>组件就好了,在下面的代码中，我们还实现了获取点击的index，实际开发时，可以用这个index请求不同的数据，并且封装一个 <strong>keepAliveWrapper</strong> 用来缓存页面当前的状态。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211150959982.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*封装的 KeepAliveWrapper 组件*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveWrapper</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> KeepAliveWrapper(</span><br><span class="line">      &#123;<span class="keyword">super</span>.key, <span class="meta">@required</span> <span class="keyword">this</span>.child, <span class="keyword">this</span>.keepAlive = <span class="keyword">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Widget? child;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> keepAlive;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;KeepAliveWrapper&gt; createState() =&gt; _KeepAliveWrapperState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KeepAliveWrapperState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KeepAliveWrapper</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> widget.child!;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; widget.keepAlive;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(<span class="keyword">covariant</span> KeepAliveWrapper oldWidget) &#123;</span><br><span class="line">    <span class="comment">// keepAlive 状态药更新，实现在AutomatickKeepAliveClientMixin中</span></span><br><span class="line">    <span class="keyword">if</span> (oldWidget.keepAlive != widget.keepAlive) &#123;</span><br><span class="line">      updateKeepAlive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">dynamic</span> noSuchMethod(Invocation invocation) =&gt; <span class="keyword">super</span>.noSuchMethod(invocation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./keepAliveWrapper.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), Myhome(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&quot;主页&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myhome</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Myhome(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Myhome&gt; createState() =&gt; _MyhomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyhomeState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Myhome</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> TabController _tabController;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _tabController = TabController(length: <span class="number">3</span>, vsync: <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// _tabController.addListener(() &#123;</span></span><br><span class="line">    <span class="comment">//   if (_tabController.animation!.value == _tabController.index) &#123;</span></span><br><span class="line">    <span class="comment">//     print(_tabController.index); // 得到索引我们就可以通过这个索引来请求对于的数据</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;); // 添加一个监听，可以获取到对应的索引值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件销毁的时候触发</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement dispose</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _tabController.dispose();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;销毁了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: PreferredSize(</span><br><span class="line">        preferredSize: <span class="keyword">const</span> Size.fromHeight(<span class="number">40</span>), <span class="comment">// 可以配置appbar的高度</span></span><br><span class="line">        child: AppBar(</span><br><span class="line">          elevation: <span class="number">1</span>, <span class="comment">// 底部阴影的宽度</span></span><br><span class="line">          title: SizedBox(</span><br><span class="line">            <span class="comment">// 套一个SizedBox 可以设置TabBar的高度</span></span><br><span class="line">            height: <span class="number">40</span>,</span><br><span class="line">            child: TabBar(</span><br><span class="line">                controller: _tabController,</span><br><span class="line">                indicatorColor: Colors.red,</span><br><span class="line">                labelStyle: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">15</span>),</span><br><span class="line">                labelColor: Colors.red,</span><br><span class="line">                unselectedLabelColor: Colors.black,</span><br><span class="line">                unselectedLabelStyle: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">12</span>),</span><br><span class="line">                onTap: (index) &#123;</span><br><span class="line">                  <span class="comment">// 只能监听点击事件，不能监听滑动事件</span></span><br><span class="line">                  <span class="built_in">print</span>(index);</span><br><span class="line">                &#125;,</span><br><span class="line">                tabs: <span class="keyword">const</span> [</span><br><span class="line">                  Tab(</span><br><span class="line">                    child: Text(<span class="string">&quot;关注&quot;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  Tab(</span><br><span class="line">                    child: Text(<span class="string">&quot;热门&quot;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  Tab(</span><br><span class="line">                    child: Text(<span class="string">&quot;视频&quot;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                ]),</span><br><span class="line">          ), <span class="comment">// 顶部导航显示的标题</span></span><br><span class="line">          backgroundColor: Colors.white, <span class="comment">// 设置背景颜色的红色</span></span><br><span class="line">          centerTitle: <span class="keyword">true</span>, <span class="comment">// 标题居中显示</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView(controller: _tabController, children: [</span><br><span class="line">        KeepAliveWrapper(</span><br><span class="line">          child: ListView(</span><br><span class="line">            children: <span class="keyword">const</span> [</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关rntainer列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我1ntai3表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是2ontainer列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注contterhhh表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注container列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注2iner列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注contai123ner列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注c12列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注2iner列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注contai123ner列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(</span><br><span class="line">                title: Text(<span class="string">&quot;我是关注c12列表&quot;</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是热门列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        ListView(</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;我是关注列表&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCategory</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCategory(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是category页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySettings</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MySettings(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是Settings页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flutter-中的路由"><a href="#Flutter-中的路由" class="headerlink" title="Flutter 中的路由"></a>Flutter 中的路由</h1><p>Flutter中的路由通俗的讲就是页面跳转。在Flutter中通过<strong>Navigator</strong>组件管理路由导航并提供了管理堆栈的方法。如：<code>Navigator.push</code>和<code>Navigator.pop</code> 。Flutter中给我们提供了两种配置路由跳转的方式：1、基本路由2、命名路由</p><h2 id="普通路由的使用"><a href="#普通路由的使用" class="headerlink" title="普通路由的使用"></a>普通路由的使用</h2><p>在主页定义一个按钮，点击后跳转到别的页面并传值，然后在其它页面中点击返回</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211151039428.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Formpage*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受传过来的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">const</span> FormPage(&#123;<span class="keyword">super</span>.key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;FormPage&gt; createState() =&gt; _FormPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FormPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FormPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">print</span>(widget.title); <span class="comment">// 这就是获取到上面的属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () =&gt; Navigator.pop(context), <span class="comment">// 返回上一页</span></span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.home),</span><br><span class="line">      ),</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title), <span class="comment">// 获取属性</span></span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">const</span> Center(child: Text(<span class="string">&quot;我是表单页面&quot;</span>)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*SearchPage*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SearchPage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;SearchPage&gt; createState() =&gt; _SearchPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SearchPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SearchPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;搜索页面标题&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">const</span> Center(</span><br><span class="line">        child: Text(<span class="string">&quot;搜索页面&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./search.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./form.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">    title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">    theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">    home: <span class="keyword">const</span> MyHomePage(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCategory</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCategory(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是category页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySettings</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MySettings(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: [</span><br><span class="line">          ElevatedButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.of(context)</span><br><span class="line">                    .push(MaterialPageRoute(builder: (BuildContext context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">const</span> SearchPage();</span><br><span class="line">                &#125;));</span><br><span class="line">              &#125;,</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&quot;点击搜索&quot;</span>)),</span><br><span class="line">          ElevatedButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                Navigator.of(context)</span><br><span class="line">                    .push(MaterialPageRoute(builder: (BuildContext context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">const</span> FormPage(title: <span class="string">&quot;传过来的值呀&quot;</span>);</span><br><span class="line">                &#125;));</span><br><span class="line">              &#125;,</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&quot;点击到表单&quot;</span>))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>为了方便管理我们的路由，我们还可以使用命名路由</p><p>首先在main.dart 中将我们的页面全部引入，然后在<strong>MaterialApp</strong> 组件中有一个<code>routes</code> 属性，在这里面配置路由的名称，最后再使用就好了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*search*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Map</span> arguments;</span><br><span class="line">  <span class="keyword">const</span> SearchPage(&#123;<span class="keyword">super</span>.key, <span class="keyword">required</span> <span class="keyword">this</span>.arguments&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;SearchPage&gt; createState() =&gt; _SearchPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SearchPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SearchPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">print</span>(widget.arguments);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;搜索页面标题&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">const</span> Center(</span><br><span class="line">        child: Text(<span class="string">&quot;搜索页面&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./search.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  <span class="built_in">Map</span> routes = &#123;</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: (context) =&gt; <span class="keyword">const</span> Tabs(),</span><br><span class="line">    <span class="string">&#x27;/search&#x27;</span>: (context, &#123;arguments&#125;) =&gt; SearchPage(</span><br><span class="line">          <span class="comment">// 这里要和那边接受的名字一样</span></span><br><span class="line">          arguments: arguments,</span><br><span class="line">        )</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">      <span class="comment">// home: const MyHomePage(),</span></span><br><span class="line">      initialRoute: <span class="string">&quot;/&quot;</span>, <span class="comment">// 刚开始要加载的路由</span></span><br><span class="line">      <span class="comment">/// <span class="language-markdown">配置onGenerateRoute</span></span></span><br><span class="line">      onGenerateRoute: (RouteSettings settings) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">String?</span> name = settings.name; <span class="comment">// 获取命名路由的名称</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Function?</span> pageContentBuilder =</span><br><span class="line">            routes[name]; <span class="comment">// 把上面map中的function拿过来</span></span><br><span class="line">        <span class="keyword">if</span> (pageContentBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (settings.arguments != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt;</span><br><span class="line">                    pageContentBuilder(context, arguments: settings.arguments));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Route route = MaterialPageRoute(</span><br><span class="line">                builder: (context) =&gt; pageContentBuilder(context));</span><br><span class="line">            <span class="keyword">return</span> route;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> currentindex = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _pages = <span class="keyword">const</span> [MyCategory(), MySettings()];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      body: _pages[currentindex],</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentindex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          currentIndex: currentindex,</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="string">&quot;分类&quot;</span>),</span><br><span class="line">            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="string">&quot;设置&quot;</span>),</span><br><span class="line">          ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCategory</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCategory(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Text(<span class="string">&quot;这个是category页面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySettings</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MySettings(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: [</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            onPressed: () =&gt;</span><br><span class="line">                Navigator.pushNamed(context, <span class="string">&#x27;/search&#x27;</span>, arguments: &#123;</span><br><span class="line">              <span class="string">&quot;name&quot;</span>: <span class="string">&quot;sdfsdf&quot;</span>,</span><br><span class="line">              <span class="string">&quot;chuan&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            child: <span class="keyword">const</span> Text(<span class="string">&quot;命名路由search&quot;</span>),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flutter返回上一级路由"><a href="#Flutter返回上一级路由" class="headerlink" title="Flutter返回上一级路由"></a>Flutter返回上一级路由</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();</span><br></pre></td></tr></table></figure><h2 id="Flutter中替换路由"><a href="#Flutter中替换路由" class="headerlink" title="Flutter中替换路由"></a>Flutter中替换路由</h2><p>比如我们从用户中心页面跳转到了registerFirst页面，然后从registerFirst页面通过<code>pushReplacementNamed</code>跳转到了registerSecond页面。这个时候当我们点击registerSecond的返回按钮的时候它会直接返回到用户中心。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushReplacementNamed(<span class="string">&#x27;/registersecond&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="Flutter返回到根路由"><a href="#Flutter返回到根路由" class="headerlink" title="Flutter返回到根路由"></a>Flutter返回到根路由</h2><p>比如我们从用户中心跳转到registerFirsti顷面，然后从registerFirsti顷面跳转到registerSecond页面，然后从registerSecond跳转到了registerThird页面。这个时候我们想的是registerThird注册成功后返回到用户中心。这个时候就用到了返回到根路由的方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushAndRemoveUntil(</span><br><span class="line">  MaterialPageRoute(builder:(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Tabs(); <span class="comment">// 这个是根组件</span></span><br><span class="line">  &#125;)/MaterialPageRoute</span><br><span class="line">(route)=<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h2 id="同样风格的路由跳转"><a href="#同样风格的路由跳转" class="headerlink" title="同样风格的路由跳转"></a>同样风格的路由跳转</h2><p>Material组件库中提供了一个<strong>MaterialPageRoute</strong>组件，它可以使用和平台风格一致的路由切换动画，如在iOS上会左右滑动切换，而在Android上会上下滑动切换，<strong>CupertinoPageRoute</strong>是Cupertino组件库提供的iOS风格的路由切换组件如果在Android上也想使用左右切换风格，可以使用<strong>CupertinoPageRoute</strong>.</p><ol><li>引入 <code>import &#39;package:flutter/cupertino.dart&#39;</code></li><li><strong>MaterialPageRoute</strong>改为<strong>CupertinoPageRoute</strong></li></ol><h1 id="全局配置主题"><a href="#全局配置主题" class="headerlink" title="全局配置主题"></a>全局配置主题</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> MaterialApp(</span><br><span class="line">  debugshowcheckedModeBanner:<span class="keyword">false</span>,</span><br><span class="line">  title:<span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">  theme:ThemeData(</span><br><span class="line">    primaryswatch:Colors.blue,</span><br><span class="line">    appBarTheme:<span class="keyword">const</span> AppBarTheme(</span><br><span class="line">        centerTitle:<span class="keyword">true</span>, <span class="comment">// 所有的标题都在中间</span></span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">  initialRoute:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">  onGenerateRoute:onGenerateRoute,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Dialog组件"><a href="#Dialog组件" class="headerlink" title="Dialog组件"></a>Dialog组件</h1><h2 id="警告弹窗"><a href="#警告弹窗" class="headerlink" title="警告弹窗"></a>警告弹窗</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _alertDialog() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> showDialog(context:context,builder:(context)&#123;</span><br><span class="line">    <span class="keyword">return</span> AlertDialog( <span class="comment">// 警告弹窗</span></span><br><span class="line">      title:<span class="keyword">const</span> Text(<span class="string">&quot;提示信息！&quot;</span>),</span><br><span class="line">      content:<span class="keyword">const</span> Text(<span class="string">&quot;您确定要删除吗&quot;</span>),</span><br><span class="line">      actions:[</span><br><span class="line">        TextButton(onPressed:()&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">            Navigator.of(context).pop(<span class="string">&quot;ok&quot;</span>);<span class="comment">//点击按钮让AlertDialog消失</span></span><br><span class="line">          &#125;,child:<span class="keyword">const</span> Text(<span class="string">&quot;确定&quot;</span>)),<span class="comment">//TextButton</span></span><br><span class="line">        TextButton(onPressed:()&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;cancel&quot;</span>);</span><br><span class="line">            Navigator.of(context).pop(<span class="string">&quot;取消&quot;</span>); <span class="comment">//这里传入的值是返回给result的</span></span><br><span class="line">          &#125;,child:<span class="keyword">const</span> Text(<span class="string">&quot;取消&quot;</span>))</span><br><span class="line">      ],</span><br><span class="line">    )</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(result); <span class="comment">// 获取点击的是哪个按钮</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _simpleDialog() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> showDialog(context:context,builder:(context)&#123;</span><br><span class="line">    <span class="keyword">return</span> SimpleDialog(</span><br><span class="line">      barrierDismissible:<span class="keyword">false</span>, <span class="comment">//点击灰色背景这个框会不会消失</span></span><br><span class="line">      title:Text(<span class="string">&quot;请求选择语言&quot;</span>)</span><br><span class="line">      children:[</span><br><span class="line">        SimpleDialogOption(</span><br><span class="line">          onPressed:()&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;汉语&quot;</span>);</span><br><span class="line">            Navigator.of(context).pop(<span class="string">&quot;汉语&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          child:Text(<span class="string">&quot;汉语&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        SimpleDialogOption(</span><br><span class="line">          onPressed:()&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;英语&quot;</span>);</span><br><span class="line">            Navigator.of(context).pop(<span class="string">&quot;英语&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          child:Text(<span class="string">&quot;英语&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底部弹窗"><a href="#底部弹窗" class="headerlink" title="底部弹窗"></a>底部弹窗</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _modelBottomSheet() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> showModalBottomSheet(context:context,builder:(context)&#123;</span><br><span class="line">    <span class="keyword">return</span> Container( <span class="comment">// 这里就可以自己定义一些布局</span></span><br><span class="line">      child:Column(</span><br><span class="line">        childre:[</span><br><span class="line">          ListTile(</span><br><span class="line">            title:Text(<span class="string">&quot;分享&quot;</span>);</span><br><span class="line">            onTap:()&#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;分享&quot;</span>);</span><br><span class="line">              Navigator.of(context).pop(<span class="string">&quot;分享&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title:Text(<span class="string">&quot;收藏&quot;</span>);</span><br><span class="line">            onTap:()&#123;</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;收藏&quot;</span>);</span><br><span class="line">              Navigator.of(context).pop(<span class="string">&quot;收藏&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fluttertoast-提示信息"><a href="#fluttertoast-提示信息" class="headerlink" title="fluttertoast 提示信息"></a>fluttertoast 提示信息</h2><p>这个是第三方库，我们可以去官网进行安装使用</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211151530674.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在<code>pubspec.yaml</code> 文件中配置插件后，运行 <code>flutter pub get</code> 命令就可以进行下载</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:fluttertoast/fluttertoast.dart&#x27;</span>; <span class="comment">// 引入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _toast()&#123;</span><br><span class="line">  Fluttertoast.showToast(</span><br><span class="line">    msg:<span class="string">&quot;This is Center Short Toast&quot;</span>,</span><br><span class="line">    toastLength:Toast.LENGTH_SHORT,</span><br><span class="line">    gravity:ToastGravity.CENTER, <span class="comment">// 显示的位置</span></span><br><span class="line">    timeInSecForIosWeb:<span class="number">1</span>, <span class="comment">// 提示的时间，这个针对 ios，</span></span><br><span class="line">    toastLength:Toast.LENGTH_SHORT, <span class="comment">//　android 中这个可以配置显示的时间长短</span></span><br><span class="line">    backgroundColor:Colors.red, <span class="comment">// 背景颜色</span></span><br><span class="line">    textColor:Colors.white, <span class="comment">// 字体颜色</span></span><br><span class="line">    fontsize:<span class="number">16.0</span> <span class="comment">// 字体大小</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义Dialog"><a href="#自定义Dialog" class="headerlink" title="自定义Dialog"></a>自定义Dialog</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> content;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function?</span> onTap;</span><br><span class="line">  <span class="keyword">const</span> MyDialog(&#123;key?key,<span class="keyword">required</span> <span class="keyword">this</span>.title,<span class="keyword">required</span> <span class="keyword">this</span>.content,<span class="keyword">required</span> <span class="keyword">this</span>.onTap&#125;):<span class="keyword">super</span>(key:key);</span><br><span class="line">  Widget build(BuildContext context)&#123;</span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      type:MaterialType.transparency,<span class="comment">// 设置背景透明</span></span><br><span class="line">      child:Center( <span class="comment">// 包裹一个center组件，不然会全屏</span></span><br><span class="line">          child:Container(</span><br><span class="line">            height:<span class="number">300</span>,</span><br><span class="line">            width:<span class="number">300</span>,</span><br><span class="line">            color:Colors.white,</span><br><span class="line">            child:Column(</span><br><span class="line">              children:[</span><br><span class="line">                Padding(</span><br><span class="line">                  padding:<span class="keyword">const</span> EdgInsets.all(<span class="number">5</span>),</span><br><span class="line">                  child:Stack(</span><br><span class="line">                    children:[</span><br><span class="line">                      Align(</span><br><span class="line">                        alignment:Alignment.centerLeft,</span><br><span class="line">                        child:Text(<span class="keyword">this</span>.title),</span><br><span class="line">                      ),</span><br><span class="line">                      Align(</span><br><span class="line">                        alignment:Alignment.centerLeft,</span><br><span class="line">                        child:InkWell(<span class="comment">// flutter中专门让点击的事件</span></span><br><span class="line">                          onTap:onTap,</span><br><span class="line">                          child:Icon(Icons.close),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ]</span><br><span class="line">                  )</span><br><span class="line">                ),</span><br><span class="line">                Divider(),</span><br><span class="line">                Container(</span><br><span class="line">                  width:<span class="built_in">double</span>.infinity,</span><br><span class="line">                  child:Text(<span class="keyword">this</span>.content),</span><br><span class="line">                )</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _myDialog()&#123;</span><br><span class="line">  showDialog(context:context,builder:(context)&#123;</span><br><span class="line">    <span class="keyword">return</span> MyDialog(title:<span class="string">&quot;提示&quot;</span>,content:<span class="string">&quot;我是内容&quot;</span></span><br><span class="line">    onTap:()&#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;点了&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="PageView组件"><a href="#PageView组件" class="headerlink" title="PageView组件"></a>PageView组件</h1><p>通过PageView组件可以实现类似于抖音的上下滑动切换的功能</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PageView(</span><br><span class="line">  scrollDirection:Axis.vertical<span class="comment">// 配置滑动的方向</span></span><br><span class="line">  onPageChanged:(index)&#123;<span class="comment">// 切换页面的时候触发的方式</span></span><br><span class="line">    <span class="comment">//通过比较index 和children的长度，我们可以提前获取数据，然后实现了懒加载的效果</span></span><br><span class="line">  &#125;</span><br><span class="line">  children:[ <span class="comment">// children里面每一个都是一个页面</span></span><br><span class="line">    Center(</span><br><span class="line">      child:Text(<span class="string">&quot;第一个&quot;</span>)</span><br><span class="line">    ),</span><br><span class="line">    Center(</span><br><span class="line">      child:Text(<span class="string">&quot;第二个&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们也可以使用 <code>PaveView.builder</code> 来生成我们的<strong>PageView</strong>，在<strong>PaveView</strong>外套一个<strong>SizedBox</strong>来控制高度</p><p>给组件<code>with AutomaticKeepAliveClientMixin</code> 并重写 <code>wantKeepAlive</code> 函数返回true缓存页面</p><h1 id="Flutter-中的-Key"><a href="#Flutter-中的-Key" class="headerlink" title="Flutter 中的 Key"></a>Flutter 中的 Key</h1><p>我们平时一定接触过很多的Widget,比如<strong>Container</strong>、<strong>Row</strong>、<strong>Column</strong>等，它们在我们绘制界面的过程中发挥着重要的作用。但是不知道你有没有注意到，在几乎每个Widget的构造函数中，都有一个共同的参数，它们通常在参数列表的第一个，那就是Key,在Flutter中，Key是不能重复使用的，所以Key一般用来做唯一标识。组件在更新的时候，其<strong>状态的保存主要是通过判断组件的类型或者key值是否一致</strong>。因此，当各组件的类型不同的时候，类型已经足够用来区分不同的组件了，此时我们可以不必使用key。但是如果同时存在多个同一类型的控件的时候，此时类型已经无法作为区分的条件了，我们就需要使用到key。</p><p><strong>Flutter key</strong>子类包含<strong>LocalKey</strong>和<strong>GlobalKey</strong>.</p><ul><li>局部键(LocalKey):ValueKey、ObjectKey、UniqueKey<ul><li>UniqueKey,唯一值，每次运行的时候会随机生成</li><li>ValueKey,指定一个数作为key</li></ul></li><li>全局键(GlobalKey):GlobalKey、GlobalObjectKey<ul><li>通过<code>globalKey.currentState</code> 可以获取到该元素的状态</li></ul></li></ul><h1 id="AnimatedList"><a href="#AnimatedList" class="headerlink" title="AnimatedList"></a>AnimatedList</h1><p>AnimatedList和ListView的功能大体相似，不同的是，AnimatedList可以在列表中插入或删除节点<br>时执行一个动画，在需要添加或删除列表项的场景中会提高用户体验。</p><p>AnimatedList是一个StatefulWidget,它对应的State类型为AnimatedListState,添加和删除元素的<br>方法位于AnimatedListState中：</p><ul><li>void insertItem()</li><li>void removeItem()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];</span><br><span class="line">_globalKey = GlobalKey&lt;AnimatedListState&gt;();</span><br><span class="line">list.add(<span class="string">&quot;新增一条数据&quot;</span>);</span><br><span class="line">_globalKey.currentState!.insertItem(list.length<span class="number">-1</span>);</span><br><span class="line">_globalKey.currentState!.removeItem(index,(context,animation)&#123;</span><br><span class="line">  <span class="keyword">var</span> removeItem = list[index];</span><br><span class="line">  list.removeAt(index);</span><br><span class="line">  <span class="keyword">return</span> FadeTransition(</span><br><span class="line">    opacity:animation,</span><br><span class="line">    child:removeItem,<span class="comment">// 执行动画的元素</span></span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line">AnimatedList(</span><br><span class="line">  key:_globalKey,</span><br><span class="line">  initialItemCount:list.length,</span><br><span class="line">  itemBuilder:((context,index,animation)&#123;</span><br><span class="line">    <span class="keyword">return</span> FadeTransition(</span><br><span class="line">      opacity:animation,</span><br><span class="line">      child:ListTile(</span><br><span class="line">        title:Text(list[index]),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画执行需要时间，如果没有执行完成再次点击可能有报错，我们可以设置锁来解决</span></span><br><span class="line"><span class="built_in">bool</span> flag = <span class="keyword">true</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  flag = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">// 执行动画</span></span><br><span class="line">  <span class="comment">// 设置定时器执行完成后释放锁</span></span><br><span class="line">  Timer.peridic(<span class="built_in">Duration</span>(millisecondes:<span class="number">500</span>),(timer)&#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">    timer.cancel();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Flutter动画"><a href="#Flutter动画" class="headerlink" title="Flutter动画"></a>Flutter动画</h1><h2 id="动画基本原理及Flutter动画简介"><a href="#动画基本原理及Flutter动画简介" class="headerlink" title="动画基本原理及Flutter动画简介"></a>动画基本原理及Flutter动画简介</h2><p><strong>动画原理</strong><br>在任何系统的UI框架中，动画实现的原理都是相同的，即：在一段时间内，快速地多次改变UI外观；由于人眼会产生视觉暂留，所以最终看到的就是一个“连续的动画，这和电影的原理是一样的。我们将UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS(Frame Per Second),即每秒的动画帧数。很明显，帧率越高则动画就会越流畅！一般情况下，对于人眼来说，动画帧率超过16FPS,就基本能看了，超过32FPS就会感觉相对平滑，而超过32FPS,大多数人基本上就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用能达到的帧率是基本是持平的。</p><p><strong>Flutteri动画简介</strong><br>FLutter中的动画主要分为：<strong>隐式动画</strong>、<strong>显式动画</strong>、<strong>自定义隐式动画</strong>、<strong>自定义显式动画</strong>、和<strong>Hero动画</strong></p><h2 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h2><p>通过几行代码就可以实现隐式动画，由于隐式动画背后的实现原理和繁琐的操作细节都被隐去了，所以叫隐式动画，FLutter中提供的<strong>AnimatedContainer</strong>、<strong>AnimatedPadding</strong>、<strong>AnimatedPositioned</strong>、<strong>AnimatedOpacity</strong>、<strong>AnimatedDefaultTextStyle</strong>、<strong>AnimatedSwitcher</strong>都属于隐式动画，隐式动画中可以通过<code>duration</code>配置动画时长、可以通过Curve（曲线）来配置动画过程</p><p>这几个组件其实就是对应的<strong>Container</strong>、<strong>Padding</strong>、<strong>Positioned</strong>、<strong>Opacity</strong>等组件的有动画版本，即正常我们改变形状是瞬间改变，这些组件会有一个改变的过程</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&quot;Flutter Demo&quot;</span>,</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.blue),</span><br><span class="line">      home: <span class="keyword">const</span> Tabs(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Tabs(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Tabs&gt; createState() =&gt; _TabsState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabsState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Tabs</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      floatingActionButton: FloatingActionButton(onPressed: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          flag = !flag;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;),</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Flutter App&quot;</span>),</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">          child: AnimatedContainer(</span><br><span class="line">        duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">        height: flag ? <span class="number">200</span> : <span class="number">300</span>,</span><br><span class="line">        width: flag ? <span class="number">200</span> : <span class="number">300</span>,</span><br><span class="line">        color: Colors.yellow,</span><br><span class="line">      )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hero动画"><a href="#Hero动画" class="headerlink" title="Hero动画"></a>Hero动画</h2><p>微信朋友圈点击小图片的时候会有一个动画效果到大图预览，这个动画效果就可以使用Hro动画实现。Hero指的是可以在路由（页面）之间飞行”的widget,简单来说Hero动画就是在路由切换时，有一个共享的widget可以在新旧路由间切换。</p><p>使用photo_view 可以预览图片</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:photo_view/photo_view.dart&#x27;</span> <span class="comment">// 预览单张图片</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:photo_view/photo_view_gallery.dart&#x27;</span> <span class="comment">// 预览多张图片</span></span><br></pre></td></tr></table></figure><h1 id="Flutter-Getx"><a href="#Flutter-Getx" class="headerlink" title="Flutter Getx"></a>Flutter Getx</h1><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>通俗的讲：当我们想在多个页面(组件Widget)之间共享状态（数据），或者一个页面（组件Widget)中的多个子组件之间供享状态（数据），这个时候我们就可以用Flutter中的状态管理来管理统一的状态（数据），实现不同组件之间的传值和数据共享。</p><p>现在Flutter的状态管理方案很多，redux、bloc、state、provider、Getx</p><p>provider是官方提供的状态管理解决方案，主要功能就是状态管理。Getx是第三方的状态管理插件，不仅具有状态管理的功能，还具有路由管理、主题管理、国际化多语言管理、Obx局部更新、网络请求、数据验证等功能，相比其他状态管理插件Geⅸ简单、功强大并且高性能。</p><h2 id="Flutter-Getx介绍"><a href="#Flutter-Getx介绍" class="headerlink" title="Flutter Getx介绍"></a>Flutter Getx介绍</h2><p>Getx以是Flutter上的一个轻量且强大的解决方案，Getx为我们提供了高性能的状态管理、智能的依赖注入和便捷的路由管理。<br><a href="https://github.com/jonataslaw/getx/blob/master/README.zh-cn.md"> Getx 中文文档</a></p><ul><li><p>Getx以有3个基本原则：</p><ul><li>性能：Getx以专注于性能和最小资源消耗。Get以打包后的apk占用大小和运行时的内存占用与其他状态管理插件不相上下。</li><li>效率：Getx以的语法非常简捷，并保持了极高的性能，能极大缩短你的开发时长。</li><li>结构：Getx以可以将界面、逻辑、依赖和路由完全解耦，用起来更清爽，逻辑更清晰,代码更容易维护</li></ul></li><li><p>GetX并不臃肿，却很轻量。如果你只使用状态管理，只有状态管理模块会被编译，甚他没用到的东西都不会被编译到你的代码中。它拥有众多的功能，但这些功能都在独立的容器中，只有在使用后才会启动。</p></li><li><p>Getx有一个庞大的生态系统，能够在Android、iOS、Web、Mac、Linux、Windowsi和你的服务器上用同样的代码运行。通过GetServer可以在你的后端完全重用你在前端写的代码。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动应用开发 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习（二）</title>
      <link href="/2022/11/09/Flutter%E5%AD%A6%E4%B9%A02/"/>
      <url>/2022/11/09/Flutter%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter-中的布局组件"><a href="#Flutter-中的布局组件" class="headerlink" title="Flutter 中的布局组件"></a>Flutter 中的布局组件</h1><h2 id="Padding-组件"><a href="#Padding-组件" class="headerlink" title="Padding 组件"></a>Padding 组件</h2><p>这个组件功能比较单一，就是让它里面包裹的元素和四周有距离，虽然使用<strong>Container</strong>组件也可以实现，但是<strong>Padding</strong>组件功能单一，如果只是想实现和四周有间隔，使用<strong>Padding</strong>性能好一些</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Padding(</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">  child:Text(<span class="string">&quot;这个是一个padding内部元素&quot;</span>)，</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Row行组件和Column-列组件"><a href="#Row行组件和Column-列组件" class="headerlink" title="Row行组件和Column 列组件"></a>Row行组件和Column 列组件</h2><p><code>mainAxisAlignment</code> 主轴的排序方式，如果没有外部容器，就自适应整个页面，如果有就相对于外部容器<br><code>crossAxisAlignment</code> 交叉轴方向的排序方式,这个是相对于外部容器的，如果没有外部容器就没有效果</p><p><code>mainAxisSize</code>   主轴大小适配，</p><ul><li>MainAxisSize.min：宽度与子控件保持一致 </li><li>MainAxisSize.max：宽度铺满主轴方向(这个是默认值)</li></ul><p><code>textDirection</code> 子组件水平方向排列顺序，一般在<strong>Row</strong>中设置</p><ul><li>TextDirection.ltr：从左往右开始排列（这个是默认的方向）</li><li>TextDirection.rtl：从右往左开始排列</li></ul><p><code>verticalDirection</code> 子组件垂直方向排列顺序,一般在<strong>Column</strong>中设置<br><code>textBaseline</code> 文字基线<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211100911885.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><code>children</code> 子元素们</p><p>在使用Row和Column组件时，我们经常使用 <code>double.infinity</code> 和 <code>double.maxFinite</code> 这个可以让当前元素的width或者height达到父元素的尺寸,其实就是设置一个无穷大的宽高，铺满外部容器，没有外部容器会铺满整个屏幕</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">400</span>,</span><br><span class="line">      height: <span class="number">700</span>,</span><br><span class="line">      color: Colors.yellow,</span><br><span class="line">      child: Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">        textBaseline: TextBaseline.alphabetic,</span><br><span class="line">        textDirection: TextDirection.rtl,</span><br><span class="line">        children: [</span><br><span class="line">          IconContainer(</span><br><span class="line">            icon: Icons.home,</span><br><span class="line">            color: Colors.green,</span><br><span class="line">          ),</span><br><span class="line">          IconContainer(icon: Icons.search),</span><br><span class="line">          IconContainer(</span><br><span class="line">            icon: Icons.align_horizontal_center,</span><br><span class="line">            color: Colors.black,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211101305512.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="Flex和Expanded弹性布局组件"><a href="#Flex和Expanded弹性布局组件" class="headerlink" title="Flex和Expanded弹性布局组件"></a>Flex和Expanded弹性布局组件</h2><p>F1ex组件可以沿着水平或垂直方向排列子组件，如果你知道主轴方向，使用<strong>Row</strong>或<strong>Co1umn</strong>会方便一些，因为<strong>Row</strong>和<strong>Co1umn</strong>都继承自<strong>Flex</strong>,参数基本相同，所以能使用Flex的地方基本上都可以使用<strong>Row</strong>或<strong>Column</strong>。<strong>Flex</strong>本身功能是很强大的，它也可以和<strong>Expanded</strong>组件配合实现弹性布局，Expanded组件必须放在行和列或者flex组件中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Flex( </span><br><span class="line">      direction: Axis.horizontal, <span class="comment">// 使用flex布局必须指定主轴方向，如果我们要横向布局也可以直接用Row</span></span><br><span class="line">      children: [</span><br><span class="line">        Expanded(</span><br><span class="line">          flex: <span class="number">2</span>,</span><br><span class="line">          child: IconContainer(icon: Icons.search), <span class="comment">//这个元素设置宽度是没有效果的</span></span><br><span class="line">        ), <span class="comment">// 要布局的元素传给Expanded</span></span><br><span class="line">        Expanded(</span><br><span class="line">            flex: <span class="number">3</span>,</span><br><span class="line">            child: IconContainer(</span><br><span class="line">              icon: Icons.home,</span><br><span class="line">              color: Colors.green,</span><br><span class="line">            )),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要一边固定，另一边自适应，那么就一边固定宽高，另一边放在 <strong>Expanded</strong> 组件中，flex设置为1就好了</p><h2 id="Stack-层叠布局组件"><a href="#Stack-层叠布局组件" class="headerlink" title="Stack 层叠布局组件"></a>Stack 层叠布局组件</h2><p><strong>Stack</strong> 组件中<code>children</code> 属性内的组件是层叠的,<strong>Stack</strong>的大小是最大子控件的大小</p><p>Stack未定位的子组件通过配置 <code>alignment</code> 属性来选择层叠的方式<br>Stack未定位的子组件通过配置 <code>fit</code> 参数决定，默认值是<code>StackFit.loose</code>，表示子组件自己决定，<code>StackFit.expand</code>表示尽可能的大</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          height: <span class="number">350</span>,</span><br><span class="line">          width: <span class="number">250</span>,</span><br><span class="line">          color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">136</span>, <span class="number">244</span>, <span class="number">54</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          width: <span class="number">200</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&quot;sdlfksdfsdflksjdf&quot;</span>,</span><br><span class="line">          style: TextStyle(color: Color.fromARGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), fontSize: <span class="number">18</span>),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211101331969.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="Positioned-组件"><a href="#Positioned-组件" class="headerlink" title="Positioned 组件"></a>Positioned 组件</h3><p>注意到上面提到的是<strong>Stack</strong>未定位的组件，那么如何给<strong>Stack</strong>中的组件进行定位呢，我们可以使用<strong>Positioned</strong>组件</p><p><strong>Positioned</strong> 组件定位的时候是相对于<strong>Stack</strong>组件外面的组件，如果<strong>Stack</strong>组件外面没有组件那么就是相对于整个屏幕进行定位,使用的时候，在<strong>Stack</strong> 组件的<code>children</code> 属性中用<strong>Positioned</strong>组件包裹子组件</p><p><code>top</code>      子元素距离顶部的距离<br><code>bottom</code>   子元素距离底部的距离<br><code>height</code>   子组件的高度<br><code>left</code>     子元素距离左侧距离<br><code>right</code>    子元素距离右侧距离<br><code>width</code>    子组件的高度 (注意：宽度和高度必须是固定值，没法使用double.infinity)<br><code>child</code>    子组件<br><code>clipBehavior</code> 设置超出父元素的子元素的显示方式，默认是剪裁掉超出部分</p><p><strong>注意：</strong></p><ol><li><code>left</code>、<code>right</code>和<code>width</code>3个参数只能设置其中2个，因为设置了其中2个，第三个已经确定了，同理<code>top</code>、<code>bottom</code>和<code>height</code>也只能设置其中2个。</li><li>使用<strong>Positioned</strong>组件进行定位的时候，Stack外部的组件不要设置 <code>alignment</code> 属性</li><li>使用 Positioned 组件时如果子元素是Row组件这样没有宽高的或者说宽高自适应的组件，我们还要指定宽高</li><li>如果我们想要组件宽铺满整个屏幕但是又没有办法使用<code>double.infinity</code> 时，我们可以在<code>build()</code>方法中使用下面的代码获取屏幕的宽高<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> size = MediaQuery.of(context).size</span><br><span class="line">size.width</span><br><span class="line">size.height</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">400</span>,</span><br><span class="line">      height: <span class="number">400</span>,</span><br><span class="line">      color: Colors.yellow,</span><br><span class="line">      <span class="comment">// alignment: Alignment.topLeft, //使用Positioned组件进行定位的时候，Stack外部的组件不要设置 `alignment` 属性</span></span><br><span class="line">      child: Stack(</span><br><span class="line">        clipBehavior: Clip.none, <span class="comment">//超出显示</span></span><br><span class="line">        children: [</span><br><span class="line">          Positioned(</span><br><span class="line">            bottom: <span class="number">0</span>,</span><br><span class="line">            right: <span class="number">0</span>,</span><br><span class="line">            child: Container(</span><br><span class="line">              height: <span class="number">350</span>,</span><br><span class="line">              width: <span class="number">250</span>,</span><br><span class="line">              color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">136</span>, <span class="number">244</span>, <span class="number">54</span>),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> Positioned(</span><br><span class="line">              right: <span class="number">0</span>,</span><br><span class="line">              bottom: <span class="number">200</span>,</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&quot;sdlfksdfsdflksjdf&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                    color: Color.fromARGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), fontSize: <span class="number">18</span>),</span><br><span class="line">              ))</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211101426388.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="Align-组件"><a href="#Align-组件" class="headerlink" title="Align 组件"></a>Align 组件</h3><p><strong>Align</strong>组件不但可以结合<strong>Stack</strong>组件，也可以结合<strong>Container</strong>组件来使用，我们之前用的<strong>Center</strong>组件就是<strong>Align</strong>组件的子类，</p><p>使用时用<strong>Align</strong>组件包裹子组件来调整子组件在外部组件的位置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">400</span>,</span><br><span class="line">      height: <span class="number">400</span>,</span><br><span class="line">      color: Colors.yellow,</span><br><span class="line">      <span class="comment">// alignment: Alignment.topLeft,</span></span><br><span class="line">      child: <span class="keyword">const</span> Align(</span><br><span class="line">        alignment: Alignment(<span class="number">-0.5</span>, <span class="number">1</span>),</span><br><span class="line">        child: Text(<span class="string">&quot;你好你好Flutter&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AspectRatio-组件"><a href="#AspectRatio-组件" class="headerlink" title="AspectRatio 组件"></a>AspectRatio 组件</h2><p><strong>AspectRatio</strong>的作用是根据设置调整子元素child的宽高比。</p><p><strong>AspectRatio</strong>首先会在布局限制条件允许的范围内尽可能的扩展，Widget的高度是由宽度和比率决定的，类以于<strong>BoxFit</strong>中的<strong>contain</strong>,按照固定比率去尽量占满区域。如果在满足所有限制条件过后无法找到一个可行的尺寸，<strong>AspectRatio</strong>最终将会去优先适应布局限制条件，而忽略所设置的比率。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 子元素的宽高比是2：1</span></span><br><span class="line">    <span class="keyword">return</span> AspectRatio(</span><br><span class="line">      aspectRatio: <span class="number">2</span> / <span class="number">1</span>,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cart-组件"><a href="#Cart-组件" class="headerlink" title="Cart 组件"></a>Cart 组件</h2><p>Card是卡片组件块，内容可以由大多数类型的Widget组成，Cart具有圆角和阴影，这让它看起来有立体感</p><p><code>margin</code> 外边距</p><p><code>elevation</code> 阴影深度</p><p><code>color</code> 背景颜色</p><p><code>shadowColor</code> 阴影颜色</p><p><code>Shape</code> Card的阴影效果，默认阴影效果为圆角的长方形边</p><p><code>clipBehavior</code> 内容溢出的剪切方式</p><ul><li><code>CIip.none</code>不剪切</li><li><code>Cip.hardEdge</code>裁剪但不应用抗锯齿</li><li><code>Clip.antiAlias</code>裁剪而且抗锯齿</li><li><code>Clip.antiAliasWithSaveLayer</code>带有抗锯齿的剪辑，并在剪辑之后立即保存saveLayer</li></ul><p><code>child</code> 子组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Card(</span><br><span class="line">          elevation: <span class="number">10</span>,</span><br><span class="line">          margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">          shape:</span><br><span class="line">              RoundedRectangleBorder(borderRadius: BorderRadius.circular(<span class="number">20</span>)),</span><br><span class="line">          child: Column(children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">                style: TextStyle(fontSize: <span class="number">28</span>),</span><br><span class="line">              ),</span><br><span class="line">              subtitle: Text(<span class="string">&quot;水军&quot;</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;电话：：：：：&quot;</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;地址》》》》》》》&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ]),</span><br><span class="line">        ),</span><br><span class="line">        Card(</span><br><span class="line">          color: Colors.blueAccent,</span><br><span class="line">          elevation: <span class="number">10</span>,</span><br><span class="line">          margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">15</span>),</span><br><span class="line">          child: Column(children: <span class="keyword">const</span> [</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(</span><br><span class="line">                <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">                style: TextStyle(fontSize: <span class="number">28</span>),</span><br><span class="line">              ),</span><br><span class="line">              subtitle: Text(<span class="string">&quot;水军&quot;</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;电话：：：：：&quot;</span>),</span><br><span class="line">            ),</span><br><span class="line">            Divider(),</span><br><span class="line">            ListTile(</span><br><span class="line">              title: Text(<span class="string">&quot;地址》》》》》》》&quot;</span>),</span><br><span class="line">            )</span><br><span class="line">          ]),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211110821719.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h2><p><strong>ElevatedButton</strong> 普通按钮<br><strong>TextButton</strong> 文本按钮<br><strong>OutlinedButton</strong> 带边框的按钮<br><strong>IconButton</strong> 图标按钮</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211120900262.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Row(</span><br><span class="line">          children: [</span><br><span class="line">            ElevatedButton(</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;ElevatedButton&quot;</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&quot;普通按钮&quot;</span>)),</span><br><span class="line">            TextButton(onPressed: () &#123;&#125;, child: <span class="keyword">const</span> Text(<span class="string">&quot;文本按钮&quot;</span>)),</span><br><span class="line">            <span class="keyword">const</span> OutlinedButton(onPressed: <span class="keyword">null</span>, child: Text(<span class="string">&quot;带边框的按钮&quot;</span>)),</span><br><span class="line">            IconButton(onPressed: () &#123;&#125;, icon: <span class="keyword">const</span> Icon(Icons.thumb_up))</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过 <code>icon</code> 命名构造函数来轻松的给<strong>ElevatedButton</strong>，<strong>TextButton</strong>，<strong>OutlinedButton</strong>组件添加图标,效果入下图所示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211120913920.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">  children: [</span><br><span class="line">    ElevatedButton.icon(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        icon: <span class="keyword">const</span> Icon(Icons.send),</span><br><span class="line">        label: <span class="keyword">const</span> Text(<span class="string">&quot;发送&quot;</span>)),</span><br><span class="line">    TextButton.icon(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        icon: <span class="keyword">const</span> Icon(Icons.info),</span><br><span class="line">        label: <span class="keyword">const</span> Text(<span class="string">&quot;消息&quot;</span>)),</span><br><span class="line">    OutlinedButton.icon(</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">        icon: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        label: <span class="keyword">const</span> Text(<span class="string">&quot;增加&quot;</span>)),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通过 <code>style</code> 属性可以修改<strong>按钮的样式</strong></p><p><code>foregroundColor</code> 文本颜色<br><code>backgroundColor</code> 按钮的颜色<br><code>shadowColor</code> 阴影颜色<br><code>elevation</code> 阴影的范围，值越大阴影范围越大<br><code>padding</code> 内边距<br><code>shape</code> 设置按钮的形状<br><code>side</code> 设置边框</p><p>对于按钮的宽高,我们可以通过在按钮外部包裹 <strong>SizedBox</strong> 组件来调整</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121131171.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">          children: [</span><br><span class="line">            ElevatedButton.icon(</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.send),</span><br><span class="line">              style: ButtonStyle( <span class="comment">// 设置按钮样式</span></span><br><span class="line">                  side: MaterialStateProperty.all(<span class="comment">// 边框颜色样式</span></span><br><span class="line">                      <span class="keyword">const</span> BorderSide(width: <span class="number">2</span>, color: Colors.green)),</span><br><span class="line">                  backgroundColor:</span><br><span class="line">                      MaterialStateProperty.all(Colors.red), <span class="comment">// 背景颜色</span></span><br><span class="line">                  foregroundColor:</span><br><span class="line">                      MaterialStateProperty.all(Colors.black) <span class="comment">// 前景颜色</span></span><br><span class="line">                  ),</span><br><span class="line">              onPressed: () &#123;&#125;,</span><br><span class="line">              label: <span class="keyword">const</span> Text(<span class="string">&quot;红色的发送&quot;</span>),</span><br><span class="line">            ),</span><br><span class="line">            SizedBox( <span class="comment">// 通过包裹SizedBox来调整按钮大小</span></span><br><span class="line">              height: <span class="number">60</span>,</span><br><span class="line">              width: <span class="number">200</span>,</span><br><span class="line">              child: ElevatedButton(</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&quot;大按钮&quot;</span>),</span><br><span class="line">                onPressed: () &#123;&#125;,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上图中的自适应宽度的按钮，我们可以在<strong>SizedBox</strong>外面包裹<strong>Expanded</strong>组件，设置其<code>flex</code>为 1 ,如果不想填满整个页面，可以改为使用<strong>Container</strong>组件设置一下 <code>margin</code>  </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Row(</span><br><span class="line">          children: [</span><br><span class="line">            Expanded(</span><br><span class="line">                flex: <span class="number">1</span>,</span><br><span class="line">                child: Container(</span><br><span class="line">                  height: <span class="number">60</span>,</span><br><span class="line">                  margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">                  child: ElevatedButton(</span><br><span class="line">                    child: <span class="keyword">const</span> Text(<span class="string">&quot;自适应宽度的按钮&quot;</span>),</span><br><span class="line">                    onPressed: () &#123;&#125;,</span><br><span class="line">                  ),</span><br><span class="line">              ))</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圆角和圆形的按钮,对于圆角的按钮，我们通过设置 <code>style</code> 属性的shape可以改变边框的形状，如下图所示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121237177.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">          children: [</span><br><span class="line">            SizedBox(</span><br><span class="line">              height: <span class="number">60</span>,</span><br><span class="line">              child: ElevatedButton(</span><br><span class="line">                onPressed: () &#123;&#125;,</span><br><span class="line">                style: ButtonStyle( <span class="comment">// 修改shape，圆角</span></span><br><span class="line">                    shape: MaterialStateProperty.all(RoundedRectangleBorder(</span><br><span class="line">                        borderRadius: BorderRadius.circular(<span class="number">20</span>)))),</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&quot;圆角的按钮&quot;</span>)),</span><br><span class="line">            ),</span><br><span class="line">            SizedBox(</span><br><span class="line">              height: <span class="number">80</span>,</span><br><span class="line">              width: <span class="number">80</span>,</span><br><span class="line">              child: ElevatedButton(</span><br><span class="line">                  onPressed: () &#123;&#125;,</span><br><span class="line">                  style: ButtonStyle( <span class="comment">// 圆形按钮</span></span><br><span class="line">                      shape: MaterialStateProperty.all(<span class="keyword">const</span> CircleBorder(</span><br><span class="line">                          side: BorderSide(width: <span class="number">5</span>, color: Colors.green)))),</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&quot;圆形的按钮&quot;</span>)),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改带边框的按钮的边框样式,修改<code>style</code>属性中的<code>side</code>属性，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121249731.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SizedBox(</span><br><span class="line">  height: <span class="number">40</span>,</span><br><span class="line">  width: <span class="number">120</span>,</span><br><span class="line">  child: OutlinedButton(</span><br><span class="line">      onPressed: () &#123;&#125;,</span><br><span class="line">      style: ButtonStyle(</span><br><span class="line">        side: MaterialStateProperty.all(</span><br><span class="line">            <span class="keyword">const</span> BorderSide(width: <span class="number">5</span>, color: Colors.red)),</span><br><span class="line">      ),</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&quot;带边框的按钮&quot;</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Wrap-组件"><a href="#Wrap-组件" class="headerlink" title="Wrap 组件"></a>Wrap 组件</h2><p><strong>Wrap</strong>可以实现流布局，单行的<strong>Wrap</strong>跟<strong>Row</strong>表现几乎一致，单列的<strong>Wrap</strong>则跟<strong>Column</strong>表现几乎一致。但<strong>Row</strong>与<strong>Column</strong>都是单行单列的，<strong>Wrap</strong>则突破了这个限制，mainAxis上空间不足时，则向crossAxis上去扩展显示。</p><p><code>direction</code> 主轴的方向，默认水平<br><code>alignment</code> 主轴的对其方式<br><code>spacing</code> 主轴方向上的间距<br><code>runAlignment</code> run的对齐方式。run可以理解为新的行或者列，如果是水平方向布局的话，run可以理解为新的一行<br><code>runSpacing</code> run的间距<br><code>textDirection</code> 文本方向<br><code>crossAxisAlignment</code> 列方向的对齐方式<br><code>verticalDirection</code> 定义了children摆放顺序，默认是down,见Flex相关属性介绍。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211121406871.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Wrap(</span><br><span class="line">      <span class="comment">// direction: Axis.vertical,</span></span><br><span class="line">      alignment: WrapAlignment.start,</span><br><span class="line">      runAlignment: WrapAlignment.center,</span><br><span class="line">      <span class="comment">// crossAxisAlignment: WrapCrossAlignment.center,</span></span><br><span class="line">      spacing: <span class="number">10</span>,</span><br><span class="line">      runSpacing: <span class="number">5</span>,</span><br><span class="line">      children: [</span><br><span class="line">        MYButton(  <span class="string">&quot;第一季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第二季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第三季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第四季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第五季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第六季(SDFSDFSDF)&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第七季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第八季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第九季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十一季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十二季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十三季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十四季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十五季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十六季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第 十 七 季 ( SDFSDF )&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十八季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">        MYButton(  <span class="string">&quot;第十九季&quot;</span>,  onPressed: () &#123;&#125;,),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">void</span> <span class="built_in">Function</span>()? onPressed;</span><br><span class="line">  MYButton(<span class="keyword">this</span>.text, &#123;<span class="keyword">super</span>.key, <span class="keyword">required</span> <span class="keyword">this</span>.onPressed&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: onPressed,</span><br><span class="line">      style: ButtonStyle(</span><br><span class="line">          backgroundColor: MaterialStateProperty.all(</span><br><span class="line">              <span class="keyword">const</span> Color.fromARGB(<span class="number">242</span>, <span class="number">255</span>, <span class="number">244</span>, <span class="number">244</span>)),</span><br><span class="line">          foregroundColor: MaterialStateProperty.all(Colors.black45)),</span><br><span class="line">      child: Text(text),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动应用开发 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习（一）</title>
      <link href="/2022/11/06/Flutter%E5%AD%A6%E4%B9%A01/"/>
      <url>/2022/11/06/Flutter%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter的目录结构"><a href="#Flutter的目录结构" class="headerlink" title="Flutter的目录结构"></a>Flutter的目录结构</h1><p>创建flutter项目，除了在Android studio中创建，还可以使用命令行进行创建。我们进入想要创建的目录，输入命令 <code>flutter create flutter02</code> 就创建了一个叫 <code>flutter02</code> 的flutter项目。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211061450153.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>下面看一下项目的结构</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211061456518.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="Flutter的入口文件"><a href="#Flutter的入口文件" class="headerlink" title="Flutter的入口文件"></a>Flutter的入口文件</h1><p>Flutter的入口文件是 <code>lib/main.dart</code> ， 入口方法是 <code>main</code> 函数，在这个函数中通过 <code>runApp()</code> 方法就可以调用<strong>内置组件</strong>或者<strong>我们写的组件</strong>来进行页面布局。</p><p>我们可以把这个文件中的内容都删掉然后自己写。</p><p>首先我们要引入库 <code>import &#39;package:flutter/material.dart&#39;;</code>,然后利用一些提供的组件进行编写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> Center(</span><br><span class="line">    child: Text(<span class="string">&quot;你好Flutter&quot;</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">        style: TextStyle(color: Color.fromRGBO(<span class="number">212</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">1</span>), fontSize: <span class="number">40</span>)),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用MaterialApp-和-Scaffold两个组件来装饰App"><a href="#用MaterialApp-和-Scaffold两个组件来装饰App" class="headerlink" title="用MaterialApp 和 Scaffold两个组件来装饰App"></a>用MaterialApp 和 Scaffold两个组件来装饰App</h1><h2 id="MaterialApp"><a href="#MaterialApp" class="headerlink" title="MaterialApp"></a>MaterialApp</h2><p>MaterialApp是一个方便的Widget，它封装了应用程序实现Material Design所需要的一些Widget。一般做顶层的widget使用</p><p>常用的属性</p><p><code>home</code>： 主页<br><code>title</code>： 标题<br><code>color</code>： 颜色<br><code>theme</code>： 主题<br><code>routes</code>： 路由</p><h2 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h2><p>Scaffold是Marterial Design布局结构的基本实现，此类提供了用于显示drawer、snackbar和底部sheet的API</p><p>Scaffold有下面几个主要属性</p><p><code>appBar</code>：显示在界面顶部的一个AppBar<br><code>body</code>：当前界面所显示的主要内容Widget<br><code>drawer</code>：抽屉菜单控件</p><h2 id="使用上面两个组件"><a href="#使用上面两个组件" class="headerlink" title="使用上面两个组件"></a>使用上面两个组件</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">      body: <span class="keyword">const</span> Center(</span><br><span class="line">        child: Text(<span class="string">&quot;你好Flutter&quot;</span>,</span><br><span class="line">            textDirection: TextDirection.ltr,</span><br><span class="line">            style:</span><br><span class="line">                TextStyle(color: Color.fromRGBO(<span class="number">212</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">1</span>), fontSize: <span class="number">40</span>)),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flutter把内容抽离成单独一个组件"><a href="#Flutter把内容抽离成单独一个组件" class="headerlink" title="Flutter把内容抽离成单独一个组件"></a>Flutter把内容抽离成单独一个组件</h1><p>在Flutter中<strong>自定义组件就是一个类</strong>，这个类继承StatelesWidget&#x2F;StatefulWidget</p><p>StatelessWidget是一个<strong>无状态组件</strong>，状态不可改变的widget</p><p>StatefulWidget是一个<strong>有状态组件</strong>，持有的状态可能在widget生命周期改变</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)), body: <span class="keyword">const</span> MyApp()),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">      child: Text(<span class="string">&quot;你好Flutter&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style:</span><br><span class="line">              TextStyle(color: Color.fromRGBO(<span class="number">212</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">1</span>), fontSize: <span class="number">40</span>)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flutter中的组件"><a href="#Flutter中的组件" class="headerlink" title="Flutter中的组件"></a>Flutter中的组件</h1><h2 id="Container容器组件"><a href="#Container容器组件" class="headerlink" title="Container容器组件"></a>Container容器组件</h2><p>类似于html中的div</p><ol><li><p><strong>height</strong> 容器高度</p></li><li><p><strong>width</strong> 容器宽度</p></li><li><p><strong>child</strong> 容器子元素</p></li><li><p><strong>margin</strong> 表示Container与外部其他组件的距离。Edgelnsets.all(20.0),</p></li><li><p><strong>padding</strong> 就是Container的内边距，指Containeri边缘与Child之间的距离, padding:Edgelnsets.all(10.0)</p></li><li><p><strong>alignment</strong> 用来设置container内部容器的位置。<br> <code>topCenter</code> 顶部-居中<br> <code>topLeft</code> 顶部-居左<br> <code>topRight</code> 顶部-居右<br> <code>center</code> 水平居中-垂直居中<br> <code>centerLeft</code> 垂直居中-水平居左<br> <code>centerRight</code> 垂直居中-水平居右<br> <code>bottomCenter</code> 底部-居中<br> <code>bottomLeft</code> 底部-居左<br> <code>bottomRight</code> 底部-居右</p></li><li><p><strong>decoration</strong> 用来改变container的样式。边框，阴影，背景色等</p>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">decoration: BoxDecoration(</span><br><span class="line">    color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">132</span>), <span class="comment">//背景色</span></span><br><span class="line">    border: Border.all(</span><br><span class="line">        color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">        width: <span class="number">2.0</span>), <span class="comment">//边框，也可以单独设置每个边框</span></span><br><span class="line">    borderRadius: BorderRadius.circular((<span class="number">8</span>)), <span class="comment">//圆角</span></span><br><span class="line">    boxShadow: <span class="keyword">const</span> [</span><br><span class="line">      BoxShadow(</span><br><span class="line">          color: Colors.blue, <span class="comment">// 阴影颜色</span></span><br><span class="line">          offset: Offset(<span class="number">10.0</span>, <span class="number">12.0</span>), <span class="comment">// 阴影开始的位置</span></span><br><span class="line">          blurRadius: <span class="number">40</span> <span class="comment">// 阴影强度</span></span><br><span class="line">          )</span><br><span class="line">    ],</span><br><span class="line">    gradient: <span class="keyword">const</span> LinearGradient(</span><br><span class="line">      colors: [Colors.red, Colors.orange],</span><br><span class="line">    ) <span class="comment">// 背景颜色渐变 LinearGradient 线性渐变 RadialGradient 径向渐变</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li><li><p><strong>transform</strong> 让Container容易进些旋转之类的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform: Matrix4.translationValues(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="comment">//沿着x，y轴位移</span></span><br><span class="line">transform: Matrix4.rotationZ(<span class="number">0.5</span>), <span class="comment">//沿着z轴旋转，也可以沿着x，y</span></span><br><span class="line">transform: Matrix4.skewX(<span class="number">0.2</span>), <span class="comment">//沿着x倾斜，也可以沿y</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MaterialApp(</span><br><span class="line">    home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;你好Flutter&quot;</span>)),</span><br><span class="line">        body: Column( <span class="comment">//使用column来放多个组件，这个组件后面介绍</span></span><br><span class="line">          children: <span class="keyword">const</span> [MyApp(), MyButton()],</span><br><span class="line">        )),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">        <span class="comment">// transform: Matrix4.translationValues(10, 0, 0), //沿着x，y轴位移</span></span><br><span class="line">        <span class="comment">// transform: Matrix4.rotationZ(0.5), //沿着z轴旋转，也可以沿着x，y</span></span><br><span class="line">        <span class="comment">// transform: Matrix4.skewX(0.2), //沿着x倾斜，也可以沿y</span></span><br><span class="line">        width: <span class="number">100</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">            color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">132</span>), <span class="comment">//背景色</span></span><br><span class="line">            border: Border.all(</span><br><span class="line">                color: <span class="keyword">const</span> Color.fromARGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">                width: <span class="number">2.0</span>), <span class="comment">//边框，也可以单独设置每个边框</span></span><br><span class="line">            borderRadius: BorderRadius.circular((<span class="number">8</span>)), <span class="comment">//圆角</span></span><br><span class="line">            boxShadow: <span class="keyword">const</span> [</span><br><span class="line">              BoxShadow(</span><br><span class="line">                  color: Colors.blue, <span class="comment">// 阴影颜色</span></span><br><span class="line">                  offset: Offset(<span class="number">10.0</span>, <span class="number">12.0</span>), <span class="comment">// 阴影开始的位置</span></span><br><span class="line">                  blurRadius: <span class="number">40</span> <span class="comment">// 阴影强度</span></span><br><span class="line">                  )</span><br><span class="line">            ],</span><br><span class="line">            gradient: <span class="keyword">const</span> LinearGradient(</span><br><span class="line">              colors: [Colors.red, Colors.orange],</span><br><span class="line">            ) <span class="comment">// 背景颜色渐变 LinearGradient 线性渐变 RadialGradient 径向渐变</span></span><br><span class="line">            ),</span><br><span class="line">        child: <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&quot;你好吗&quot;</span>,</span><br><span class="line">          style: TextStyle(color: Color.fromRGBO(<span class="number">9</span>, <span class="number">251</span>, <span class="number">251</span>, <span class="number">1</span>), fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyButton(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      width: <span class="number">200</span>,</span><br><span class="line">      height: <span class="number">40</span>,</span><br><span class="line">      margin: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">          color: Colors.blue, borderRadius: BorderRadius.circular(<span class="number">20</span>)),</span><br><span class="line">      child: <span class="keyword">const</span> Text(</span><br><span class="line">        <span class="string">&quot;按钮&quot;</span>,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Text组件"><a href="#Text组件" class="headerlink" title="Text组件"></a>Text组件</h2><p>这个是文本组件</p><ol><li><strong>textAlign</strong> 文本对齐方式（center，left，right，justfy）</li><li><strong>textDirection</strong> 文本方向（ltr从左到右，rtl从右到左）</li><li><strong>overflow</strong> 文字超出后的处理方式（clip裁剪，fade隐藏，ellipsis省略号）</li><li><strong>textScaleFactor</strong> 文字显示倍率</li><li><strong>maxLines</strong> 文字显示最大行数</li><li><strong>style</strong> 字体的样式<br>TextStyle的参数<ul><li><code>decoration</code> 文字装饰线（none 没有线，lineThrough删除线，overline上划线，underline下划线）</li><li><code>decorationColor</code> 文字装饰线颜色</li><li><code>decorationStyle</code> 装饰线风格（dashed，dotted虚线，double两个线，solid实线，wavy波浪线）</li><li><code>wordSpacing</code> 单词间隙（如果是负值会变紧凑）</li><li><code>letterSpacing</code> 字母间隙</li><li><code>fontStyle</code> 文字样式（italic斜体，normal正常体）</li><li><code>fontSize</code> 文字大小</li><li><code>color</code> 文字颜色</li><li><code>fontWeight</code> 字体粗细（bold粗，normal正常）</li></ul></li></ol><h2 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h2><p>Flutter中，我们可以通过<strong>Image</strong>组件来加载并显示图片<strong>Image</strong>的数据源可以是asset、文件、内存以及网络。</p><h3 id="Image-network-加载网络图片"><a href="#Image-network-加载网络图片" class="headerlink" title="Image.network 加载网络图片"></a>Image.network 加载网络图片</h3><ol><li><strong>width和height</strong> 配合ClipOval才能看到效果</li><li><strong>alignment</strong> 图片在外部容器的位置</li><li><strong>color和colorBlendMode</strong> 设置图片的背景颜色，通常和colorBlendMode一起使用,这样可以是图片颜色和背景色混合。</li><li><strong>fit</strong> 控制图片的拉伸和挤压，根据父容器来<br><code>BoxFit.fill</code> 全图显示，图片会被拉伸，充满父容器<br><code>BoxFit.contain</code> 全图显示，显示原来的比例，可能父容器有空隙<br><code>BoxFit.cover</code> 显示可能拉伸，可能裁切，充满（图片充满整个容器，不变性）<br><code>BoxFit.fitWidth</code> 宽度充满<br><code>BoxFit.fitHeight</code> 高度充满<br><code>BoxFit.scaleDown</code> 效果和contain差不多，但是此属性不允许显示超过源图片大小，可小不可大</li><li><strong>repeat</strong> 平铺<br><code>ImageRepeat.repeatX</code> X轴平铺<br><code>ImageRepeat.repeatY</code> Y轴平铺<br><code>ImageRepeat.repeat</code> X和Y轴平铺</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ImgContainer(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      width: <span class="number">200</span>,</span><br><span class="line">      decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.yellow),</span><br><span class="line">      child: Image.network(</span><br><span class="line">        <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>,</span><br><span class="line">        scale: <span class="number">2</span>, <span class="comment">//缩放</span></span><br><span class="line">        alignment: Alignment.bottomCenter, <span class="comment">// 图片在外部容器中的位置</span></span><br><span class="line">        fit: BoxFit.fill,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Image-assets-加载本地图片"><a href="#Image-assets-加载本地图片" class="headerlink" title="Image.assets 加载本地图片"></a>Image.assets 加载本地图片</h3><p>加载本地图片之前，需要进行下面的准备</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211062021177.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>本地图片这个属性没有什么差别，主要是要放在目录下并配置<code>pubspec.yaml</code>文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">localImg</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> localImg(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">150</span>,</span><br><span class="line">      width: <span class="number">150</span>,</span><br><span class="line">      decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.yellow),</span><br><span class="line">      child: Image.asset(</span><br><span class="line">        <span class="string">&quot;images/a.jpeg&quot;</span>, <span class="comment">// 这里直接写更目录的，然后引擎会根据不同的dpi去找对应文件夹中的图片</span></span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现圆形图片"><a href="#实现圆形图片" class="headerlink" title="实现圆形图片"></a>实现圆形图片</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用Container背景图片写一个圆形图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Circular(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">50</span>),</span><br><span class="line">          color: Colors.yellow,</span><br><span class="line">          image: <span class="keyword">const</span> DecorationImage(</span><br><span class="line">              image: NetworkImage(</span><br><span class="line">                <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              fit: BoxFit.cover)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用ClipOval实现圆形图片</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClipImg</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ClipImg(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ClipOval(</span><br><span class="line">      child: Image.network(</span><br><span class="line">        <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>,</span><br><span class="line">        scale: <span class="number">2</span>, <span class="comment">//缩放</span></span><br><span class="line">        alignment: Alignment.bottomCenter, <span class="comment">// 图片在外部容器中的位置</span></span><br><span class="line">        fit: BoxFit.fill,</span><br><span class="line">        width: <span class="number">100</span>,</span><br><span class="line">        height: <span class="number">100</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用CircleAvatar组件实现圆形图片</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleAvatarImg</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CircleAvatarImg(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> CircleAvatar(</span><br><span class="line">        radius: <span class="number">30</span>, <span class="comment">// 设置半径</span></span><br><span class="line">        backgroundImage: NetworkImage(</span><br><span class="line">            <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过在一个园里嵌套另一个圆达到给圆加边框的效果</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleAvatarImg</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CircleAvatarImg(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> CircleAvatar(</span><br><span class="line">      radius: <span class="number">30</span>,</span><br><span class="line">      backgroundColor: Color.fromARGB(<span class="number">255</span>, <span class="number">56</span>, <span class="number">54</span>, <span class="number">54</span>),</span><br><span class="line">      child: CircleAvatar(</span><br><span class="line">          radius: <span class="number">25</span>, <span class="comment">// 设置半径</span></span><br><span class="line">          backgroundImage: NetworkImage(</span><br><span class="line">              <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图标组件"><a href="#图标组件" class="headerlink" title="图标组件"></a>图标组件</h2><h3 id="内置图标"><a href="#内置图标" class="headerlink" title="内置图标"></a>内置图标</h3><p><a href="https://www.fluttericon.com/">官方内置图标库</a>，里面可以查看一些图标以及使用。</p><p>内置图标组件是<code>Icon()</code> 我们可以点进源码看有什么参数一般用法如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IconContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> IconContainer(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: <span class="keyword">const</span> [</span><br><span class="line">        Icon(</span><br><span class="line">          Icons.home, <span class="comment">// 通过Icons 来调用内置的一些图标</span></span><br><span class="line">          size: <span class="number">40</span>, <span class="comment">// 设置图标大小</span></span><br><span class="line">          color: Colors.red, <span class="comment">// 设置图标颜色</span></span><br><span class="line">        ),</span><br><span class="line">        Icon(Icons.drafts)</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用自定义图标"><a href="#使用自定义图标" class="headerlink" title="使用自定义图标"></a>使用自定义图标</h3><p><a href="https://www.iconfont.cn/">阿里巴巴图标库</a>中有很多图标，方便我们选择和查找</p><ol><li>首先我们在网站上选择并下载iconfont.ttf文件<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211070822052.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li>在项目根目录创建 <code>fonts</code> 文件夹，并把<code>.ttf</code> 文件放进去<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211070828125.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li>在 <code>pubspec.ymal</code> 文件中进行配置<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211070930439.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li>自定义字体的类,在 <code>lib</code> 目录下创建 <code>.dart</code> 文件放自己定义的图标类<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211070936595.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyiconFont</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData book =</span><br><span class="line">      IconData(<span class="number">0x3447</span>, fontFamily: <span class="string">&quot;myiconFont&quot;</span>, matchTextDirection: <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData weixin =</span><br><span class="line">      IconData(<span class="number">0xf0106</span>, fontFamily: <span class="string">&quot;myiconFont&quot;</span>, matchTextDirection: <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData shopcat =</span><br><span class="line">      IconData(<span class="number">0xe73c</span>, fontFamily: <span class="string">&quot;myiconFont&quot;</span>, matchTextDirection: <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在<code>Icon()</code>中使用<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Icon(</span><br><span class="line">   MyiconFont.book, <span class="comment">// 直接使用自定义的类名和属性就可以了，其它的和内置的图标一样</span></span><br><span class="line">   size: <span class="number">50</span>,</span><br><span class="line">   color: Colors.green,</span><br><span class="line"> ),</span><br></pre></td></tr></table></figure></li></ol><h2 id="ListView-列表组件"><a href="#ListView-列表组件" class="headerlink" title="ListView 列表组件"></a>ListView 列表组件</h2><p>列表布局是我们项目开发中最常用的一种布局方式。Flutter中我们可以通过ListView:来定义列表项，支持垂直和水平方向展示。通过一个属性就可以控制列表的显示方向。列表有以下分类：</p><ol><li>垂直列表</li><li>垂直图文列表</li><li>水平列表</li><li>动态列表</li></ol><p>列表组件常用参数：</p><ol><li><strong>scrollDirection</strong> <code>Axis.horizontal</code>水平列表、<code>Axis.vertical</code>垂直列表</li><li><strong>padding</strong> 内边距</li><li><strong>resolve</strong> 组件反向排序</li><li><strong>children</strong> 列表元素</li></ol><h3 id="静态列表"><a href="#静态列表" class="headerlink" title="静态列表"></a>静态列表</h3><p><strong>ListView</strong> 一般会搭配<strong>LIstTile</strong>来使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListView 一般会搭配LIstTile来使用，Divider组件就是一条线</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: <span class="keyword">const</span> [</span><br><span class="line">        ListTile(</span><br><span class="line">          title: Text(<span class="string">&quot;我是一个列表&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Divider(), <span class="comment">// 就是一个线</span></span><br><span class="line">        ListTile(</span><br><span class="line">          title: Text(<span class="string">&quot;我是一个列表&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Divider(), <span class="comment">// 就是一个线</span></span><br><span class="line">        ListTile(</span><br><span class="line">          title: Text(<span class="string">&quot;我是一个列表&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ListTile</strong> 还有一些别的属性,比如添加前后的图标,效果如下图，还可以绑定点击事件，这个后面再说</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: <span class="keyword">const</span> [</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(</span><br><span class="line">            Icons.home,</span><br><span class="line">            color: Colors.green,</span><br><span class="line">          ), <span class="comment">//列表前面的图标</span></span><br><span class="line">          title: Text(<span class="string">&quot;首页&quot;</span>),</span><br><span class="line">          trailing: Icon(Icons.chevron_right_sharp), <span class="comment">// 列表后面的东西，</span></span><br><span class="line">        ),</span><br><span class="line">        Divider(), <span class="comment">// 就是一个线</span></span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Icon(</span><br><span class="line">            MyiconFont.book,</span><br><span class="line">            color: Colors.yellow,</span><br><span class="line">          ), <span class="comment">//列表前面的图标</span></span><br><span class="line">          title: Text(<span class="string">&quot;读书&quot;</span>),</span><br><span class="line">          trailing: Icon(Icons.chevron_right_sharp), <span class="comment">// 列表后面的东西，</span></span><br><span class="line">        ),</span><br><span class="line">        Divider(), <span class="comment">// 就是一个线</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211080916596.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Image.network(</span><br><span class="line">              <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>), <span class="comment">// 前面的图片，也可以放在 trailing 中即放后面</span></span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&quot;profiler on P30 Pro is available at&quot;</span>),</span><br><span class="line">          subtitle: <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&quot;String data, &#123;Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirecti&quot;</span>), <span class="comment">// 二级标题</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Divider(), <span class="comment">// 就是一个线</span></span><br><span class="line">        ListTile(</span><br><span class="line">          leading: Image.network(</span><br><span class="line">              <span class="string">&quot;https://www.itying.com/themes/itying/images/ionic4.png&quot;</span>), </span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&quot;profiler on P30 Pro is available at&quot;</span>),</span><br><span class="line">          subtitle: <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&quot;String data,Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirectiPerforming hot restart.. Restarted application in 8&quot;</span>), <span class="comment">// 二级标题</span></span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211080925481.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>除了<strong>ListTile</strong>，<strong>ListView</strong>中还可以随意放其它的组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Image.network(<span class="string">&quot;https://www.itying.com/images/flutter/1.png&quot;</span>),</span><br><span class="line">        Container(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          height: <span class="number">44</span>,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&quot;我是一个标题&quot;</span>,</span><br><span class="line">            textAlign: TextAlign.center,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">22</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Image.network(<span class="string">&quot;https://www.itying.com/images/flutter/2.png&quot;</span>),</span><br><span class="line">        Container(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          height: <span class="number">44</span>, <span class="comment">// 在垂直列表中直接加Container，宽度是自适应列表宽度的，配置是没有效果的</span></span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&quot;我是一个标题&quot;</span>,</span><br><span class="line">            textAlign: TextAlign.center,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">22</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Image.network(<span class="string">&quot;https://www.itying.com/images/flutter/3.png&quot;</span>),</span><br><span class="line">        Container(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          height: <span class="number">44</span>,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&quot;我是一个标题&quot;</span>,</span><br><span class="line">            textAlign: TextAlign.center,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">22</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211080933390.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>除了上面垂直的，我们通过设置 <code>scrollDirection</code> 属性，可以将其配置水平列表，和垂直列表类似，水平列表中直接加<code>Container</code>组件，高度是自适应的，配置了也没用，想要给水平列表一个高度，一般是在<code>ListView</code>外包裹一个<code>SizeBox</code>组件，给<code>SizeBox</code>组件设置高度来限制<code>ListView</code>的高度</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizedBox(</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">        child: ListView(</span><br><span class="line">          scrollDirection: Axis.horizontal,</span><br><span class="line">          children: [</span><br><span class="line">            Container(</span><br><span class="line">              width: <span class="number">200</span>, <span class="comment">// 水平列表的高度是自适应的，我们配置了也没用</span></span><br><span class="line">              decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.red),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              width: <span class="number">200</span>,</span><br><span class="line">              decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.yellow),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              width: <span class="number">200</span>,</span><br><span class="line">              decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.green),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h3><p>我们列表 <code>ListView</code> 组件的<code>children</code>属性需要的是一个 Widget 类型的List，所以我们动态生成这个list并传给<strong>ListView</strong>组件就好了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _initListData() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; list = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      list.add(ListTile(</span><br><span class="line">        title: Text(<span class="string">&quot;我是一个列表-<span class="subst">$i</span>&quot;</span>),</span><br><span class="line">      ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(children: _initListData());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面模拟从服务器拿到了数据并渲染成动态列表。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> listData=[&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>:<span class="string">&quot;yjr1100 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>:<span class="string">&quot;yjr-1100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageUrl&quot;</span>:<span class="string">&quot;https://www.itying.com/images/flutter/2.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>:<span class="string">&quot;yjr1100 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>:<span class="string">&quot;yjr-1100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageUrl&quot;</span>:<span class="string">&quot;https://www.itying.com/images/flutter/1.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _initListData() &#123;</span><br><span class="line">    <span class="keyword">var</span> tempList = listData.map((value)&#123;</span><br><span class="line">      <span class="keyword">return</span> ListTile(</span><br><span class="line">        leading: Image.network(<span class="string">&quot;<span class="subst">$&#123;value[<span class="string">&quot;imageUrl&quot;</span>]&#125;</span>&quot;</span>),</span><br><span class="line">        title: Text(<span class="string">&quot;<span class="subst">$&#123;value[<span class="string">&quot;title&quot;</span>]&#125;</span>&quot;</span>),</span><br><span class="line">        subtitle: Text(<span class="string">&quot;<span class="subst">$&#123;value[<span class="string">&quot;author&quot;</span>]&#125;</span>&quot;</span>),</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tempList.toList();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(children: _initListData());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用listview.builder 来生成列表和遍历数据</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; list = [];</span><br><span class="line">  MyHomePage(&#123;<span class="keyword">super</span>.key&#125;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(<span class="string">&quot;我是第<span class="subst">$i</span>条数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">        itemCount: list.length,</span><br><span class="line">        itemBuilder: (context, index) &#123;</span><br><span class="line">          <span class="keyword">return</span> ListTile(</span><br><span class="line">            title: Text(list[index]),</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> listData=[&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>:<span class="string">&quot;yjr1100 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>:<span class="string">&quot;yjr-1100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageUrl&quot;</span>:<span class="string">&quot;https://www.itying.com/images/flutter/2.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>:<span class="string">&quot;yjr1100 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>:<span class="string">&quot;yjr-1100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageUrl&quot;</span>:<span class="string">&quot;https://www.itying.com/images/flutter/1.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage2(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: listData.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          leading:Image.network(listData[i][<span class="string">&quot;imageUrl&quot;</span>]),</span><br><span class="line">          title: Text(listData[i][<span class="string">&quot;title&quot;</span>]),</span><br><span class="line">          subtitle: Text(listData[i][<span class="string">&quot;author&quot;</span>]),</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GridView-网格布局组件"><a href="#GridView-网格布局组件" class="headerlink" title="GridView 网格布局组件"></a>GridView 网格布局组件</h2><p>GridView创建网格列表主要有下面三种方式</p><ol><li><p>通过GridView.count 实现网格布局</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.count(</span><br><span class="line">        crossAxisCount: <span class="number">3</span>, <span class="comment">// 配置有多少个主轴</span></span><br><span class="line">        scrollDirection: Axis.horizontal, <span class="comment">// 可以改变主轴方向，默认竖着</span></span><br><span class="line">        children: <span class="keyword">const</span> [</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">        ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过GridView.extent 实现网格布局</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.extent(</span><br><span class="line">        maxCrossAxisExtent: <span class="number">360</span>, <span class="comment">//配置主轴垂直方向子元素的最大长度</span></span><br><span class="line">        scrollDirection: Axis.horizontal, <span class="comment">// 可以改变主轴方向，默认竖着</span></span><br><span class="line">        children: <span class="keyword">const</span> [</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.mail),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">          Icon(Icons.home),</span><br><span class="line">        ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>crossAxisSpacing</code> 非主轴子元素之间的距离<br><code>mainAxisSpacing</code> 主轴子元素之间的距离<br><code>padding</code> 四周的间距<br><code>childAspectRatio</code> 子元素宽高比</p></li><li><p>通过GridView.builder 实现动态网格布局<br><code>gridDelegate</code> 属性有两个可选值</p><ul><li><strong>SliverGridDelegateWithFixedCrossAxisCount()</strong> 这个实现 <strong>GridView.count</strong></li><li><strong>SliverGridDelegateWithMaxCrossAxisExtent()</strong> 这个实现 <strong>GridView.extent</strong></li></ul><p><code>itemBuilder</code> 属性值是一个方法需要两个参数 context和index 在这个方法内部构造子元素<br><code>itemCount</code> 子元素的个数，也就是上面那个方法循环执行的次数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GridView.builder(</span><br><span class="line">      <span class="comment">// scrollDirection: Axis.horizontal, // 可以改变主轴方向，默认竖着</span></span><br><span class="line">      itemCount: <span class="number">10</span>,</span><br><span class="line">      gridDelegate: <span class="keyword">const</span> SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">        crossAxisCount: <span class="number">2</span>, </span><br><span class="line">        crossAxisSpacing: <span class="number">10</span>,</span><br><span class="line">        mainAxisSpacing: <span class="number">5</span>,</span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">// gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(</span></span><br><span class="line">      <span class="comment">//   maxCrossAxisExtent: 130, //配置主轴垂直方向子元素的最大长度</span></span><br><span class="line">      <span class="comment">//   mainAxisSpacing: 10,</span></span><br><span class="line">      <span class="comment">//   crossAxisSpacing: 5,</span></span><br><span class="line">      <span class="comment">//   childAspectRatio: 0.9,</span></span><br><span class="line">      <span class="comment">//   mainAxisExtent: 350,</span></span><br><span class="line">      <span class="comment">// ),</span></span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          decoration: <span class="keyword">const</span> BoxDecoration(color: Colors.green),</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&quot;第<span class="subst">$index</span>个元素&quot;</span>,</span><br><span class="line">            style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 移动应用开发 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习（零）</title>
      <link href="/2022/11/05/Flutter%E5%AD%A6%E4%B9%A00/"/>
      <url>/2022/11/05/Flutter%E5%AD%A6%E4%B9%A00/</url>
      
        <content type="html"><![CDATA[<h1 id="Flutter简绍"><a href="#Flutter简绍" class="headerlink" title="Flutter简绍"></a>Flutter简绍</h1><p><a href="https://flutter.dev/">Flutter 官网</a>、<a href="https://pub.dev/">Flutter Packages官网</a></p><p>Flutter是谷歌公司开发的一款开源、免费的UI框架，可以让我们快速的在Android和iOS上构建高质量App。它最大的特点就是跨平台、以及高性能。目前Flutter已经支持iOS、Android、Web、Windows、macOS、Linux等。</p><p>Flutter基于谷歌的dart语言，如果没有任何Dart语言的基础，不建议直接学习Flutter。建议先学习Dart语言的基本语法。然后再进入Flutter的学习。</p><p>Flutter在2019年的时候就拥有了非常高的关注度。Flutter目前已经非常稳定，并且社区也非常完善了，应用市场中新发布的新应用有进一半是Flutter开发的应用。lutter3.x 以后不仅支持了Android los App的跨平台开发，还支持了Web、Windows、MacOs.、Liux桌面应用的跨平台开发。全球很多公司都已经在商业项目中使用Flutter,比如Google、微软、阿里、字节、百度、京东等。Flutter在Github Star数已经有150万了，在跨端框架中排名第一。据官方统计截止到2022年6月，已经有超过50万个商业应用程序是用Flutter建立的。Flutter是一个非常值得学习的框架，Flutter不仅具有跨平台、高性能等特点，还具有稳定性的特点，从2018年12月5日发布的Flutter1.0到后面的所有版本用法都是一样的。</p><h1 id="Windows上搭建Flutter-Android运行环境"><a href="#Windows上搭建Flutter-Android运行环境" class="headerlink" title="Windows上搭建Flutter Android运行环境"></a>Windows上搭建Flutter Android运行环境</h1><ol><li><p>安装java的jdk，配置环境变量<br>安装完成后，再命令行输入 <code>java -version</code> 可以看到对应的版本，其实java需要11以上的版本，这里是我之前的java版本，有点低了，可以直接装高版本的，也可以先保留着，后面报错再看怎么解决</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211050918442.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>下载 Android studio，在 Plugins 中下载 <code>Dart</code>和<code>Flutter</code>插件<br>Android studio 这个直接官网下载安装就好了，下载完后，进入软件下载插件，在红框处搜索需要的插件进行下载，下载完后要重新加载窗口</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051420069.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>下载<a href="https://docs.flutter.dev/development/tools/sdk/releases">Fluter SDK</a><br>下载完成后是一个压缩包，解压到想解压的位置，然后配置环境变量，吧flutter 的bin目录添加进环境变量</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211050957337.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>添加好后，我们在命令行输入 `flutter --version` 看到版本信息说明好了<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051002138.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>Flutter 配置国内镜像<br>这个主要是由于国内网络的原因，也可以不配配置，配置方法也很简单我们可以在<a href="https://docs.flutter.dev/community/china">官网文档</a>中看到，把下面两句加入到环境变量中。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUB_HOSTED_URL=https:<span class="comment">//pub.flutter-io.cn</span></span><br><span class="line">FLUTTER_STORAGE_BASE_URL=https:<span class="comment">//storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051357664.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在进行完上面的配置后，在命令行运行 <code>flutter doctor</code> 会检查开发flutter所需要的环境</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051417008.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>最后一个是网络问题，不影响我们开发，前面都是对勾，说明环境已经准备好了，可以开始创建flutter项目并进行开发了。</li></ol><h1 id="在Android-Studio中创建Flutter项目"><a href="#在Android-Studio中创建Flutter项目" class="headerlink" title="在Android Studio中创建Flutter项目"></a>在Android Studio中创建Flutter项目</h1><p>在安装了Flutter插件后，我们就可以看到下面这个按钮</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051425551.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择要创建的类型</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051434093.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这里注意我们Flutter SDK 的位置<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051434540.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>点击 finish 等一会就创建完成了<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051434211.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>点击运行，如果有下面的报错<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051622083.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>说明java版本过低，我们要用11以上的版本才可以，一种方案是把环境变量中 JAVA_HOME 修改为对应高版本的，如果电脑中有多个版本的java不想修改环境变量中的JAVA_HOME，我们可以直接改项目中的javahome.</p><p>首先，修改<code>android/gradle.properties</code>,添加<code>org.gradle.java.home</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051630387.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>其次，修改 <code>android/app/build.gradle</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051630559.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>然后再次点击运行<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051635603.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>我们也可以在命令行通过 <code>flutter run</code> 命令来运行项目，我们需要进入项目的目录，并且在电脑上使用虚拟机打开一个手机。通过 <code>flutter devices</code> 可以看我们可以使用的设备</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051646899.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051647608.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="在vscode中开发Flutter"><a href="#在vscode中开发Flutter" class="headerlink" title="在vscode中开发Flutter"></a>在vscode中开发Flutter</h1><p>在之前安装配置好flutter后，在vscode中安装flutter相关插件 <code>flutter</code> 和 <code>flutter widget snippets</code> 如果之前没有安装dart的，还需要安装一下 <code>dart</code> 插件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051706437.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051707504.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装好后，我们就可以在vscode中开发Flutter程序了，写完代码，在命令行进行运行就可以。</p><p>命令行运行后，我们可以看到还有一些按键操作提示，比如</p><p><code>r</code>: 热加载<br><code>R</code>: 热重启<br><code>p</code>：显示网格，这个可以很好的掌握布局情况<br><code>o</code>：切换android和ios预览模式<br><code>q</code>：退出调试预览模式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211051813722.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="mac电脑搭建Flutter-环境"><a href="#mac电脑搭建Flutter-环境" class="headerlink" title="mac电脑搭建Flutter 环境"></a>mac电脑搭建Flutter 环境</h1><p>由于没有mac，这一部分就放着吧，这里是<a href="https://www.bilibili.com/video/BV1S4411E7LY/?p=19&spm_id_from=pageDriver&vd_source=58f995c1059bf9697a4e739d00d40d66">bilibili视频教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动应用开发 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart语言学习</title>
      <link href="/2022/11/02/Dart%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A00/"/>
      <url>/2022/11/02/Dart%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A00/</url>
      
        <content type="html"><![CDATA[<h1 id="Dart介绍"><a href="#Dart介绍" class="headerlink" title="Dart介绍"></a>Dart介绍</h1><p>Dart是由谷歌开发的计算机编程语言，它可以被用于web、服务器、移动应用和物联网等领域的开发。</p><p>Dart诞生于2011年，号称要取代JavaScript。但是过去的几年中一直不温不火。直到Flutter的出现现在被人们重新重视</p><p>要学Flutter的话我们必须首先得会Dart.</p><p><a href="https://dart.dev/">官网</a></p><h1 id="Dart开发环境配置"><a href="#Dart开发环境配置" class="headerlink" title="Dart开发环境配置"></a>Dart开发环境配置</h1><h2 id="安装Dart"><a href="#安装Dart" class="headerlink" title="安装Dart"></a>安装Dart</h2><p>在使用Dart开发之前，首先要配置Dart开发环境，我们在<a href="https://dart.dev/">官网</a>可以找到在windows和mac上安装Dart SDK的方法，也可以在<a href="http://gekorm.com/dart-windows/">dart for windows</a> 中使用 <code>.exe</code> 文件进行安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021031172.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>下载后，双击执行，选择好安装位置后，一路next，安装程序会默认把dart添加进环境变量的，输入<code>dart --version</code> 出现下图表示安装成功</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021043657.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="vscode中配置开发Dart"><a href="#vscode中配置开发Dart" class="headerlink" title="vscode中配置开发Dart"></a>vscode中配置开发Dart</h2><ol><li><p>在 vscode 中安装dart插件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021046058.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在 vscode 中安装 code runner 来运行我们的代码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021048634.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>新建一个 <code>myfirst.dart</code> 文件，输入以下代码，运行</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;yjr1100 hahahha &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021056662.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202211021056059.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="Dart-学习"><a href="#Dart-学习" class="headerlink" title="Dart 学习"></a>Dart 学习</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>dart</code> 和 <code>C</code> 语言有点类似，每句话结束需要使用 ‘;’，注释也与 <code>C</code> 类似，使用 <code>//</code> <code>/**/</code> 来进行注释</p><h3 id="Dart-的入口方法"><a href="#Dart-的入口方法" class="headerlink" title="Dart 的入口方法"></a>Dart 的入口方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dart的入口方法</span></span><br><span class="line">main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;yjr1100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表示main方法没有返回值</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;yjr1100&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart-中的变量"><a href="#Dart-中的变量" class="headerlink" title="Dart 中的变量"></a>Dart 中的变量</h3><p>dart 是一个脚本类语言，可以不预先定义变量类型，自动会进行类型推断，这一点和 <code>javascript</code> 有点相似</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;this is var&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>也可以通过类型来申明变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str = <span class="string">&#x27;this is var&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>变量名称必须由数字、字母、下划线、美元符（$）组成</li><li>标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名字是区分大小写的</li><li>标识符一般要见名思意</li></ol><h4 id="Dart中的数据类型"><a href="#Dart中的数据类型" class="headerlink" title="Dart中的数据类型"></a>Dart中的数据类型</h4><ul><li><p>数值型：</p><ul><li>int</li><li>double</li></ul></li><li><p>字符串：</p><ul><li><p>String</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> str1 = <span class="string">&#x27;sdfsdf&#x27;</span>;</span><br><span class="line"><span class="built_in">String</span> str2 = <span class="string">&quot;sfsdfsf&quot;</span>;</span><br><span class="line"><span class="comment">// 可以用三个单引号来定义多行字符串</span></span><br><span class="line"><span class="built_in">String</span> str3 = <span class="string">&#x27;&#x27;&#x27;sdfsdfssdf</span></span><br><span class="line"><span class="string">sdfsdfsdf</span></span><br><span class="line"><span class="string">sdfsdf</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;yjr&quot;;</span><br><span class="line">String str2 = &quot;1100&quot;;</span><br><span class="line">print(&quot;$str1$str2&quot;);</span><br><span class="line">print(str1 + str2);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>布尔:</p><ul><li>bool<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="built_in">bool</span> flag2 = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>List:</p><ul><li>在Dart中，数组是列表对象，所以大多数人只称它们为列表<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义List</span></span><br><span class="line"><span class="keyword">var</span> list1 = [<span class="string">&quot;sdf&quot;</span>,<span class="number">123</span>,<span class="keyword">true</span>];</span><br><span class="line"><span class="built_in">print</span>(list1);</span><br><span class="line"><span class="comment">//获取集合的长度</span></span><br><span class="line"><span class="built_in">print</span>(list1.length)</span><br><span class="line"><span class="comment">// 通过索引可以获取数据</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指定类型的 List</span></span><br><span class="line"><span class="keyword">var</span> list2 = &lt;<span class="built_in">String</span>&gt;[<span class="string">&quot;sdf&quot;</span>,<span class="string">&quot;kkk&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> list3 = &lt;<span class="built_in">int</span>&gt;[<span class="number">12</span>,<span class="number">34</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义空的 List,动态的向其中添加数据</span></span><br><span class="line"><span class="keyword">var</span> list4 = [];</span><br><span class="line">list4.add(<span class="string">&quot;sdf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老版本的Dart还可以通过new的方式来创建list,不过新版本已经不用了</span></span><br><span class="line"><span class="keyword">var</span> list5 = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个固定长度的集合，不可增加数据，但是可以修改里面的数据，不可以修改长度</span></span><br><span class="line"><span class="keyword">var</span> list6 = <span class="built_in">List</span>.filled(<span class="number">3</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> list6 = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.filled(<span class="number">3</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了使用var，还可以用List 来声明数据类型</span></span><br><span class="line"><span class="built_in">List</span> list7 = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// List 常用属性</span></span><br><span class="line">  <span class="built_in">print</span>(list7.length); <span class="comment">// 返回list长度</span></span><br><span class="line">  <span class="built_in">print</span>(list7.reversed); <span class="comment">// 翻转list，返回的不是list，用 toList()方法来转成list</span></span><br><span class="line">  <span class="built_in">print</span>(list7.isEmpty); <span class="comment">// 判断list是否为空</span></span><br><span class="line">  <span class="built_in">print</span>(list7.isNotEmpty); <span class="comment">// 判断list是否非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List 常用方法</span></span><br><span class="line">  list7.add(<span class="number">55</span>); <span class="comment">//增加一个数据</span></span><br><span class="line">  list7.addAll([<span class="number">12</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">99</span>]); <span class="comment">//一次增加多个数据</span></span><br><span class="line">  list7.indexOf(<span class="number">12</span>); <span class="comment">//查找索引，如果查不到返回-1,否则返回找到的第一个索引位置</span></span><br><span class="line">  list7.remove(<span class="number">34</span>); <span class="comment">// 删除 34 这个值,如果有多个，删除前面的</span></span><br><span class="line">  list7.removeAt(<span class="number">0</span>); <span class="comment">// 删除0号位置的元素</span></span><br><span class="line">  list7.fillRange(<span class="number">1</span>,<span class="number">2</span>,<span class="number">888</span>); <span class="comment">// 修改位置1开始到位置2（不包括位置2）的元素值为888</span></span><br><span class="line">  list7.insert(<span class="number">1</span>,<span class="number">777</span>); <span class="comment">// 在1号位置之前插入777 这个值</span></span><br><span class="line">  list7.insertAll(<span class="number">1</span>,[<span class="number">333</span>,<span class="number">4444</span>]); <span class="comment">// 一次插入多个值</span></span><br><span class="line">  <span class="keyword">var</span> str = list7.join(<span class="string">&quot;,&quot;</span>);<span class="comment">// 把list转为字符串，用逗号分隔</span></span><br><span class="line">  str.split(<span class="string">&quot;,&quot;</span>); <span class="comment">//把字符串转为list，用逗号切割</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Set:<br>和list差不多，就是不能有重复的数据,下面主要看一下怎么定义一个<code>set</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set1 = &#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(set1); <span class="comment">// 重复的数据没有</span></span><br><span class="line"><span class="keyword">var</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set2.add(<span class="number">34</span>);</span><br><span class="line">set2.addAll([<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">34</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Map:<br>通常来说，<code>Map</code>是一个键值对相关的对象，键和值可以是任何类型的对象，每个键</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Map</span></span><br><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;yjr1100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方法定义一个Map</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">p[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;yjr1100&quot;</span>;</span><br><span class="line">p[<span class="string">&quot;age&quot;</span>] = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map的常用属性</span></span><br><span class="line"><span class="built_in">print</span>(person.keys); <span class="comment">// 获取所有的key</span></span><br><span class="line"><span class="built_in">print</span>(person.values);<span class="comment">// 获取所有的 value</span></span><br><span class="line"><span class="built_in">print</span>(person.isEmpty); <span class="comment">// 判空</span></span><br><span class="line"><span class="built_in">print</span>(person.isNotEmpty); <span class="comment">// 判非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map的常用方法</span></span><br><span class="line">person.addAll(&#123;</span><br><span class="line">  <span class="string">&quot;work&quot;</span>:<span class="string">&quot;打代码&quot;</span>，</span><br><span class="line">  <span class="string">&quot;height&quot;</span>:<span class="number">100</span></span><br><span class="line">&#125;); <span class="comment">// 添加键值对</span></span><br><span class="line"></span><br><span class="line">person.remove(<span class="string">&quot;work&quot;</span>); <span class="comment">//删除属性</span></span><br><span class="line"></span><br><span class="line">person.containsValue(<span class="string">&quot;yjr1100&quot;</span>); <span class="comment">// 看所有值中有没有 “yjr1100” 这个value</span></span><br><span class="line">person.containsKey(<span class="string">&quot;name&quot;</span>); <span class="comment">// 看看所有的key中有没有 name这个key</span></span><br></pre></td></tr></table></figure></li><li><p>List Map 和 Set 的遍历<br>下面用list做演示，其它几种用法类似</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list1 = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">87</span>,<span class="number">24343</span>,<span class="number">34</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;list1.length;i++)&#123;</span><br><span class="line">  <span class="built_in">print</span>(list[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> list1)&#123;</span><br><span class="line">  <span class="built_in">print</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list1.forEach((value)&#123;</span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newlist = list1.map((value)=&gt;value*<span class="number">2</span>);<span class="comment">// 可以用来修改每个值</span></span><br><span class="line"><span class="keyword">var</span> newlist2 = list1.where((value) =&gt; value&gt;<span class="number">20</span>); <span class="comment">// 把满足条件的元素组成新的list返回</span></span><br><span class="line"><span class="keyword">var</span> f = list1.any((value) =&gt; value&gt;<span class="number">30</span>); <span class="comment">// 只要集合里有一个满足条件，就返回true</span></span><br><span class="line"><span class="keyword">var</span> f2 = list1.every((value) =&gt; value&gt;<span class="number">30</span>); <span class="comment">// 只要集合里元素都条件，就返回true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="类型的判断"><a href="#类型的判断" class="headerlink" title="类型的判断"></a>类型的判断</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">String</span>)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;是 String 类型&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str <span class="keyword">is</span> <span class="built_in">int</span>)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;是 int 类型&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a>类型的转换</h4><ul><li><p>Number 和 String 类型之间的转换</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number转String toString();</span></span><br><span class="line"><span class="keyword">var</span> myNum = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = myNum.toString();</span><br><span class="line"><span class="comment">// String转Number parse;</span></span><br><span class="line"><span class="built_in">String</span> str=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> mynum = <span class="built_in">int</span>.parse(str);</span><br></pre></td></tr></table></figure></li><li><p>其它类型和boolean类型的转换</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">str.isEmpty</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myNum = <span class="number">0</span>;</span><br><span class="line">myNum==<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line">b.isNaN</span><br></pre></td></tr></table></figure></li></ul><h4 id="final-和-const修饰符"><a href="#final-和-const修饰符" class="headerlink" title="final 和 const修饰符"></a>final 和 const修饰符</h4><p><strong>const</strong> 值不变，开始就要赋值</p><p><strong>final</strong> 可以开始不赋值，只能赋值一次</p><p><strong>final</strong> 和 <strong>const</strong>的主要<strong>区别</strong>：final不仅有const编译时常量的特性，最重要的是它是运行时常量，是惰性初始化，即在运行时第一次使用前才初始化</p><h3 id="Dart-中的运算符"><a href="#Dart-中的运算符" class="headerlink" title="Dart 中的运算符"></a>Dart 中的运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+</code> 、<code>-</code> 、 <code>*</code> 、<code>/</code> 、 <code>~/</code>(取整)、<code>%</code>（取余）、<code>++</code>、<code>--</code></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><code>==</code>、 <code>!=</code>、 <code>&gt;</code>、 <code>&lt;</code>、 <code>&gt;=</code>、 <code>&lt;=</code></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>!</code>、 <code>&amp;&amp;</code>、 <code>||</code></p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li><p>基础赋值运算符 <code>=</code>、 <code>??=</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> b = <span class="number">10</span>;</span><br><span class="line">b??=<span class="number">23</span>; <span class="comment">//b是空的时候，把23赋值给b</span></span><br><span class="line"><span class="built_in">print</span>(b);</span><br><span class="line"><span class="keyword">var</span> c;</span><br><span class="line">c??=<span class="number">99</span>; <span class="comment">//如果c是空的时候，把99赋给c</span></span><br><span class="line"><span class="built_in">print</span>(c);</span><br></pre></td></tr></table></figure></li><li><p>复合赋值运算符 <code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>~/=</code></p></li></ul><h3 id="Dart-中的流程控制"><a href="#Dart-中的流程控制" class="headerlink" title="Dart 中的流程控制"></a>Dart 中的流程控制</h3><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><ul><li>if-else</li><li>switch-case<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span>(sex)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;男&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是男的&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;女&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是女的&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;都不是&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>三目运算符</li><li>??运算符<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a ?? <span class="number">10</span>;</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">//如果a是空的时候，把 10 赋值给b</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>和<code>c++</code> 相同</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">  <span class="built_in">print</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="built_in">print</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><p><strong>break</strong>语句功能：</p><ul><li>在switch语句中使流程跳出switch结构。</li><li>在循环语句中使流程跳出当前循环，遇到break循环终止，后面代码也不会执行</li></ul><p><strong>强调：</strong></p><ol><li>如果在循环中已经执行了break语句，就不会执行循环体中位于break后的语句。</li><li>在多层循环中，一个break语句只能向外跳出一层</li></ol><p><strong>break可以用在switch case中也可以用在for循环和while循环中</strong></p><p><strong>continue</strong>语句的功能：</p><ul><li>只能在循环语句中使用，使本次循环结束，即跳过循环体重下面尚未执行的语句，接着进行下次循环，continue可以用在for循环以及while循环中，但是不建议用在whi1e循环中，不小心容易死循环</li></ul><h2 id="Dart-中的函数"><a href="#Dart-中的函数" class="headerlink" title="Dart 中的函数"></a>Dart 中的函数</h2><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><p>这里和<code>C++</code> 语言类似，代码如下。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本格式</span></span><br><span class="line"><span class="built_in">int</span> addab(<span class="built_in">int</span> a,<span class="built_in">int</span> b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义带有可选参数的方法</span></span><br><span class="line"><span class="keyword">void</span> printUserInfo(<span class="built_in">String</span> name,[<span class="keyword">var</span> age,<span class="keyword">var</span> sex])&#123;</span><br><span class="line">  <span class="keyword">if</span>(age !=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>----年龄<span class="subst">$age</span>&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>-----年龄保密&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义带有默认参数的方法</span></span><br><span class="line"><span class="keyword">void</span> printUserInfo2(<span class="built_in">String</span> name,[<span class="keyword">var</span> sex=<span class="string">&#x27;女&#x27;</span>,<span class="keyword">var</span> age = <span class="number">10</span>])&#123;</span><br><span class="line">  <span class="keyword">if</span>(age !=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>----年龄<span class="subst">$age</span>&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>-----年龄保密&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个命名参数的方法，就是使用的时候，传参要指定形参名称</span></span><br><span class="line"><span class="keyword">void</span> printUserInfo3(<span class="built_in">String</span> name,&#123;<span class="keyword">var</span> sex=<span class="string">&#x27;女&#x27;</span>,<span class="keyword">var</span> age&#125;)&#123;</span><br><span class="line">  <span class="keyword">if</span>(age !=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>----年龄<span class="subst">$age</span>&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;姓名<span class="subst">$name</span>-----年龄保密&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">printUserInfo3(<span class="string">&quot;yjr1100&quot;</span>,age:<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个传入方法做参数的方法</span></span><br><span class="line"><span class="keyword">void</span> fn1()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;fn1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> fn2(<span class="keyword">var</span> fn)&#123;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">fn2(fn1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数里的代码就只有一行</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">list1.forEach((value)&#123;</span><br><span class="line">  <span class="built_in">print</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">list1.forEach((value)=&gt;<span class="built_in">print</span>(value));</span><br><span class="line"></span><br><span class="line">list1.forEach((value)=&gt;&#123;</span><br><span class="line">  <span class="built_in">print</span>(value)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>就是没有名字的函数，一般来说就是临时用的时候写一下,在下面的代码中，括号就是用来传参的参数列表，后面是函数体，我们将这个没有名字的函数赋值给了printNum，就可以通过printNum来调用它；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNum = (<span class="built_in">int</span> n)&#123;</span><br><span class="line">  <span class="built_in">print</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printNum(<span class="number">12</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于匿名方法，我们有自动执行的方式，就是不需要显示的调用，直接让它自己自动执行,并且也可以传入参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">((n)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;自己执行了&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(n);</span><br><span class="line">&#125;)(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h3 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h3><ol><li>全局变量：全局变量常驻内存、全局变量污染全局</li><li>局部变量：不常驻内存，会被垃圾回收机制回收，不会污染全局</li></ol><p>引入闭包：</p><ul><li>常驻内存</li><li>不污染全局</li></ul><p>闭包粗浅的理解就是函数内部嵌套函数，内部函数会调用外部函数的变量或参数，变量或参数不会被系统回收</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fn()&#123;</span><br><span class="line">  <span class="built_in">int</span> a = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">return</span> ()&#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=fn();</span><br><span class="line">b();</span><br><span class="line">b();</span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = fn();</span><br><span class="line">c();</span><br><span class="line">c();</span><br><span class="line">c();</span><br></pre></td></tr></table></figure><h2 id="Dart-中的类"><a href="#Dart-中的类" class="headerlink" title="Dart 中的类"></a>Dart 中的类</h2><p><strong>面向对象编程(O0P)的三个基本特征是：封装、继承、多态</strong></p><p><strong>封装</strong>：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其它函数使用。</p><p><strong>继承</strong>：面向对象编程(O0P)语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并有它父类的功能。</p><p><strong>多态</strong>：允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果。</p><p>Dart所有的东西都是对象，所有的对象都继承自Object类。</p><p>Dart是一门使用<strong>类</strong>和<strong>单继承</strong>的面向对象语言，所有的对象都是类的实例，并且所有的类都是Object的子类</p><p>一个类通常由<strong>属性</strong>和<strong>方法</strong>组成。</p><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义属性</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">// 默认构造函数</span></span><br><span class="line">  Person()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 命名构造函数</span></span><br><span class="line">  Person.now()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;命名构造函数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="keyword">void</span> getInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p1.name);</span><br><span class="line">p1.getInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般我们单独把类写在一个文件中，使用import关键字来引入</span></span><br></pre></td></tr></table></figure><p>dart没有像 <code>C++</code> 那样使用 public，private，protected 等修饰符来限制类属性的访问权限，如果我们想要把一个方法或者属性定义为私有，需要在定义时名字前面 加上 <code>_</code> ，而且私有方法和私有属性必须单独放在一个文件中。</p><h3 id="dart中的getter，setter"><a href="#dart中的getter，setter" class="headerlink" title="dart中的getter，setter"></a>dart中的getter，setter</h3><p>在dart中通过 <code>get</code> 可以让一个方法像类属性那样直接使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">int</span> height;</span><br><span class="line">  <span class="built_in">int</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height,<span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height*<span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> areaHeight(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.height=value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rect r = <span class="keyword">new</span> Rect(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;面积<span class="subst">$&#123;r.area&#125;</span>&quot;</span>);</span><br><span class="line">r.areaHeight=<span class="number">6</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;面积<span class="subst">$&#123;r.area&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Dart中的静态成员"><a href="#Dart中的静态成员" class="headerlink" title="Dart中的静态成员"></a>Dart中的静态成员</h3><p>可以通过 <code>static</code> 关键字来实现类级别的变量和函数，即不需要实例化对象，就可以使用</p><p>静态方法不能访问非静态成员，静态方法可以访问静态成员,非静态方法可以访问静态成员以及非静态成员。在类里，我们一般使用this访问非静态属性，而直接用属性名访问静态属性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>()&#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart中的对象操作符"><a href="#Dart中的对象操作符" class="headerlink" title="Dart中的对象操作符"></a>Dart中的对象操作符</h3><p><code>?</code> 条件运算符<br><code>as</code> 类型转换<br><code>is</code> 类型判断<br><code>..</code> 级联操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Person p;</span><br><span class="line"><span class="comment">// p.printInfo()// 报错，p没有初始化，是空的</span></span><br><span class="line">p?.printInfo(); <span class="comment">// 什么都不会打印，只有p不是空的时候，才会打印</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p <span class="keyword">is</span> Person); <span class="comment">// 判断p是不是Person类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1;</span><br><span class="line">p1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">p1 = <span class="keyword">new</span> Person();</span><br><span class="line">(p1 <span class="keyword">as</span> Person).printInfo();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">&quot;sdlf&quot;</span>;</span><br><span class="line">p1.age = <span class="number">12</span>;</span><br><span class="line">p1.printInfo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用级联方式</span></span><br><span class="line">p1..name=<span class="string">&quot;lala&quot;</span></span><br><span class="line">  ..age = <span class="number">12</span></span><br><span class="line">  ..printInfo();</span><br></pre></td></tr></table></figure><h3 id="Dar类的继承"><a href="#Dar类的继承" class="headerlink" title="Dar类的继承"></a>Dar类的继承</h3><p>子类使用 <code>extends</code> 关键字来继承父类<br>子类会继承父类里面可见的属性和方 但不会继承构造函数<br>子类能复写父类的方法 getter 和 setter</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> myname;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  Person(<span class="built_in">String</span> myname,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.myname=myname;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.myname&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.myname&#125;</span>在工作&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Son(<span class="built_in">String</span> myname,<span class="built_in">int</span> age,<span class="built_in">String</span> sex):<span class="keyword">super</span>(myname,age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">super</span>.work(); <span class="comment">// 在自类调用父类的方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.myname&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>-----<span class="subst">$&#123;<span class="keyword">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复写父类方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son s1 = <span class="keyword">new</span> Son(<span class="string">&quot;sdf&quot;</span>,<span class="number">324</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">s1.printInfo();</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>Dart中抽象类：Dart抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。</p><ol><li>抽象类通过<code>abstract</code>关键字来定义</li><li>Dart中的抽象方法不能用<code>abstract</code>声明，Dart中没有方法体的方法我们称为抽象方法。</li><li>如果子类继承抽象类必须得实现里面的抽象方法</li><li>抽象类不能被实例化，只有继承它的子类可以</li><li>如果把抽象类当做<strong>接口</strong>实现的话必须得<strong>实现抽象类里面定义的所有属性和方法。</strong></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  eat();<span class="comment">//抽象方法</span></span><br><span class="line">  printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是抽象类的普通方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat()&#123; <span class="comment">//实现抽象方法</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat()&#123; <span class="comment">//实现抽象方法</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart中的接口"><a href="#Dart中的接口" class="headerlink" title="Dart中的接口"></a>Dart中的接口</h3><p>和Java一样，dart也有接口，但是和Java还是有区别的。</p><p>首先，dart的接口没有<code>interface</code>关键产定义接口，而是<strong>普通类</strong>或<strong>抽象类</strong>都可以作为接口被实现。<strong>建议使用抽象类定义接口</strong>，实现接口，必须重写抽象类中的所有属性和方法。</p><p>使用<code>implements</code>:关键字进行接口实现。</p><p><code>extends</code>抽象类和<code>implements</code>的区别：</p><ol><li>如果要复用抽象类里面的其它普通方法，并且要用抽象方法约束子类的话我们就用extends继承抽象类</li><li>如果只是把抽象类当做标准的话我们就用implements:实现抽象类</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;<span class="comment">//当做接口接口：就是约定、规范</span></span><br><span class="line">  <span class="built_in">String</span> uri;</span><br><span class="line">  <span class="comment">//数据库的链接地址</span></span><br><span class="line">  add();</span><br><span class="line">  save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123; <span class="comment">//实现接口，必须重写抽象类中的所有属性和方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> uri</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  save()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart中可以一个类实现多个接口，我们需要实现所有接口中的所有属性和方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  printA();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  printB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printA()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printB()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart中的mixins"><a href="#Dart中的mixins" class="headerlink" title="Dart中的mixins"></a>Dart中的mixins</h3><p>mixins的中文意思是混入，就是在类中混入其他功能。在Dart中可以使用mixins实现<strong>类似</strong>多继承的功能</p><p>因为mixins使用的条件，随着Dart版本一直在变，这里讲的是Dart2.x中使用mixins的条件：</p><ol><li>作为mixins的类只能继承自object,不能继承其他类</li><li>作为mixins的类不能有构造函数</li><li>一个类可以mixins多个mixins类</li><li>mixins绝不是继承，也不是接口，而是一种全新的特性</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printA()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printB()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">with</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.printA();</span><br><span class="line">c.printB();</span><br></pre></td></tr></table></figure><h3 id="Dart中的多态"><a href="#Dart中的多态" class="headerlink" title="Dart中的多态"></a>Dart中的多态</h3><p>允许将子类类型的指针赋值给父类类型的指针，同一个函数调用会有不同的执行效果</p><p>子类的实例赋值给父类的引用。</p><p>多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  eat();<span class="comment">//抽象方法</span></span><br><span class="line">  printInfo()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是抽象类的普通方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat()&#123; <span class="comment">//实现抽象方法</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.eat();</span><br><span class="line"><span class="comment">// d.run();// 此时，没有run方法，因为这个把子类的指针赋值给了父类。</span></span><br></pre></td></tr></table></figure><h3 id="Dart中的泛型"><a href="#Dart中的泛型" class="headerlink" title="Dart中的泛型"></a>Dart中的泛型</h3><p>泛型就是解决类、接口方法的复用性、以及对不特定数据类型的支持（类型校验）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">T getData&lt;T&gt;(T value)&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决了代码复用问题的同时，进行了数据类型校验</span></span><br><span class="line">gerData&lt;<span class="built_in">String</span>&gt;(<span class="string">&quot;sdf&quot;</span>); </span><br><span class="line">gerData&lt;<span class="built_in">int</span>&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list=&lt;T&gt;[];</span><br><span class="line">  <span class="keyword">void</span> add(T value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.list.add(value);</span><br><span class="line">  <span class="built_in">List</span> getList()&#123;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyList l1 = <span class="keyword">new</span> MyList();</span><br><span class="line">l1.add(<span class="number">12</span>);</span><br><span class="line">l1.add(<span class="string">&quot;sdf&quot;</span>);</span><br><span class="line">l1.add(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">MyList l2 = <span class="keyword">new</span> MyList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">l2.add(<span class="string">&quot;sdfsd&quot;</span>); <span class="comment">// 这个时候就只能传入String类型的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和泛型类相同，我们也可以定义泛型接口</span></span><br></pre></td></tr></table></figure><h2 id="Dart-中的库"><a href="#Dart-中的库" class="headerlink" title="Dart 中的库"></a>Dart 中的库</h2><p>Dart中的库主要有三种：</p><ol><li><p>我们自定义的库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/xxx.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>系统内置库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>Pub包管理系统中的库<br>在下面的网站中，我们就可以找到一些第三方库进行下载<br><a href="https://pub.dev/packages">https://pub.dev/packages</a><br><a href="https://pub.flutter-io.cn/packages">https://pub.flutter-io.cn/packages</a><br><a href="https://pub.dartlang.org/flutter/">https://pub.dartlang.org/flutter/</a></p></li></ol><p>  使用时：</p><ol><li>需要在自己项目根目录新建一个<code>pubspec.yam1</code></li><li>在<code>pubspec.yaml</code>文件然后配置名称、描述、依赖等信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">name:XXX</span></span><br><span class="line"><span class="string">description:A</span> <span class="string">new</span> <span class="string">flutter</span> <span class="string">module</span> <span class="string">project.</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">http:^8.12.0+2</span></span><br></pre></td></tr></table></figure></li><li>然后在项目目录中运行pub get获取包下载到本地</li><li>项目中引入库<code>import&#39;package:http/http.dart&#39;as http;</code>看文档使用</li></ol><p>如果有库冲突，我们可以使用 <code>as</code> 来重命名库，通过 <code>show</code> 关键字，可以进行库的部分引入，即只引入我们需要的部分。通过<code>hide</code> 关键字，可以隐藏库中的某些部分，而引入其它部分。</p><h2 id="Dart-2-13-以后的一些新特性"><a href="#Dart-2-13-以后的一些新特性" class="headerlink" title="Dart 2.13 以后的一些新特性"></a>Dart 2.13 以后的一些新特性</h2><h3 id="Null-safety"><a href="#Null-safety" class="headerlink" title="Null safety"></a>Null safety</h3><p>空安全，可以帮助开发者避免一些日常开发中很难被发现的错误，并且额外的好处是可以改善性能</p><p>Flutter2.2.0（2021.5.19发布）以后的版本都要求使用 Null Safety</p><ul><li><code>?</code> 使用问号，表示可空类型<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int a = 12;</span></span><br><span class="line"><span class="comment">// a = null; 不可以赋值为null，报错</span></span><br><span class="line"><span class="built_in">int?</span> a = <span class="number">12</span>;</span><br><span class="line">a = <span class="keyword">null</span>; <span class="comment">//可以 ，int? 表示 a 可以是空类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String?</span> getDate(url)&#123;</span><br><span class="line">  <span class="keyword">if</span>(url==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>!</code> 类型断言<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String?</span> str=<span class="string">&quot;sdfsdfsdf&quot;</span>;</span><br><span class="line">str = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//print(str.length);// 报错，因为str是可空类型，我们需要进行类型断言</span></span><br><span class="line"><span class="built_in">print</span>(str!.length) <span class="comment">//类型断言，如果不等于null，打印长度，如果是null，抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="required-关键词"><a href="#required-关键词" class="headerlink" title="required 关键词"></a>required 关键词</h3></li></ul><p>最开始 <code>@required</code> 是注释，现在它已经作为内置修饰符，主要用于标记命名参数，使得他们不为空。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">String</span> printuserInfo(<span class="built_in">String</span> username, &#123;<span class="built_in">int</span> age = <span class="number">10</span>, <span class="built_in">String</span> sex = <span class="string">&quot;&quot;</span>&#125;) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;姓名：<span class="subst">$username</span>--性别：<span class="subst">$sex</span>--年龄：<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有赋初值的命名参数，需要用required来修饰，表示使用时必须传入该参数，不然会报错</span></span><br><span class="line"><span class="built_in">String</span> printInfo(<span class="built_in">String</span> username, &#123;<span class="keyword">required</span> <span class="built_in">int</span> age, <span class="keyword">required</span> <span class="built_in">String</span> sex&#125;) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;姓名：<span class="subst">$username</span>--性别：<span class="subst">$sex</span>-年龄：<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-和final补充"><a href="#const-和final补充" class="headerlink" title="const 和final补充"></a>const 和final补充</h2><h3 id="core库中-identical-函数的用法"><a href="#core库中-identical-函数的用法" class="headerlink" title="core库中 identical 函数的用法"></a>core库中 identical 函数的用法</h3><p>通过 <code>identical</code> 函数，可以检查两个引用是否指向同一个对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o2 =  <span class="built_in">Object</span>(); <span class="comment">// 可以省略new</span></span><br><span class="line"><span class="built_in">print</span>(identical(o1,o2)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">print</span>(identical(o1,o1)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用const表示初始化常量构造函数,想要使用 const来实例化常量构造函数，首先这个构造函数定义的时候，就必须是常量构造函数</span></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="keyword">const</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o4 = <span class="keyword">const</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// o3,o4 共享了存储空间</span></span><br><span class="line"><span class="built_in">print</span>(identical(o3,o4)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">print</span>(identical(o3,o3)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 说明const关键词再多个地方创建相同对象的时候，内存中只保留了一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a=[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> b=[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">print</span>(identical(a,b));<span class="comment">//true</span></span><br><span class="line"><span class="keyword">const</span> c=[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> d=[<span class="number">3</span>]; <span class="comment">// 必须是相同对象，才会指向同一个空间</span></span><br><span class="line"><span class="built_in">print</span>(identical(c,d));<span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常量构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> width;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> height;</span><br><span class="line">  <span class="keyword">const</span> Container(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.width,<span class="keyword">required</span> <span class="keyword">this</span>.height&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1=Container(width:<span class="number">100</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> c2=Container(width:<span class="number">100</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(identical(c1,c2));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用const后才说明是要用常量构造函数了。</span></span><br><span class="line"><span class="keyword">var</span> c3=<span class="keyword">const</span> Container(width:<span class="number">100</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> c4=<span class="keyword">const</span> Container(width:<span class="number">100</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(identical(c3,c4));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量构造函数传入的值相同才会只保留一个，否则还是分开的。</span></span><br><span class="line"><span class="keyword">var</span> c5=<span class="keyword">const</span> Container(width:<span class="number">100</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> c6=<span class="keyword">const</span> Container(width:<span class="number">120</span>,height:<span class="number">100</span>);</span><br><span class="line"><span class="built_in">print</span>(identical(c5,c6));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>常量构造函数总结如下几点：</p><ol><li>常量构造函数需以<code>const</code>关键字修怖</li><li>const构造函数必须用于成员变量都是<code>final</code>的类</li><li>如果实例化时不加cost修饰符，即使调用的是常量构造函数，实例化的对象也不是常量实例</li><li>实例化常量构造函数的时候，多个地方创建这个对象，如果传入的值相同，只会保留一个对象</li><li><strong>Flutter</strong>中<code>const</code>修饰不仅仅是节省组件构建时的内存开销，<strong>Flutter</strong>在需要重新构建组的时候，不构建<code>const</code>声明的组件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 移动应用开发 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试环境搭建</title>
      <link href="/2022/09/30/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/30/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="基于LANMP构建PHP测试环境"><a href="#基于LANMP构建PHP测试环境" class="headerlink" title="基于LANMP构建PHP测试环境"></a>基于LANMP构建PHP测试环境</h1><h2 id="LANMP简介"><a href="#LANMP简介" class="headerlink" title="LANMP简介"></a>LANMP简介</h2><p>LAMP即“Linux+Apache+MySQL+PHP”的简称，它是一个软件堆栈，这意味着在操作系统(Linux)上安装Apache、MySQL和PHP</p><p>LANMP是WDLinux官网2010年底开始推出的Web应用环境的快速简易一键安装包，用Shell脚本编写，且是开源的；执行一个脚本，整个环境安装完成就可使用，具有快速、方便易用、安全稳定的特点；用户也可以根据业务需求做相应的调整，安装自己所需要的环境</p><p>LANMP,即”Linux+Apache+Nginx+MySQL+PHP”的简称，同时会默认安装Zend、eAccelerator、.PureFTPd等相应加速、优化、FTP类软件</p><h2 id="LANMP安装"><a href="#LANMP安装" class="headerlink" title="LANMP安装"></a>LANMP安装</h2><p>环境准备：CentOS7</p><p>安装流程：</p><ol><li><p>下载LANMP一键安装包,致性下面代码下载和解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.wdlinux.cn/files/lanmp_v3.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf lanmp_v3.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>自动安装MySQL、Apache、Nginx、PHP等组件<br>执行下面的代码，进行安装，如下图，选择<code>3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh lanmp.sh</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301625562.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>出现下图表示安装成功<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301635125.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="LANMP配置"><a href="#LANMP配置" class="headerlink" title="LANMP配置"></a>LANMP配置</h2><h3 id="设置Apache网站的根目录和默认服务端口"><a href="#设置Apache网站的根目录和默认服务端口" class="headerlink" title="设置Apache网站的根目录和默认服务端口"></a>设置Apache网站的根目录和默认服务端口</h3><ol><li><p>找到Apache配置文件<code>httpd.conf</code>的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name httpd.conf</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>httpd.conf</code>文件，设置端口号为 <code>81</code>,并且设置根目录为 <code>/www/wdlinux/httpd-2.4.41/htdocs</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301635472.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301637440.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>编辑<code>httpd.conf</code>文件,设置访问权限为所有人</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301642320.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>保存后利用下面命令重启Apache服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /www/wdlinux/httpd-2.4.41/bin</span><br><span class="line">./apachectl restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置Mysql数据库root账号密码"><a href="#设置Mysql数据库root账号密码" class="headerlink" title="设置Mysql数据库root账号密码"></a>设置Mysql数据库root账号密码</h3><ol><li>找到Mysql配置文件my.cnf的位置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name my.cnf</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301901060.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li>修改my.cnf文件，增加<code>skip-grant-tables</code> ，取消密码验证，实现无密码登录<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301902956.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li>重启mysql服务,直接无密码登录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br><span class="line">cd /www/wdlinux/mysql-5.5.62/bin</span><br><span class="line">mysql -h127.0.0.1 -uroot </span><br></pre></td></tr></table></figure></li><li>设置密码<br>5.7以前的版本执行下面的命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set password=password(&quot;root&quot;) where user=&quot;root&quot;;</span><br></pre></td></tr></table></figure>5.7以后的版本执行下面的命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&quot;root&quot;) where user=&quot;root&quot;;</span><br></pre></td></tr></table></figure>设置完后输入 <code>exit</code> 退出mysql</li><li>删除之前在my.cnf中添加的那一行，然后重新使用密码登录mysql</li></ol><h1 id="基于WAMP构建PHP测试环境"><a href="#基于WAMP构建PHP测试环境" class="headerlink" title="基于WAMP构建PHP测试环境"></a>基于WAMP构建PHP测试环境</h1><h2 id="WAMP简介"><a href="#WAMP简介" class="headerlink" title="WAMP简介"></a>WAMP简介</h2><p>WAMP即”windows+Apache+MySQL+PHP”的简称，它是一个软件堆栈，这意味着在操作系统(Windows)上安装Apache、MySQL和PHP。</p><p>WAMP源自LAMP(L代表Linux),两者之间的唯一区别是WAMP用windows操作系统，而LAMP用于基于Linux操作系统。</p><h2 id="WAMP安装"><a href="#WAMP安装" class="headerlink" title="WAMP安装"></a>WAMP安装</h2><p>环境准备：windows7,WAMPServer3安装包，微软常用运行库合集</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301909746.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>安装微软常用运行库合集<br>直接双击安装就好了，什么都不用改<br>说明：“微软常用运行库合集”中包含了众多常用、必备的d川库文件。如果不预先安装微软常用运行库合集而直接安装WAMPServer,则可能在安装过程中出现类似于”无法启动此程序，因为计算机中丢失MSVCR**.d川”的错误提示。</p></li><li><p>安装WAMPServer 3<br>也是直接双击安装就可以了</p></li><li><p>启动WAMPServer 3<br>安装成功后双击启动，托盘处会多出来一个图标，我们左键单击可以出现菜单，选择<code>Start All Services</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301913282.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在浏览器输入 <code>http://127.0.0.1</code> 如果有页面就成功了</p></li></ol><h2 id="WANMP配置"><a href="#WANMP配置" class="headerlink" title="WANMP配置"></a>WANMP配置</h2><h3 id="配置WMAP远程访问"><a href="#配置WMAP远程访问" class="headerlink" title="配置WMAP远程访问"></a>配置WMAP远程访问</h3><ol><li><p>在系统托盘处的VAMPServer图标上单击鼠标左键，在弹出的菜单中选择”Apache”-&gt;”httpd.conf”,打开httpd.conf配置文件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301914248.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>编辑httpd.conf配置文件，将文件中<code>&lt;Directory&quot;$&#123;INSTALL DIR&#125;/www/&quot;&gt;</code> 标签下的<code>Require local</code>修改成<code>Require all granted</code>,并保存。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301916524.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在系统托盘处的WAMPServer图标上单击鼠标左键，在弹出的菜单中选择“Apache”-&gt;”httpd-vhosts..conf”，打开httpd-vhosts.conf配置文件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301917889.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>编辑nttpd-vhosts.conf配置文件，将文件中的<code>Require loca</code>修改成<code>Require all granted</code>，并保存</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301918093.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在托盘处重启服务，现在就可以在远程进行访问了</p></li></ol><h1 id="基于PHPstudyi构建PHP测试环境"><a href="#基于PHPstudyi构建PHP测试环境" class="headerlink" title="基于PHPstudyi构建PHP测试环境"></a>基于PHPstudyi构建PHP测试环境</h1><h2 id="PHPstudy简介"><a href="#PHPstudy简介" class="headerlink" title="PHPstudy简介"></a>PHPstudy简介</h2><p>PHPstudy:是一个PHP调试环境的程序集成包。该程序包集成最新的Apache+PHP+MySQL+phpMyAdmin+ZendOptimizer,一次性安装，无须配置即可使用，是非常方便、好用的PHP调试环境</p><p>该程序不仅包括PHP调试环境，还包括了开发工具、开发手册等</p><h2 id="PHPstudy安装"><a href="#PHPstudy安装" class="headerlink" title="PHPstudy安装"></a>PHPstudy安装</h2><p>环境准备：Windows7,PHPstudy2018安装包，微软常用运行库合集</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301921718.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li>安装微软常用运行库合集</li><li>安装PHPstudy2018<br>也是什么都不管，直接双击安装就好了</li><li>启动PHPstudy2018<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301939851.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="PHPstudy配置"><a href="#PHPstudy配置" class="headerlink" title="PHPstudy配置"></a>PHPstudy配置</h2><h3 id="设置服务端口和网站根目录"><a href="#设置服务端口和网站根目录" class="headerlink" title="设置服务端口和网站根目录"></a>设置服务端口和网站根目录</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301941133.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="切换组件版本"><a href="#切换组件版本" class="headerlink" title="切换组件版本"></a>切换组件版本</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301942926.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301943284.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="设置PHP参数开关"><a href="#设置PHP参数开关" class="headerlink" title="设置PHP参数开关"></a>设置PHP参数开关</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301944146.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="DVWA构建"><a href="#DVWA构建" class="headerlink" title="DVWA构建"></a>DVWA构建</h1><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a>DVWA简介</h2><p>DVWA(Damn Vulnerable Web Application)是一个用来进行安全脆弱性鉴定的Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助Web开发者更好的理解Web应用安全防范的过程</p><p>DVWA也是一款开源的渗透测试漏洞练习平台，基于Apache+MySQL+PHP运行，包含了XSS、SQL注入、文件上传、文件包含、CSRF、暴力破解等各个难度的测试环境</p><h2 id="DVWA下载"><a href="#DVWA下载" class="headerlink" title="DVWA下载"></a>DVWA下载</h2><p><a href="https://github.com/digininja/DVWA">github下载</a></p><h2 id="DVWA安装"><a href="#DVWA安装" class="headerlink" title="DVWA安装"></a>DVWA安装</h2><p>环境准备：PHPstudy、DVWA资源包(DVWA-master.zip)</p><ol><li><p>将DVWA资源包解压到网站根目录中(用PHPstudy搭建网站，网站根目录为C:\phpStudy\PHPTutorial\WWW)，用其它的也一样，放在www的文件夹下</p></li><li><p>修改DVWA-master中config文件夹下的<code>config.inc.php.dist</code>文件：</p><ol><li>文件名修改为<code>config.inc.php</code>;</li><li>文件内容中，正确设置连接MySQL数据库的用户名、密码和数据库名(本例中MySQL的root账号的密码为root),并保存<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301948142.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol></li><li><p>启动PHPstudy,并访问http:&#x2F;127.0.0.1&#x2F;DVWA-master&#x2F;setup.php,点击页面下方的”Create,&#x2F;Reset Database”按钮进行安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209301949332.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>安装成功后，会由setup.php自动跳转至login.php,其登录的默认用户名为admin,密码为password</p></li></ol><h1 id="SQLI-Labs"><a href="#SQLI-Labs" class="headerlink" title="SQLI-Labs"></a>SQLI-Labs</h1><h2 id="SQLi-Labs简介"><a href="#SQLi-Labs简介" class="headerlink" title="SQLi-Labs简介"></a>SQLi-Labs简介</h2><p>SQLi-Labs(SQL Injection Libraries)是一款用于学习SQL注入的开源平台（靶场环境），共有60多种不同类型的注入</p><p>SQLi-Labs总体上基于Apache+MySQL+PHP运行</p><h2 id="SQLi-Labs下载"><a href="#SQLi-Labs下载" class="headerlink" title="SQLi-Labs下载"></a>SQLi-Labs下载</h2><p><a href="https://github.com/Audi-1/sqli-labs">github下载</a></p><h2 id="SQLi-Labs安装"><a href="#SQLi-Labs安装" class="headerlink" title="SQLi-Labs安装"></a>SQLi-Labs安装</h2><p>环境准备：PHPstudy、SQLi-Labs资源包(sqli-labs-master..zip)</p><ol><li><p>将SQLi-Labs资源包解压到网站根目录中(本例中用PHPstudy搭建网站，网站根目录为C:\phpStudy\PHPTutorial\WWW)</p></li><li><p>修改sqli-labs-master中sql-connections文件夹下的db-creds.inc文件,正确设置连接MySQL数据库的用户名、密码和数据库名（本例中MySQL的root账号的密码为root),并保存,这里注意安装的环境中mysql数据库root的密码是多少就改多少，如果没有密码就空的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209302003628.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>启动PHPstudy,并访问<a href="http://127.0.0.1/sqli-labs-master,%E7%82%B9%E5%87%BB%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%9A%84&quot;Setup/reset">http://127.0.0.1/sqli-labs-master,点击页面上的&quot;Setup/reset</a> Database for labs”按钮进行安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209302004020.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>出现下面的页面就是安装成功</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209302005690.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>注意：如果PHP版本较高(如PHP7),则可能出现错误。建议在安装SQLi-Labs网站之前，将PHP环境切换成低版本(如PHP5)</li><li><p>安装好后访问 <code>http://127.0.0.1/sqli-lab-master</code> 就可以选择关口进行sql注入等实验了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试环境与工具 </category>
          
          <category> 渗透测试环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap的使用</title>
      <link href="/2022/09/30/Nmap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/30/Nmap%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap简介"><a href="#Nmap简介" class="headerlink" title="Nmap简介"></a>Nmap简介</h1><p>Nmap是Linux下一款开源免费的网络发现(Network Discovery)和安全审计(Security Auditing)工具，软件名字Nmap是Network Mapperf的简称。</p><p>Nmap最初由Fyodor在1996年开始创建，随后在开源社区众多的志愿者参与下，该工具逐渐成为最为流行的安全必备工具之一。</p><p>Nmap使用原始IP报文来发现网络上有哪些主机，这些主机提供什么服务（应用程序名和版本），服务运行在什么操作系统，它们使用什么类型的报文过滤器&#x2F;防火墙，以及一些其他功能。</p><h2 id="Nmap家族成员"><a href="#Nmap家族成员" class="headerlink" title="Nmap家族成员"></a>Nmap家族成员</h2><ul><li>Zenmap:Nmap的图形界面版</li><li>Ncat:基于netcat,并扩展了一些功能，如ncat链、SSL支持、二进制等</li><li>Ncrack:测试已部署的认证系统和密码强度，支持常用协议</li><li>Ndiff:用于网络基线测试，对比Nmap扫描结果之间的差异</li><li>Nping：允许将自己构造的数据包整合在扫描过程中，并对原始数据进行操控</li></ul><h1 id="Nmap安装包下载"><a href="#Nmap安装包下载" class="headerlink" title="Nmap安装包下载"></a>Nmap安装包下载</h1><p><a href="https://nmap.org/download.html">官网下载</a></p><h1 id="Nmap基本功能"><a href="#Nmap基本功能" class="headerlink" title="Nmap基本功能"></a>Nmap基本功能</h1><ol><li><p>基本功能</p><ul><li>主机发现</li><li>端口扫描</li><li>应用程序与版本信息侦测</li><li>操作系统侦测</li></ul></li><li><p>附加功能</p><ul><li>规避防火墙&#x2F;入侵检测</li><li>NSE脚本定制与使用</li></ul></li></ol><h2 id="Nmap命令语法格式"><a href="#Nmap命令语法格式" class="headerlink" title="Nmap命令语法格式"></a>Nmap命令语法格式</h2><p><code>nmap【空格】【选项多选项协议】【空格】【扫描目标说明】</code></p><p><strong>说明</strong> 多个选项之间也是用空格进行分割的，如果某些选项需要指定某些参数，那么在这些选项与指定的参数之间一般也需要用空格进行分割。特殊情况下，有的选项与参数可以直接“连写”，如-p80,-p是选项，80是参数。为了使Nmap语法更加严谨，建议严格用空格进行分割。</p><h3 id="默认方式扫描"><a href="#默认方式扫描" class="headerlink" title="默认方式扫描"></a>默认方式扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap &lt;目标地址&gt;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011013451.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="全面扫描"><a href="#全面扫描" class="headerlink" title="全面扫描"></a>全面扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -T 4 -v &lt;目标地址&gt;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011014956.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><p>目标：确定目标主机是否在线(Aive,处于开启状态)</p><p>原理：与pig命令类似，发送探测包到目标主机，如果收到回复，则说明目标主机是开启的</p><p>探测方式：Nmap支持十多种不同的主机探测方法</p><ul><li>ICMP ECHO&#x2F;TIMESTAMP&#x2F;NETMASK报文</li><li>TCP SYN&#x2F;ACK报文</li><li>SCTP INIT&#x2F;COOKIE-ECHO报文</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-sP</td><td>Ping扫描（不进行端口扫描）</td></tr><tr><td>-Pn</td><td>不进行Ping扫描</td></tr><tr><td>-PS&#x2F;-PA&#x2F;-PU&#x2F;-PY</td><td>TCP SYN&#x2F;TCP ACK&#x2F;UDP&#x2F;SCTP INIT Ping 扫描</td></tr><tr><td>-PE&#x2F;-PP&#x2F;-PM</td><td>ICMP echo&#x2F;ICMP timestamp&#x2F;ICMP netmask Ping 扫描</td></tr><tr><td>-R&#x2F;-n</td><td>DNS反向域名解析&#x2F;禁用DNS反向解析</td></tr><tr><td>-6</td><td>扫描IPv6地址</td></tr><tr><td>–dns-servers&lt;serv1[,serv2,…]&gt;</td><td>指定DNS服务器</td></tr><tr><td>–system-dns</td><td>指定使用系统的DNS服务器</td></tr><tr><td>–traceroute</td><td>追踪每个路由节点</td></tr><tr><td>–packet-trace</td><td>追踪每个包</td></tr></tbody></table><h2 id="局域网内执行Ping扫描"><a href="#局域网内执行Ping扫描" class="headerlink" title="局域网内执行Ping扫描"></a>局域网内执行Ping扫描</h2><p>目标：扫描局域网192.168.40.1-192.168.40.254内哪些1P的主机在线。</p><p>命令：<code>nmap -sP 192.168.40.1-254</code>,或 <code>nmap -sP 192.168.40.0/24</code></p><p>说明：在局域网内，无论采用哪一种选项，Nmap都是通过ARP包来询问IP地址上的主机是否活动的，如果收到ARP回复包，那么说明主机在线。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011107348.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="跨网段执行ping扫描"><a href="#跨网段执行ping扫描" class="headerlink" title="跨网段执行ping扫描"></a>跨网段执行ping扫描</h2><p>目标：扫描跨网段目标主机192.168.50.5是否在线。</p><p>命令：<code>nmap-sP 192.168.50.5</code></p><p>说明：扫描跨网段目标主机时，使用-sP或-sn选项，默认情况下Nmap会依次发送4种不同类型的数据包(ICMP echo request,TCP SYN packet to port 443，TCP ACK packet to port80，ICMP timestamp request)来探测目标主机是否在线，只要收到其中一个包的回复，就证明目标机在线。</p><h2 id="–packet-trace的使用"><a href="#–packet-trace的使用" class="headerlink" title="–packet-trace的使用"></a>–packet-trace的使用</h2><p>可以查看都发出了什么类型的包</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011239279.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><p>目标：确定目标主机的TCP&#x2F;UDP端口的开放情况</p><p>原理：发送TCP、UDP等类型的探测包到目标端口，根据收到的回复包判定端口是否开放</p><p>端口的六个状态</p><ul><li><code>open</code>:端口是开放的</li><li><code>closed</code>:端口是关闭的</li><li><code>filtered</code>:端口被防火墙IDS&#x2F;小PS屏蔽，无法确定其状态</li><li><code>unfiltered</code>：端口没有被屏蔽，但是否开放需要进一步确定</li><li><code>open filtered</code>:端口是开放的或被屏蔽</li><li><code>closed filtered</code>:端口是关闭的或被屏蔽</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>指定扫描的目标端口</td></tr><tr><td>–exclude-port</td><td>指定排除的目标端口</td></tr><tr><td>-sT&#x2F;-sS&#x2F;-sA</td><td>TCP connect&#x2F;TCP SYN&#x2F;TCP ACK 扫描</td></tr><tr><td>-sN&#x2F;-sF&#x2F;-sX</td><td>TCP NULL&#x2F;TCP FIN&#x2F;TCP Xmas扫描</td></tr><tr><td>-sU</td><td>UDP扫描</td></tr><tr><td>-sW&#x2F;-sM</td><td>TCP窗口&#x2F;TCP Maimom扫描</td></tr><tr><td>–scanflags</td><td>自定义TCP扫描</td></tr><tr><td>-sO</td><td>IP扫描</td></tr></tbody></table><h2 id="p选项的应用"><a href="#p选项的应用" class="headerlink" title="-p选项的应用"></a>-p选项的应用</h2><p>在<code>-p</code>选项后指定扫描的端口号，最后跟上IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1-1024,1433,3306,3389 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011430780.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>关于-p选项的说明：默认情况下，Nmap仅对用-p指定的TCP端口进行扫描，扫描方式为-sS(TCP SYN扫描)。如果既要扫描TCP端口，又要扫描UDP端口，则可以用<code>T:``U:</code>参数指定目标端口，并指定-sU(UDP扫描方式)和至少一种TCP扫描方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p T:139,U:53 -sS -sU 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011432814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="sS选项的应用"><a href="#sS选项的应用" class="headerlink" title="-sS选项的应用"></a>-sS选项的应用</h2><p>TCP SYN扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,3306 -sS 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011436840.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="TCP-SYN扫描-sS-原理"><a href="#TCP-SYN扫描-sS-原理" class="headerlink" title="TCP SYN扫描(-sS)原理"></a>TCP SYN扫描(-sS)原理</h3><p>Nmap向目标端口发送TCP SYN报文，如果目标机返回TCP SYN+ACK报文，则说明目标端口处于<strong>开放状态</strong>，同时Nmap会紧接着向目标机发送TCP RST:报文以重置此连接；如果目标机返回TCP RST+ACK报文，则说明目标端口处于<strong>关闭状态</strong>。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011433561.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="sT选项的应用"><a href="#sT选项的应用" class="headerlink" title="-sT选项的应用"></a>-sT选项的应用</h2><p>TCP connect扫描</p><p>相比 TCP SYN扫描，这是一个完整的连接，容易被发现，但是这个扫描允许任何用户发起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,3306 -sT 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011440948.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="TCP-connect扫描-sT-原理"><a href="#TCP-connect扫描-sT-原理" class="headerlink" title="TCP connect扫描(-sT)原理"></a>TCP connect扫描(-sT)原理</h3><p>Nmap向目标端口发送TCP SYN:报文，如果目标机返回TCP SYN+ACK报文，则说明目标端口处于<strong>开放状态</strong>，同时Nmap会紧接着向目标机依次发送TCP ACK、TCP RST+ACK完成三次握手和重置此连接；如果目标机返回TCP RST+ACK报文，则说明目标端口处于<strong>关闭状态</strong>。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011436231.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="sA选项的应用"><a href="#sA选项的应用" class="headerlink" title="-sA选项的应用"></a>-sA选项的应用</h2><p>TCP ACK扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,3306 -sA 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011444400.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="TCP-ACK扫描-sA-原理"><a href="#TCP-ACK扫描-sA-原理" class="headerlink" title="TCP ACK扫描(-sA)原理"></a>TCP ACK扫描(-sA)原理</h3><p>Nmap向目标端口发送TCP ACK报文，无论目标端口是否处于开放状态，目标机都会返回TCP RST报文。如果Nmap主机能收到此TCP RST报文，则说明<strong>目标端口未被防火墙屏蔽。</strong></p><p>TCP ACK扫描只能用于确定防火墙是否屏蔽某个端口，可以辅助TCP SYN的方式来<strong>判断目标主机防火墙的状况</strong>。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011441743.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="隐蔽扫描选项-sF-x2F-sN-x2F-sX-的应用"><a href="#隐蔽扫描选项-sF-x2F-sN-x2F-sX-的应用" class="headerlink" title="隐蔽扫描选项(-sF&#x2F;-sN&#x2F;-sX)的应用"></a>隐蔽扫描选项(-sF&#x2F;-sN&#x2F;-sX)的应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,3306 -sF 110.242.68.66</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011452192.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="隐蔽扫描-sF-x2F-sN-x2F-sX-原理"><a href="#隐蔽扫描-sF-x2F-sN-x2F-sX-原理" class="headerlink" title="隐蔽扫描(-sF&#x2F;-sN&#x2F;-sX)原理"></a>隐蔽扫描(-sF&#x2F;-sN&#x2F;-sX)原理</h3><p>Nmap向目标端口发送TCP FIN(-sF)&#x2F;NULL(-sN)&#x2F;FIN+PSH+URG(-sX)报文</p><p><strong>对于Liux系统的目标机</strong>，如果目标机未响应，则说明目标端口处于<strong>开放状态</strong>或<strong>被防火墙屏蔽</strong>；如果目标机返回TCP RST+ACK报文，则说明目标端口处于<strong>关闭状态。</strong></p><p><strong>对于Windows系统的目标机</strong>，无论目标端口处于开放还是关闭状态，目标机都会返回TCP RST+ACK报文。</p><p>因此，<strong>隐蔽扫描方式适合于Liux系统的目标机端口扫描。</strong></p><h1 id="应用程序与版本信息侦测"><a href="#应用程序与版本信息侦测" class="headerlink" title="应用程序与版本信息侦测"></a>应用程序与版本信息侦测</h1><p>目标：识别目标主机开放的TCP&#x2F;UDP端口上运行的服务及版本信息流程</p><p>这个动作一般是发生在端口扫描之后，首先检查open与open filtered状态的端口是否在排除端口列表内。如果在排除列表，将该端口剔除。</p><p>如果是TCP端口，尝试建立TCP连接。尝试等待片刻（通常6秒或更多，具体时间可以查询文件nmap-services-probes中Probe TCP NULL q||对应的totalwaitms)。通常在等待时间内，会接收到目标机发送的“Welcome Banner”信息。Nmap将接收到的Banner与nmap-services-probest中NULL probe中的签名进行对比，查找对应应用程序的名字与版本信息</p><p>如果通过”Welcome Banner”无法确定应用程序版本，那么Nmap再尝试发送其他的探测包(即从nmap-services-probest中挑选合适的probe),将probe得到的回复包与数据库中的签名进行对比。如果反复探测都无法得出具体应用，那么打印出应用返回报文，让用户自行进一步判定。</p><p>如果是UDP端口，那么直接使用nmap-services-probes中探测包进行探测匹配，根据结果对比分析出UDP应用服务类型。</p><p>如果探测到应用程序是SSL,那么调用openSSL进一步的侦查运行在SSL之上的具体的应用类型。</p><p>如果探测到应用程序是SunRPC,那么调用orute-force RPC grinder进一步探测具体服务。</p><p>上面我们反复提到了<code>nmap-services-probes</code>这是一个<strong>服务版本数据库文件</strong> ，默认路径：<code>usr/share/nmap/nmap-services-probes</code> 我们可以打开看一下</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-sV</td><td>版本探测</td></tr><tr><td>–allports</td><td>全端口版本探测</td></tr><tr><td>–version-intensity</td><td>设置版本扫描强度</td></tr><tr><td>–version-light</td><td>轻量级扫描(相当于-version-intensity2)</td></tr><tr><td>–version-all</td><td>重量级扫描(相当于-version-intensity9)</td></tr><tr><td>–version-trace</td><td>跟踪版本扫描活动</td></tr><tr><td>-sR</td><td>RPC扫描</td></tr></tbody></table><h2 id="sV选项的应用"><a href="#sV选项的应用" class="headerlink" title="-sV选项的应用"></a>-sV选项的应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 110.242.68.66</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011524299.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="version-trace选项的应用"><a href="#version-trace选项的应用" class="headerlink" title="-version-trace选项的应用"></a>-version-trace选项的应用</h2><p>跟踪版本扫描活动,我们指定一下扫描的端口，节约时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,443,3306 -sV --version-trace 110.242.68.66</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011526431.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="操作系统侦测"><a href="#操作系统侦测" class="headerlink" title="操作系统侦测"></a>操作系统侦测</h1><p>目标：识别目标主机操作系统的类型</p><p>侦测方法：<strong>网络协议栈指纹识别技术</strong></p><p>Nmap只是有这个功能罢了，一般来说侦测的不是很准确</p><h2 id="常用的网络协议栈指纹识别方法"><a href="#常用的网络协议栈指纹识别方法" class="headerlink" title="常用的网络协议栈指纹识别方法"></a>常用的网络协议栈指纹识别方法</h2><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>TTL:Time To Live,即数据包的“存活时间”，表示一个数据包在被丢弃之前可以通过多少跃点(Hop)。不同操作系统的缺省TTL值往往是不同的。</p><ul><li><p>常见操作系统的TTL值</p><table><thead><tr><th>操作系统名称</th><th>TTL值</th></tr></thead><tbody><tr><td>Windows 9x&#x2F;NT&#x2F;2000 Intel</td><td>TTL&#x3D;128</td></tr><tr><td>Digital Unix 4.0 Alpha</td><td>TTL&#x3D;60</td></tr><tr><td>Linux 2.2.x Intel</td><td>TTL&#x3D;64</td></tr><tr><td>Netware 4.11 Intel</td><td>TTL&#x3D;128</td></tr><tr><td>AIX 4.3.x IBM&#x2F;RS6000</td><td>TTL&#x3D;60</td></tr><tr><td>Cisc012.02514</td><td>TTL&#x3D;255</td></tr><tr><td>Solaris 8 Intel&#x2F;Spard</td><td>TTL&#x3D;64</td></tr></tbody></table></li><li><p>Windows系统修改TTL值的方法:<br>打开注册表，在”HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters”新建一个“DefaultTTL”Dword键值进行自定义</p></li></ul><h3 id="DF位"><a href="#DF位" class="headerlink" title="DF位"></a>DF位</h3><p>DF（不分段）位识别：不同OS对DF位有不同的处理方式，有些OS设置DF位，有些不设置DF位；还有一些OS在特定场合设置DF位，在其它场合不设置DF位。</p><h3 id="Window-Size"><a href="#Window-Size" class="headerlink" title="Window Size"></a>Window Size</h3><p>Window Size:TCP接收（发送）窗口大小。它决定了接收信息的机器在收到多少数据包后发送ACK包。</p><p>特定操作系统的缺省Window Size基本是常数，例如AIX用0x3F25,Windows、OpenBSD、FreeBSD用0x402E</p><p>一般地，UNIX的Window Size较大。Windows、路由器、交换机等的较小。</p><h3 id="ACK序号"><a href="#ACK序号" class="headerlink" title="ACK序号"></a>ACK序号</h3><p>不同的OS处理ACK序号时是不同的。如果发送一个FIN+PSH+URG的数据包到一个关闭的TCP端口，大多数OS会把回应ACK包的序号设置为发送的包的初始序号，而Windows和一些打印机则会发送序号为初始序号加1的ACK包。</p><h3 id="对FIN包的响应"><a href="#对FIN包的响应" class="headerlink" title="对FIN包的响应"></a>对FIN包的响应</h3><p>发送一个只有FIN标志位的TCP数据包给一个打开的端口，Liux等系统不响应；有些系统如Windows、CISCO、HP&#x2F;UX等，发回一个RST。</p><h3 id="ISN（初始化序列号）"><a href="#ISN（初始化序列号）" class="headerlink" title="ISN（初始化序列号）"></a>ISN（初始化序列号）</h3><p>不同的OS在选择TCP ISN时采用不同的方法：一些UNIX系统采用传统的64K递增方法；较新的Solaris、IRIX、FreeBSD、Digital Unix、Cray等系统采用随机增量的方法；Linux2.0、OpenVMS、AIX等系统采用真随机方法；Nindows系统采用一种时间相关的模型；还有一些系统使用常数，如3Com集线器使用0x803,Apple LaserWriter打印机使用0xC7001.</p><h3 id="主机使用的端口"><a href="#主机使用的端口" class="headerlink" title="主机使用的端口"></a>主机使用的端口</h3><p>一些OS会开放特殊的端口，如Windows的137、139；一些网络设备，如入侵检测系统、防火墙等也开放自己特殊的端口。</p><h2 id="侦测方法"><a href="#侦测方法" class="headerlink" title="侦测方法"></a>侦测方法</h2><p>与应用程序与版本信息侦测类似，操作系统侦测也是通过在数据库文件中查找比对来确定操作系统的</p><p><code>nmap-os-db</code>就是<strong>操作系统数据库文件</strong>，该数据库包含了超过2600种操作系统的指纹信息，Nmap把TCP和UDP报文发送到目标机器上，然后将检查结果和nmap-os-db数据库进行比对，默认路径：<code>/usr/share/nmap/nmap-os-db</code></p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-O</td><td>执行操作系统侦测</td></tr><tr><td>-A</td><td>执行攻击性探测</td></tr><tr><td>–osscan-limit</td><td>对指定的目标进行操作系统侦测</td></tr><tr><td>–osscan-guess &#x2F;–fuzzy</td><td>推测系统识别</td></tr></tbody></table><h2 id="O选项的应用"><a href="#O选项的应用" class="headerlink" title="-O选项的应用"></a>-O选项的应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -O 110.242.68.66</span><br></pre></td></tr></table></figure><hr><h1 id="规避FW（防火墙）-x2F-IDS（入侵检测）"><a href="#规避FW（防火墙）-x2F-IDS（入侵检测）" class="headerlink" title="规避FW（防火墙）&#x2F;IDS（入侵检测）"></a>规避FW（防火墙）&#x2F;IDS（入侵检测）</h1><p>目标：绕过目标主机的防火墙、入侵检测系统等防护手段</p><p>常用选项</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-T</td><td>时序选项</td></tr><tr><td>-f</td><td>报文分段</td></tr><tr><td>–data-length</td><td>指定发包长度</td></tr><tr><td>–mtu</td><td>指定偏移量大小(必须是8的倍数)</td></tr><tr><td>-D</td><td>使用诱饵进行源地址欺骗</td></tr><tr><td>-sI</td><td>空闲扫描（源地址欺骗）</td></tr><tr><td>–source-port</td><td>源端口欺骗</td></tr><tr><td>–spoof-mac</td><td>源MAC地址欺骗</td></tr></tbody></table><h2 id="T选项的应用"><a href="#T选项的应用" class="headerlink" title="-T选项的应用"></a>-T选项的应用</h2><p>控制扫描速度,使用-T(0~5)可以启用时序选项，一般来说数字越大，速度越快，精度越低</p><ul><li><code>-T0</code>（偏执的）：非常慢的扫描，用于IDS逃避</li><li><code>-T1</code>（鬼崇的）：缓慢的扫描，用于IDS逃避</li><li><code>-T2</code>（文雅的）：降低速度以降低对带宽的消耗，此选项一般不常用</li><li><code>-T3</code>（普通的）：默认，根据目标的反应自动调整时间</li><li><code>-T4</code>（野蛮的）：快速扫描，常用扫描方式，需要在很好的网络环境下使用</li><li><code>-T5</code>（疯狂的）：极速扫描，以牺牲准确度来提升扫描速度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T 4 192.168.0.22</span><br></pre></td></tr></table></figure><h2 id="D选项的应用"><a href="#D选项的应用" class="headerlink" title="-D选项的应用"></a>-D选项的应用</h2><p>源IP地址欺骗,使用参数 RND来指定欺骗的地址个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -D RND:2 110.242.68.66</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011610448.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>可以看到图中除了本机IP<code>192.168.0.24</code> 之外，还多了两个其它的假Ip</p><h2 id="空闲扫描-sI-的应用"><a href="#空闲扫描-sI-的应用" class="headerlink" title="空闲扫描(-sI)的应用"></a>空闲扫描(-sI)的应用</h2><p>就是利用网络上空闲的IP来代替本机去扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -Pn -sI 192.168.0.7 110.242.68.66</span><br></pre></td></tr></table></figure><p>使用 <code>-Pn</code> 选项是为了防止来自真实ip 的ping，注意前一个ip一定要是网络上可用的ip</p><h2 id="spoof-mac选项的应用一一源MAC地址欺骗"><a href="#spoof-mac选项的应用一一源MAC地址欺骗" class="headerlink" title="-spoof-mac选项的应用一一源MAC地址欺骗"></a>-spoof-mac选项的应用一一源MAC地址欺骗</h2><p>所用命令：<code>nmap --spoof-mac 0 &lt;目标lP&gt;</code>,其中参数0表示随机分配一个MAC地址，也可以手动指定MAC地址，如：<code>nmap --spoof-mac aa:bb:cc:dd:ee:ff&lt;目标IP&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --spoof-mac 0 110.242.68.66</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011623330.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="NSE脚本的简单应用"><a href="#NSE脚本的简单应用" class="headerlink" title="NSE脚本的简单应用"></a>NSE脚本的简单应用</h1><h2 id="NSE和Lua"><a href="#NSE和Lua" class="headerlink" title="NSE和Lua"></a>NSE和Lua</h2><p>除了常规的网络扫描，Nmap还可根据NSE(Nmap scripting Engine)的脚本进行大量渗透工作，这种脚本基于Lua语言编写。</p><p>脚本存放目录：&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;</p><h2 id="NSE开发工具"><a href="#NSE开发工具" class="headerlink" title="NSE开发工具"></a>NSE开发工具</h2><p>IDE for Nmap Script Developers</p><h2 id="NSE脚本运用"><a href="#NSE脚本运用" class="headerlink" title="NSE脚本运用"></a>NSE脚本运用</h2><p>常用选项</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-sC</td><td>等价于-scripta&#x3D;default,使用默认类别的脚本进行扫描</td></tr><tr><td>–script&#x3D;<Lua scripts></td><td><Lua scripts>使用某个或某类脚本进行扫描，支持通配符描述</td></tr><tr><td>–script-args&#x3D;&lt;n1&#x3D;v1,[n2&#x3D;v2,…]&gt;</td><td>为脚本提供默认参数</td></tr><tr><td>–script-args-file&#x3D;filename</td><td>使用文件来为脚本提供参数</td></tr><tr><td>–script-trace</td><td>显示脚本执行过程中发送与接收的数据</td></tr><tr><td>–script-updatedb</td><td>更新脚本数据库</td></tr><tr><td>–script-help&#x3D;<Lua scripts></td><td>显示脚本的帮助信息，其中<Lua scripts:>部分可以逗号分隔的文件或脚本类别</td></tr></tbody></table><h2 id="暴力破解脚本-–script-brute-应用"><a href="#暴力破解脚本-–script-brute-应用" class="headerlink" title="暴力破解脚本(–script brute)应用"></a>暴力破解脚本(–script brute)应用</h2><p>提供暴力破解的方式，可对数据库、SMB、SNMP等进行简单密码的暴力猜解</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011630396.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="漏洞扫描脚本-script-vuln-应用"><a href="#漏洞扫描脚本-script-vuln-应用" class="headerlink" title="漏洞扫描脚本(-script vuln)应用"></a>漏洞扫描脚本(-script vuln)应用</h2><p>检查是否存在常见漏洞</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script vuln 192.168.0.22</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202210011640192.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="扫描结果保存与输出"><a href="#扫描结果保存与输出" class="headerlink" title="扫描结果保存与输出"></a>扫描结果保存与输出</h1><p>三种格式的输出</p><ul><li>norma:标准模式(选项-oN)</li><li>xml文档：(选项-oX)</li><li>grep文件(选项-oG)</li></ul><p>注：<code>-oA</code>选项可将扫描结果以标准格式、XML、Grep格式一次性全部保存</p><h2 id="以普通模式-oN-输出Nmap扫描结果"><a href="#以普通模式-oN-输出Nmap扫描结果" class="headerlink" title="以普通模式(-oN)输出Nmap扫描结果"></a>以普通模式(-oN)输出Nmap扫描结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -oN /home/outputl.txt 192.168.0.22</span><br></pre></td></tr></table></figure><p>上面的命令就可用吧扫描结果写入指定目录下的文件中</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试环境与工具 </category>
          
          <category> 渗透测试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试基础</title>
      <link href="/2022/09/29/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/09/29/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Kali-Linux-发展史和特性"><a href="#Kali-Linux-发展史和特性" class="headerlink" title="Kali Linux 发展史和特性"></a>Kali Linux 发展史和特性</h1><h2 id="Kali-Linux-的发展"><a href="#Kali-Linux-的发展" class="headerlink" title="Kali Linux 的发展"></a>Kali Linux 的发展</h2><ul><li>Kali Linux的前身是BackTrack,由Offensive Security Ltd维护和资助。</li><li>BackTrack4使用了ubuntu8.10的系统，而且只能装Debian的软件包；2011年8月18日，BackTrack发布了BackTrack5R1,基于ubuntu10.04内核为Kerne|2.6.39.4,目前BackTrack的最新版本为2012年8月13日发布的BackTrack5R3黑帽子版，内核为Kernel3.2.6.</li><li>Kali Linux,是基于Debian Linuxl的发行版，集成了大量精心挑选的渗透测试和安全审计的工具，其第一个发行版(Kali Linux1.0)于2013年3月发布。</li><li>面向的对象人群：从事渗透测试、数字取证、逆向工程、网络攻防技术研究等工作的人员。</li></ul><h2 id="Kali-Linux-的特性"><a href="#Kali-Linux-的特性" class="headerlink" title="Kali Linux 的特性"></a>Kali Linux 的特性</h2><ul><li>永久免费</li><li>开源Gt树：开源软件忠实的拥护者，那些想调整或重建包的人可以浏览开发树得到所有源代码。</li><li>遵循FHS(Filesystem Hierarchy Standard,文件系统层次化标准)：Kali的开发遵循Liux目录结构标准，用户可以方便地找到命令文件、帮助文件、库文件等。</li><li>支持无线设备：Kli能正常运行在各种各样的硬件上，能兼容大量USB和其它无线设备。</li><li>安全的开发环境：K开发团队由一群可信任的人组成，他们只能在使用多种安全协议的时候提交包或管理源，每个开发者都会在编译和提交Ki的包时对它进行签名，并且源也会对它进行签名。</li><li>多语言支持</li><li>完全的可定制化</li><li>支持ARM设备</li></ul><hr><h1 id="VMWare-中安装-Kali-Linux"><a href="#VMWare-中安装-Kali-Linux" class="headerlink" title="VMWare 中安装 Kali Linux"></a>VMWare 中安装 Kali Linux</h1><h2 id="下载Kali-Linux-的镜像文件"><a href="#下载Kali-Linux-的镜像文件" class="headerlink" title="下载Kali Linux 的镜像文件"></a>下载Kali Linux 的镜像文件</h2><p><a href="https://www.kali.org/get-kali/#kali-installer-images">通过Kali官网下载</a></p><h2 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h2><p>选择创建虚拟机</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291448343.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>一般安装 Linux 系统都使用自定义安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291448466.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这里没有什么要改的，直接下一步</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291448288.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择稍后安装操作系统，然后下一步</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291449637.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>Kali Linux 是基于 Debian的，我们选择如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291449896.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>给虚拟机起个名字，选择存放的位置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291458311.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>分配处理器个数和内存大小<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291459025.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291459647.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>默认NET网络连接模式就好了，然后下一步</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291459711.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>磁盘和I&#x2F;O都是默认的，直接下一步<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291459922.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291500301.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择创建虚拟磁盘，并选择磁盘大小</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291501747.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291501803.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291501007.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>点击完成后就创建好了虚拟机</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291501771.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>现在选择一下刚才下载的镜像文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291502144.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="安装Kali-Linux"><a href="#安装Kali-Linux" class="headerlink" title="安装Kali Linux"></a>安装Kali Linux</h2><p>开启刚才创建的虚拟机，开始安装Kali Linux</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291524021.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择中文，中国，和汉语进行后面的安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291524339.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291524046.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291525740.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>给主机起个名字，由于单台主机，域名可以先空着</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291525285.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291525384.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>创建一个普通用户，起一个用户名和密码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291525228.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291526566.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>磁盘分区部分都按照默认的，直接下一步就好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291526885.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291526700.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291526884.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291526034.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择是，将改动写入磁盘</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291527052.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>默认安装的软件，直接点击继续，然后等待安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291527164.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>GRUB启动引导选择是</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291527450.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>注意选择使用 <code>/dev/sda</code><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291527686.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>点击完成后重启就好了<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291528196.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><h1 id="Kali-Linux-基本配置"><a href="#Kali-Linux-基本配置" class="headerlink" title="Kali Linux 基本配置"></a>Kali Linux 基本配置</h1><h2 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h2><ol><li><p>关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now     /立即关机</span><br><span class="line">Init 0              /立即关机</span><br><span class="line">shutdown -h +1      /1分钟后关机</span><br><span class="line">shutdown -h 12:00   /12:00关机</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now      //立即重启</span><br><span class="line">Init 6               //立即重启</span><br><span class="line">shutdown -r +1       //1分钟后重启</span><br><span class="line">shutdown -r 12:00    /12:00重启</span><br></pre></td></tr></table></figure></li></ol><h2 id="为root设置初始密码"><a href="#为root设置初始密码" class="headerlink" title="为root设置初始密码"></a>为root设置初始密码</h2><p>刚开始我们登录的时候都是用安装的时候创建的普通用户登录的，现在我们给root用户设置密码，以后就可以使用root用户来登录了</p><p>在看到下面界面的时候，按 <code>E</code> 键进入 <code>GNU GRUB</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291557896.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>进入后界面如下，通过上下左右键将光标移动到下面的位置进行修改</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291558506.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>将 <code>ro</code> 修改为 <code>rw</code> 并在后面加上 <code>init=/bin/bash</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291558971.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>修改完后按 <code>Ctrl+X</code> 或 <code>F10</code> 进入单用户模式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291601207.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在单用户模式下输入passwd root命令，并为其设置密码，设置完成后重新启动即可使用root用户登录Kali</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291603188.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>此时重启时用虚拟机里的电源直接重启，输入init 6 不起作用</p><h1 id="Kali-Linux-工具集"><a href="#Kali-Linux-工具集" class="headerlink" title="Kali Linux 工具集"></a>Kali Linux 工具集</h1><p><a href="https://www.kali.org/tools/">Kali工具说明</a></p><p>可以在上面的网站中学习工具的使用<a href="http://roomorder.cxcyjd.com.cn/#/login">http://roomorder.cxcyjd.com.cn/#/login</a></p><h2 id="十三类工具"><a href="#十三类工具" class="headerlink" title="十三类工具"></a>十三类工具</h2><ul><li>信息收集</li><li>漏洞利用工具集</li><li>漏洞分析</li><li>嗅探&#x2F;欺骗</li><li>Web程序</li><li>数据库评估软件</li><li>权限维持</li><li>数字取证</li><li>密码攻击</li><li>报告工具集</li><li>无线攻击</li><li>社会工程学工具</li><li>逆向工程</li></ul><h2 id="信息收集工具"><a href="#信息收集工具" class="headerlink" title="信息收集工具"></a>信息收集工具</h2><ul><li><p>Hping3</p></li><li><p>Whois</p></li><li><p>Dnsenum</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291648152.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="漏洞分析工具"><a href="#漏洞分析工具" class="headerlink" title="漏洞分析工具"></a>漏洞分析工具</h2><ul><li>Nmap</li><li>Nikto</li><li>Sprata</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291649491.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="Web程序"><a href="#Web程序" class="headerlink" title="Web程序"></a>Web程序</h2><ul><li>Burpsuite</li><li>Skipfish</li><li>Whatweb</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291650648.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="数据库评估软件"><a href="#数据库评估软件" class="headerlink" title="数据库评估软件"></a>数据库评估软件</h2><ul><li>Salmap</li></ul><p>这是一个重要是sql注入工具</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291651196.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="密码攻击工具"><a href="#密码攻击工具" class="headerlink" title="密码攻击工具"></a>密码攻击工具</h2><ul><li>Hashcat</li><li>John</li><li>Ophcrack</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291652221.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>Metasploit</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291653122.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><ul><li>SET</li></ul><p>这个可以生成一个钓鱼网站来获取用户名密码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202209291654255.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 渗透测试环境与工具 </category>
          
          <category> 渗透测试环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop运行模式</title>
      <link href="/2022/08/02/Hadoop%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/02/Hadoop%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop的三种运行模式"><a href="#Hadoop的三种运行模式" class="headerlink" title="Hadoop的三种运行模式"></a>Hadoop的三种运行模式</h1><p>Hadoop官方网站：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p><p>Hadoop运行模式包括：<strong>本地模式</strong>、<strong>伪分布式模式</strong>和<strong>完全分布式模式</strong>。</p><ul><li><strong>本地模式</strong>：单机运行，只是用来演示一下官方案例。<strong>生产环境不用。</strong></li><li><strong>伪分布式模式</strong>：也是单机运行，但是具备Hadoop集群的所有功能，一台服务器模拟一个分布式的环境。<strong>个别缺钱的公司用来测试，生产环境不用。</strong></li><li><strong>完全分布式模式</strong>：多台服务器组成分布式环境。<strong>生产环境使用。</strong></li></ul><h1 id="本地运行模式"><a href="#本地运行模式" class="headerlink" title="本地运行模式"></a>本地运行模式</h1><ol><li><p>创建在<code>/opt/module/hadoop-3.1.3/</code>目录下面创建一个wcinput文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir wcinput</span><br></pre></td></tr></table></figure></li><li><p>在wcinput文件下创建一个word.txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd wcinput</span><br></pre></td></tr></table></figure></li><li><p>编辑word.txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim word.txt</span><br></pre></td></tr></table></figure><p>在文件中输入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop yarn</span><br><span class="line">hadoop mapreduce</span><br><span class="line">atguigu</span><br><span class="line">atguigu</span><br></pre></td></tr></table></figure><p>保存退出：<code>:wq</code></p></li><li><p>回到Hadoop目录<code>/opt/module/hadoop-3.1.3</code></p></li><li><p>执行程序,指定执行jar包中的<code>wordcount</code> 程序，输入目录为 <code>wcinput</code> 输出目录为 <code>wcoutput</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount wcinput ./wcoutput</span><br></pre></td></tr></table></figure></li><li><p>查看结果<br>进入 <code>wcoutput</code> 目录有两个文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021221728.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>下面这个 <code>_SUCCESS</code> 文件只是一个标记，表示执行成功，里面并没有数据</p><p>查看 <code>part-r-00000</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat wcoutput/part-r-00000</span><br></pre></td></tr></table></figure><p>看到如下结果：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021222831.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>注意：输出目录不能事先创建，如果已经有.&#x2F;output 目录，就要选择另外的</p></li></ol><p>输出目录，或者将~&#x2F;output 目录先删除</p><h1 id="完全分布式运行模式"><a href="#完全分布式运行模式" class="headerlink" title="完全分布式运行模式"></a>完全分布式运行模式</h1><p>我们已经在 Hadoop102 上配置好了JDK和Hadoop的环境，下面我们需要给 Hadoop103和Hadoop104 也配置好环境</p><h2 id="编写集群分发脚本xsync"><a href="#编写集群分发脚本xsync" class="headerlink" title="编写集群分发脚本xsync"></a>编写集群分发脚本xsync</h2><h3 id="scp（secure-copy）-安全拷贝"><a href="#scp（secure-copy）-安全拷贝" class="headerlink" title="scp（secure copy） 安全拷贝"></a>scp（secure copy） 安全拷贝</h3><p>   在hadoop102上执行<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/module/jdk1.8.0_212  yjr1100@hadoop103:/opt/module</span><br></pre></td></tr></table></figure><br>   需要输入hadoop103上yjr1100的密码如下图所示<br>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021455036.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>   或者也可以在hadoop103上执行<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r yjr1100@hadoop102:/opt/module/hadoop-3.1.3 /opt/module/</span><br></pre></td></tr></table></figure></p><p>   我们可以看到在moudle目录下，刚才从hadoop102拷贝的jdk文件夹</p><p>   同样，需要输入hadoop102上yjr1100的密码进行拷贝，如下图所示<br>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021459753.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>   输入<code>ll</code> 可以看到，此时已经成功用两种方法拷贝从hadoop102中将文件拷贝到了hadoop103中<br>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021500186.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>   我们其实可以通过下面的命令，在hadoop103上将hadoop102上的数据拷贝给hadoop104<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r yjr1100@hadoop102:/opt/module/* yjr1100@hadoop104:/opt/module/</span><br></pre></td></tr></table></figure></p><h3 id="rsync远程同步工具"><a href="#rsync远程同步工具" class="headerlink" title="rsync远程同步工具"></a>rsync远程同步工具</h3><p>   rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p><p>   <strong>rsync和scp区别</strong>：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p><p>   比如我们使用rsync来把hadoop102上的<code>wcinput</code>目录拷贝到hadoop103中，我们先把hadoop103上的<code>/opt/module/hadoop-3.1.3/wcinput</code>删除，然后在 <strong>hadoop102</strong>上执行下面的命令。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av hadoop-3.1.3/ yjr1100@hadoop103:/opt/module/hadoop-3.1.3/</span><br></pre></td></tr></table></figure><br>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021515915.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p>   我们可以发现，速度被刚才 <code>scp</code> 命令快了很多，因为许多hadoop相同的文件并没有进行拷贝，只拷贝了hadoop103中没有的 <code>wcinput</code> 目录</p><p>   这里 <code>-a</code> 选项说明是归档拷贝操作，<code>-v</code> 选项说明显示复制过程</p><p>   <code>rsync</code> 和 <code>scp</code> 命令比较像，都是 <code>命令+选项+源地址+目的地址</code> 四个部分，一般我们第一次拷贝的时候使用 <code>scp</code> 命令，以后同步的时候使用 <code>rsync</code> 命令</p><h3 id="xsync集群分发脚本"><a href="#xsync集群分发脚本" class="headerlink" title="xsync集群分发脚本"></a>xsync集群分发脚本</h3><p>   每次使用上面两个命令，都要输入很多内容，为了更方便操作，我们可以编写一个脚本，每次进行执行</p><p>   我们执行 <code>echo $PATH</code> 命令，看到 <code>/home/yjr1100/bin</code> 目录也在环境变量中，这意味着我们在这个目录下写入的脚本，可以在任何目录下执行，就和在任何目录下都可以执行 <code>java</code> 这个命令一样。</p><p>   分别执行下面的命令可以实现在 <code>/home/yjr1100/bin/</code> 目录下写入 <code>xsync</code> 脚本，脚本名字可以随便写，这里就写 <code>xsync</code> </p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir bin</span><br><span class="line">cd bin</span><br><span class="line">vim xsync</span><br></pre></td></tr></table></figure><p>   在脚本中输入下面内容<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#1. 判断参数个数</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> Not Enough Arguement!</span><br><span class="line">     <span class="built_in">exit</span>;</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="comment">#2. 遍历集群所有机器</span></span><br><span class="line"> <span class="keyword">for</span> host <span class="keyword">in</span> hadoop102 hadoop103 hadoop104</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> <span class="built_in">echo</span> ====================  <span class="variable">$host</span>  ====================</span><br><span class="line">   <span class="comment">#3. 遍历所有目录，挨个发送</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">       <span class="comment">#4. 判断文件是否存在</span></span><br><span class="line">       <span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line">           <span class="keyword">then</span></span><br><span class="line">               <span class="comment">#5. 获取父目录</span></span><br><span class="line">               pdir=$(<span class="built_in">cd</span> -P $(<span class="built_in">dirname</span> <span class="variable">$file</span>); <span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line">               <span class="comment">#6. 获取当前文件的名称</span></span><br><span class="line">               fname=$(<span class="built_in">basename</span> <span class="variable">$file</span>)</span><br><span class="line">               ssh <span class="variable">$host</span> <span class="string">&quot;mkdir -p <span class="variable">$pdir</span>&quot;</span></span><br><span class="line">               rsync -av <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$host</span>:<span class="variable">$pdir</span></span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="built_in">echo</span> <span class="variable">$file</span> does not exists!</span><br><span class="line">       <span class="keyword">fi</span></span><br><span class="line">   <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>   写完脚本后，给脚本执行权限 <code>chmod 777 xsync</code></p>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021536051.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>现在我们就使用 <code>xsync</code> 同步 <code>bin</code> 目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~ </span><br><span class="line">xsync bin/</span><br></pre></td></tr></table></figure><p>如下图所示，输入服务器对应密码后，就成功的把 <code>xsync</code> 脚本分发给集群中的所有服务器了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021545302.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>如果我们使用<code>root</code>用户或者使用 <code>sudo</code> 来执行，一定要<strong>写全</strong> <code>xsync</code> 的路径，因为 <code>root</code> 用户的<code>$PATH</code> 里面没有 <code>/home/yjr1100/bin</code> 目录，所以找不到 <code>xsync</code> 命令，除非我们像java那样，在 <code>/etc/profile.d/</code> 目录下创建脚本。</p><h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><p>刚才执行脚本的时候，我们每次都要输入密码，这个比较麻烦，我们配置ssh免密登录</p><h3 id="免密登录的原理"><a href="#免密登录的原理" class="headerlink" title="免密登录的原理"></a>免密登录的原理</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021553717.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>  <h3 id="配置ssh免密登录"><a href="#配置ssh免密登录" class="headerlink" title="配置ssh免密登录"></a>配置ssh免密登录</h3><p>先配置102可以免密访问103，记得使用普通用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>输入命令后，三次回车，可以看到如下图，密钥已经生成好了，在 <code>/home/yjr1100/.ssh/</code> 下面有两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 分别是私钥和公钥</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021606475.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>  <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021609047.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>  <p>我们将公钥拷贝给 hadoop103 和 hadoop104 ,也可以拷贝给自己</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id hadoop103</span><br><span class="line">ssh-copy-id hadoop104</span><br><span class="line">ssh-copy-id hadoop102</span><br></pre></td></tr></table></figure><p>重复上面的步骤，配置hadoop103和hadoop104上对其他服务器的免密登录</p><p>注意，这个只是普通用户在三个服务器之间的免密登录，如果我们使用root用户进行ssh登录，但是我们并没有配置root用户的公钥和私钥，所以root用户ssh登录是需要密码的。</p><p>我们可以切换root用户，重复上面的步骤进行配置</p><p>下面我们再使用 <code>xsync</code> 来同步一下环境变量,z这个需要root权限，我们可以sudo执行，主要要写全 xsync 的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /home/yjr1100/bin/xsync /etc/profile.d/my_env.sh </span><br></pre></td></tr></table></figure><p>注意再hadoop103和hadoop104 上使用命令 <code>source /etc/profile</code> 让环境变量生效</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><h3 id="集群部署规划"><a href="#集群部署规划" class="headerlink" title="集群部署规划"></a>集群部署规划</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021745744.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>  <p>注意：</p><ol><li>NameNode和SecondaryNameNode不要安装在同一台服务器</li><li>ResourceManager也很消耗内存，不要和NameNode、SecondaryNameNode配置在同一台机器上。</li></ol><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>Hadoop配置文件分两类：<strong>默认配置文件</strong>和<strong>自定义配置文件</strong>，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。</p><ol><li>默认配置文件<table><thead><tr><th>要获取的默认文件</th><th>文件存放在Hadoop的jar包中的位置</th></tr></thead><tbody><tr><td>[core-default.xml]</td><td>hadoop-common-3.1.3.jar&#x2F;core-default.xml</td></tr><tr><td>[hdfs-default.xml]</td><td>hadoop-hdfs-3.1.3.jar&#x2F;hdfs-default.xml</td></tr><tr><td>[yarn-default.xml]</td><td>hadoop-yarn-common-3.1.3.jar&#x2F;yarn-default.xml</td></tr><tr><td>[mapred-default.xml]</td><td>hadoop-mapreduce-client-core-3.1.3.jar&#x2F;mapred-default.xml</td></tr></tbody></table></li><li>自定义配置文件<br>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在 <code>$HADOOP_HOME/etc/hadoop</code> 这个路径上，用户可以根据项目需求重新进行修改配置。</li></ol><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><ol><li><p>核心配置文件<br>配置 core-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/etc/hadoop</span><br><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><p>文件内容如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为yjr1100 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yjr1100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HDFS配置文件<br>配置hdfs-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><p>文件内容如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>YARN配置文件<br>配置yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><p>文件如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 这里环境变量的继承算是3.1的一个小bug，3.2以后就不用配置了</p></li><li><p>MapReduce配置文件<br>配置mapred-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><p>文件如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定MapReduce程序运行在Yarn上 默认是local --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="在集群上分发配置好的Hadoop配置文件"><a href="#在集群上分发配置好的Hadoop配置文件" class="headerlink" title="在集群上分发配置好的Hadoop配置文件"></a>在集群上分发配置好的Hadoop配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsync /opt/module/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><h2 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h2><h3 id="配置workers"><a href="#配置workers" class="headerlink" title="配置workers"></a>配置workers</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-3.1.3/etc/hadoop/workers</span><br></pre></td></tr></table></figure><p>内容就是集群中的服务器，注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></table></figure><p>同步所有节点配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsync /opt/module/hadoop-3.1.3/etc/hadoop/workers</span><br></pre></td></tr></table></figure><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><ol><li><p>如果集群是第一次启动，需要在hadoop102节点格式化NameNode（<strong>注意：格式化NameNode，会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化NameNode的话，一定要先停止namenode和datanode进程，并且要删除所有机器的data和logs目录，然后再进行格式化。</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure></li><li><p>启动HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/hadoop-3.1.3/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><p>输入 <code>jps</code> 可以查看当前服务器上的java进程的pid，此时hadoop102，hadoop103，hadoop104上的dfs服务都启动了</p></li><li><p>在配置了ResourceManager的节点（hadoop103）启动YARN,因为我们前面规划的ResourceManager在hadoop103上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/hadoop-3.1.3/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><p>同样，输入 <code>jps</code> 可以查看当前服务器上的java进程的pid，此时hadoop102，hadoop103，hadoop104上的yarn服务都启动了</p></li><li><p>Web端查看HDFS的NameNode</p><ul><li>浏览器中输入：<a href="http://hadoop102:9870/">http://hadoop102:9870</a><br> 注意：这里是在本机的电脑上输入，如果没有配置本机电脑上的<strong>hosts映射</strong>就<code>hadoop102</code>需要输入<code>ip</code>地址,<br> 我们可以修改 <code>C:\Windows\System32\drivers\etc\host</code> 文件，写入ip地址的映射 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.109.102 hadoop102</span><br><span class="line">192.168.109.103 hadoop103</span><br><span class="line">192.168.109.104 hadoop104</span><br></pre></td></tr></table></figure><ul><li>查看HDFS上存储的数据信息</li></ul></li></ul></li><li><p>Web端查看YARN的ResourceManager</p></li></ol><ul><li>浏览器中输入：<a href="http://hadoop103:8088/">http://hadoop103:8088</a><ul><li>查看YARN上运行的Job信息</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop运行环境搭建</title>
      <link href="/2022/08/01/Hadoop%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/08/01/Hadoop%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="模板虚拟机安装"><a href="#模板虚拟机安装" class="headerlink" title="模板虚拟机安装"></a>模板虚拟机安装</h1><h2 id="安装VMWare"><a href="#安装VMWare" class="headerlink" title="安装VMWare"></a>安装VMWare</h2><p>如果已经有就可以跳过了</p><p><a href="https://www.vmware.com/products/workstation-pro.html">官网下载</a><br> <a href="https://pan.baidu.com/s/1CQ6AztU0_pCsNGcBKPUXiQ">百度云下载 提取码 57jl</a><br>虚拟机的安装和正常的QQ安装都一样，一路下一步，如果需要更改安装路径，自行更改</p><p><img src="https://img-blog.csdnimg.cn/20200509072042123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200509072042126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200509074108465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200509072042106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020050907381796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200509072042105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5MTY4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后需要输入密钥，密钥这个东西，网上百度一堆堆， 希望大家支持正版，嗯，就是这样</p><h2 id="安装CentOS7"><a href="#安装CentOS7" class="headerlink" title="安装CentOS7"></a>安装CentOS7</h2><p>如果已经有CentOS7的虚拟机了，也没有必要重新安装，直接进行下一个环节<strong>配置</strong>就好了</p><p>首先要准备好镜像文件，这里百度网盘里我准备好了，也可以自己准备。<a href="https://pan.baidu.com/s/17VOJB357hBPCrW3GlqvHXw">百度云下载 提取码 1kvy</a></p><p>下面开始创建虚拟机</p><ol><li><p>选择创建新的虚拟机</p>  <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020802784.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择典型配置类型</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020803089.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择稍后安装操作系统</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020803769.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择系统版本</p>  <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020804809.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>自定义虚拟机名称和位置,这里名称可以自己随便写，只要自己知道就好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020806932.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择给系统分配的储存，暂时选择30g够用。这个不是一下就占30G，没有关系，存储为单个文件方便管理</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020910345.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择自定义硬件<br>  自定义硬件 这里我们取消打印机</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020912046.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020818362.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>  然后选择一下内存和CPU,内存和CPU分别给1G和2个，如果电脑自身内存比较大，也可以多给</li><li><p>我们可以看到这里就是我们创建的虚拟机了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020815147.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>点击编辑虚拟设置，加入我们之前准备好的镜像并设置网络</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020824287.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>网络模式我们选择NAT模式 <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020824882.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><p><strong>上面的步骤都做好后，就可以点击开启此虚拟机进行开机了</strong></p><ol><li><p>选择第一个，install CentOS 7，这里是用方向键来控制上下来选择的，回车确定</p>  <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020826453.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择语言</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020828230.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>设置时间和日期</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020836869.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>可以进行最小安装也可以安装桌面版的,这里我装一个桌面版的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020829494.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020829349.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择安装位置,按图中标号依次点击</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020838829.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020838675.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>手动设置分区</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020840934.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>分别创建&#x2F;boot区、swap交换分区、根分区&#x2F;</p><p>注释：Linux系统最简单的分区方案：</p><ul><li>分&#x2F;boot区，给200M，&#x2F;boot放启动文件。</li><li>分交换分区（交换空间）swap，看内存总大小，如果内存足够大，这个空间就要设置太大了。如果内存小于2G。那么这个空间设置成内存的2倍大小。</li><li>所有空间给&#x2F;（根分区）</li></ul><p>按照图中顺序进行操作<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020842220.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020843209.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br>依此类推，在点击加号，挂载其他分区如下图<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020845634.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020845406.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br>最后点击完成并接受更改<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020846701.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020847399.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p></li><li><p>设置KDUMP</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020848268.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020848062.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>设置网络和主机名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020850993.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020851409.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>上面都配置好后，点击开始安装，安装过程中，设置一下用户名密码</p>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020905547.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>再创建一个用户</p>   <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020907795.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>等一会安装完成后，点击重启就可以了，然后我们使用用户名密码进行登录<br>第一次登录要进行一些简单的想到操作，直接都点下一步过去就可以了，没有什么关系，需要输入许可证的话还是那句话，支持正版</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>首先设置一下网络，这里为了模拟实际的操作效果，我们还是使用远程登录的方式来操作虚拟机，所以作为一个服务器，ip地址不停变化是不可以的。</p><p>在VMWare的编辑中，选择虚拟网络编辑器</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020918369.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>查看NAT模式的子网IP，点击NAT设置，编辑网关</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020920192.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在windows的网络设置里，找到虚拟机NAT模式的网卡进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020922819.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>写好网关和DNS</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020922480.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在虚拟机中，切换到root用户，进行网络设置，<code>ens33</code> 是我们的网卡，在linux中一切皆文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure><p>编辑网卡配置，获取方式为 <code>static</code>，设置ip地址，网关，DNS</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020928154.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>创建网络映射，这个是什么概念就是每次我们都输入ip地址，比较抽象，我们用一个名字来映射ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>输入刚才配置的ip地址和想要对应的名字</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020935012.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h3><p>下面设置一下主机名，不论创建的时候是什么，我们都可以进行更改</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020937653.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>最后输入 <code>reboot</code> 重启一下生效</p><p>测试是否配置成功,输入<code>hostname</code>看是不是我们修改的，输入<code>ifconfig</code> 查看ip地址，最后 <code>ping baidu.com</code> 看能否连接到网络</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208020944117.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="安装几个包"><a href="#安装几个包" class="headerlink" title="安装几个包"></a>安装几个包</h3><ol><li>安装epel-release<br>注：Extra Packages for Enterprise Linux是为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux。相当于是一个软件仓库，大多数rpm包在官方 repository 中是找不到的）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li>注意：如果Linux安装的是最小系统版，还需要安装如下工具；如果安装的是Linux桌面标准版，不需要执行如下操作</li></ol><p><strong>net-tool</strong>：工具包集合，包含ifconfig等命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-tools </span><br></pre></td></tr></table></figure><p><strong>vim</strong>：编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>在企业开发时，通常单个服务器的防火墙时关闭的。公司整体对外会设置非常安全的防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h3 id="给普通用户root权限"><a href="#给普通用户root权限" class="headerlink" title="给普通用户root权限"></a>给普通用户root权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;sudoers文件，在%wheel这行下面添加一行，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line"></span><br><span class="line">## Allows people in group wheel to run all commands</span><br><span class="line">%wheel  ALL=(ALL)       ALL</span><br><span class="line"></span><br><span class="line">yjr1100   ALL=(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p><strong><code>yjr1100</code>这一行不要直接放到root行下面，因为所有用户都属于wheel组，先配置了<code>yjr1100</code>具有免密功能，但是程序执行到%wheel行时，该功能又被覆盖回需要密码。所以<code>yjr1100</code>要放到%wheel这行下面。</strong></p><h3 id="在-x2F-opt-目录下创建文件夹-并更改所属组"><a href="#在-x2F-opt-目录下创建文件夹-并更改所属组" class="headerlink" title="在&#x2F;opt 目录下创建文件夹 并更改所属组"></a>在&#x2F;opt 目录下创建文件夹 并更改所属组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/module</span><br><span class="line">mkdir /opt/software</span><br><span class="line">chown yjr1100:yjr1100 /opt/module </span><br><span class="line">chown yjr1100:yjr1100 /opt/software</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021018016.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="卸载虚拟机自带的JDK"><a href="#卸载虚拟机自带的JDK" class="headerlink" title="卸载虚拟机自带的JDK"></a>卸载虚拟机自带的JDK</h3><p>注意：如果虚拟机是最小化安装不需要执行这一步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]# rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps </span><br></pre></td></tr></table></figure><p>rpm -qa：查询所安装的所有rpm软件包<br>grep -i：忽略大小写<br>xargs -n1：表示每次只传递一个参数<br>rpm -e –nodeps：强制卸载软件</p><p>到此，我们的模板虚拟机已经安装好了</p><h1 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h1><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆前要先把当前虚拟机关机，然后进行克隆</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021029063.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>选择完整克隆，起个名字，选个位置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021029402.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021033905.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>重复上面的步骤，克隆 hadoop102，hadoop104</p><h2 id="修改ip和hostname"><a href="#修改ip和hostname" class="headerlink" title="修改ip和hostname"></a>修改ip和hostname</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021040405.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname hadoop102</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021043656.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>重复上面两个操作，把hadoop103、hadoop104 都进行修改，并在hadoop102，hadoop103，hadoop104的<code>/etc/hosts</code> 中都加入映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.109.100 hadoop100</span><br><span class="line">192.168.109.102 hadoop102</span><br><span class="line">192.168.109.103 hadoop103</span><br><span class="line">192.168.109.104 hadoop104</span><br></pre></td></tr></table></figure><p>最后我们在远程链接工具里进行链接就可以</p><h1 id="安装JDK和Hadoop"><a href="#安装JDK和Hadoop" class="headerlink" title="安装JDK和Hadoop"></a>安装JDK和Hadoop</h1><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>之前已经删除了自带的JDK，我们要自己准备JDK和Hadoop安装包。<a href="https://pan.baidu.com/s/18QYJy80eSr1EcxzPZaIvCg">百度云下载 提取码 9mzl </a></p><p>通过远程工具，将JDK和Hadoop安装包上传到hadoop102的服务器中放在 <code>/opt/software/</code>目录下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021114580.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用下面命令指定安装在 <code>/opt/module/</code> 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021121279.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>为java添加环境变量</p><p>查看 <code>/etc/profile</code> 文件中有如下内容，意思是读取 <code>/etc/profile.d/</code> 目录下的所有<code>.sh</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for i in /etc/profile.d/*.sh ; do</span><br><span class="line">    if [ -r &quot;$i&quot; ]; then</span><br><span class="line">        if [ &quot;$&#123;-#*i&#125;&quot; != &quot;$-&quot; ]; then</span><br><span class="line">            . &quot;$i&quot;</span><br><span class="line">        else</span><br><span class="line">            . &quot;$i&quot; &gt;/dev/null</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>所以我们去<code>/etc/profile.d/</code>目录下写一下java的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile.d/my_env.sh</span><br></pre></td></tr></table></figure><p>在文件中输入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#java 环境</span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>最后刷新一下环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>测试是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021144024.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>看到如图的回显，就是安装成功了</p><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><p>使用下面命令指定安装在 <code>/opt/module/</code> 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure><p>安装好后如图所示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021149345.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>把hadoop也添加到环境变量中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile.d/my_env.sh</span><br></pre></td></tr></table></figure><p>在文件中添加下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#java 环境</span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021152099.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>最后刷新一下环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>测试是否安装成功,直接输入hadoop，有如下回显则成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021156838.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="hadoop目录结构"><a href="#hadoop目录结构" class="headerlink" title="hadoop目录结构"></a>hadoop目录结构</h2><p>进入 hadoop安装目录，我们可以看到如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208021157272.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><code>bin</code>：此目录中存放 <code>Hadoop</code>、<code>HDFS</code>、<code>YARN</code> 和 <code>MapReduce</code> 运行程序和管理软件。<br><code>etc</code>：存放 <code>Hadoop</code> 配置文件。<br><code>include</code>: 类似 C 语言的头文件<br><code>lib</code>：本地库文件，支持对数据进行压缩和解压。<br><code>libexe</code>：同 lib<br><code>sbin</code>：Hadoop 集群启动、停止命令<br><code>share</code>：说明文档、案例和依赖 jar 包。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据概要</title>
      <link href="/2022/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A6%82%E8%A6%81/"/>
      <url>/2022/08/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A6%82%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h1><h2 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h2><p>大数据指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策能力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产</p><p>大数据主要解决，<strong>海量数据</strong>的<strong>采集</strong>、<strong>存储</strong>和<strong>分析计算</strong>问题。</p><h2 id="大数据的特点"><a href="#大数据的特点" class="headerlink" title="大数据的特点"></a>大数据的特点</h2><ol><li>大量<br>截至目前，人类生产的所有印刷材料的数据量是200PB，而历史上全人类总共说过的话的数据量大约是5EB。当前，典型个人计算机硬盘的容量为TB量级，而一些大企业的数据量已经接近EB量级。</li><li>高速<br>这是大数据区分于传统数据挖掘的最显著特征。根据IDC的“数字宇宙”的报告，预计到2025年，全球数据使用量将达到163ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。</li><li>多样<br>这种类型的多样性也让数据被分为<strong>结构化数据</strong>和<strong>非结构化数据</strong>。相对于以往便于存储的以数据库&#x2F;文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</li><li>低价值密度<br>价值密度的高低与数据总量的大小成反比。<br>比如，在一天监控视频中，我们只关心宋宋老师晚上在床上健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</li></ol><h2 id="大数据应用场景"><a href="#大数据应用场景" class="headerlink" title="大数据应用场景"></a>大数据应用场景</h2><ol><li>抖音视频推荐</li><li>电商广告推荐</li><li>零售：分析用户消费习惯，为用户购买商品提供方便</li><li>物流仓储：京东物理，上午下单送到</li><li>保险：海量数据挖掘及风险预测，助理保险行业精准营销，提升精细化定价能力</li><li>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险</li><li>房产：选出更合适的地，建合适的楼，卖合适的人 </li><li>人工智能+5G+物联网+虚拟现实</li></ol><h1 id="Hadoop概述"><a href="#Hadoop概述" class="headerlink" title="Hadoop概述"></a>Hadoop概述</h1><h2 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h2><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构</p><p>主要解决海量数据的存储和海量数据的分析计算问题</p><p>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈</p><p>Hadoop 创始人 Doug Cutting</p><h2 id="Hadoop优势"><a href="#Hadoop优势" class="headerlink" title="Hadoop优势"></a>Hadoop优势</h2><ol><li>高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失</li><li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点（比如6.18，双十一的时候，动态加节点）</li><li>高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度</li><li>高容错性：能够自动将失败的任务重新分配</li></ol><h2 id="Hadoop1-x、2-x、3-x区别"><a href="#Hadoop1-x、2-x、3-x区别" class="headerlink" title="Hadoop1.x、2.x、3.x区别"></a>Hadoop1.x、2.x、3.x区别</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208012028701.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="Hadoop组成"><a href="#Hadoop组成" class="headerlink" title="Hadoop组成"></a>Hadoop组成</h2><h3 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h3><p>Hadoop Distributed File System 简称 <strong>HDFS</strong> 是一个分布式文件系统</p><ol><li>NameNode（nn）：存储文件的元数据，<strong>如文件名，文件目录结构，文件属性</strong>，以及每个文件的块列表和块所在的DataNode等</li><li>DateNode（dn）：在<strong>本地文件系统存储文件块数据</strong>，以及块数据的校验和</li><li>Secondary NameNode（2nn）：每隔一段时间对NameNode元数据备份</li></ol><h3 id="YARN架构概述"><a href="#YARN架构概述" class="headerlink" title="YARN架构概述"></a>YARN架构概述</h3><p>Yet Another Resource Negotiator 简称 <strong>YARN</strong> ，是另一种资源协调者，是Hadoop的资源管理器</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208012047774.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li>ResourceManager（RM）：整个集群资源（内存，CPU）的老大</li><li>NodeManager（NM）：单个节点服务器资源老大</li><li>ApplicationMaster（AM）：单个任务运行的老大</li><li>Container：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，比如内存，CPU，硬盘，网络等。</li></ol><p>注意：</p><ul><li>客户端可以有多个</li><li>集群上可以运行多个ApplicationMaster</li><li>每隔NodeManager上可以有多个Container</li></ul><h3 id="MapReduce架构概述"><a href="#MapReduce架构概述" class="headerlink" title="MapReduce架构概述"></a>MapReduce架构概述</h3><p>计算过程分为两个阶段 Map 和 Reduce</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208012051902.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li>Map阶段并行处理输入数据</li><li>Reduce阶段对Map结果进行汇总</li></ol><h3 id="HDFS、YARN、MapReduce三者关系"><a href="#HDFS、YARN、MapReduce三者关系" class="headerlink" title="HDFS、YARN、MapReduce三者关系"></a>HDFS、YARN、MapReduce三者关系</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208012054954.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>NameNode 来告诉别人数据存储在哪个节点，DateNode就是实在的在本地进行数据存储，SecondaryNameNode，备份的数据进行NameNode挂了后进行部分数据恢复。ResourceManager负责整个集群资源的管理，此时来了一个客户，向集群提交了一个任务，任务过来后，ResourceManager就会找一个节点，开启一个Container，然后把任务ApplicationManager放在里面，App Manager就会向ResourceManager申请资源，ResourceManager就会进行调度，在有相应资源的节点上开启Container放入资源，最后任务Map阶段进行完后，汇总进行Reduce阶段，把结果写到HDFS上</p><h2 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202208012116656.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li>Sqoop：Sqoop是一款开源的工具，主要用于在Hadoop、Hive与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</li><li>Flume：Flume是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据； </li><li>Kafka：Kafka是一种高吞吐量的分布式发布订阅消息系统； </li><li>Spark：Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算。</li><li>Flink：Flink是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。</li><li>Oozie：Oozie是一个管理Hadoop作业（job）的工作流程调度管理系统。</li><li>Hbase：HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</li><li>Hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</li><li>ZooKeeper：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础学习</title>
      <link href="/2022/05/11/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/11/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学概述"><a href="#密码学概述" class="headerlink" title="密码学概述"></a>密码学概述</h1><p>密码学是研究<strong>编制密码</strong>和<strong>破译密码</strong>的技术科学，使信息保密的技术和科学叫<strong>密码编码学</strong>，破译密文的科学与技术叫<strong>密码分析学</strong></p><p>密码学是数学和计算机科学的分支，同时其原理大量涉及<strong>信息论</strong>。</p><p>著名的密码学者罗纳德•李维斯特——密码学是关于如何在敌人存在的环境中通信。</p><h2 id="信息安全的基本模型"><a href="#信息安全的基本模型" class="headerlink" title="信息安全的基本模型"></a>信息安全的基本模型</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111416806.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="加密密码示意图"><a href="#加密密码示意图" class="headerlink" title="加密密码示意图"></a>加密密码示意图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111417214.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="密码学的历史与发展"><a href="#密码学的历史与发展" class="headerlink" title="密码学的历史与发展"></a>密码学的历史与发展</h2><p><strong>第一阶段（1949年前）古典密码发展阶段</strong></p><ul><li>隐写术，暗语、隐语、藏头诗等&gt;</li><li>采用手工或机械变换的方式实现</li><li>单表代换密码：Caesar密码、仿射密码</li><li>多表代换密码：Vigenere、Hill密码等</li><li>转轮密码：Enigma、Red密码等</li></ul><p><strong>第二阶段：近代密码学阶段(1949~1976)</strong></p><ul><li>1949年，Shannon发表了《保密系统的通信理论》，用信息论的观点分析了密码学的基本原理，奠定了密码学的理论基础。</li><li>1967年David Kahn出版了《破译者》一书。</li></ul><p><strong>第三阶段：现代密码学阶段(1976~至今)</strong></p><ul><li>1976年，Diffie、Hellman发表《密码学新方向》，开辟了公钥密码学的新领域；</li><li>1976年，美国建立DES为联邦标准</li><li>现代密码学的主要方向<ul><li>混沌密码学：混沌加密的基本原理是利用混沌系统产生混沌序列作为密钥序列，接收方用混沌同步的方法将明文信号提取出来实现解密。</li><li>量子密码学：量子密码学泛指利用量子力学的特性来加密的科学。任何试图尝试读取量子态的行动，都会改变量子态本身</li></ul></li></ul><h2 id="密码体制分类"><a href="#密码体制分类" class="headerlink" title="密码体制分类"></a>密码体制分类</h2><p><strong>受限制的(restricted)算法</strong>：算法的保密性基于保持算法的秘密，<br><strong>基于密钥(key-based)的算法</strong>：算法的保密性基于对密钥的保密。</p><p><strong>优秀密码算法应该是基于密钥的保密，而非算法的保密。</strong></p><p>现代密码学用密钥解决问题，密钥用K表示。K可以是很多值里的任意值,密钥K的可能值的范围叫做<strong>密钥空间</strong>(keyspace)。</p><p>如加密和解密都用一个密钥，加&#x2F;解密函数变成：</p><blockquote><p>E<sub>K</sub>(M)&#x3D;C<br>D<sub>k</sub>(C)&#x3D;M<br>D<sub>k</sub>(E<sub>k</sub>(M))&#x3D;M</p></blockquote><p><strong>单钥体制，对称加密</strong></p><ul><li>加密密钥和解密密钥相同</li><li>流密码</li><li>分组密码</li></ul><p><strong>双钥体制，非对称加密</strong></p><ul><li>1976年，Diffie和Hellman首先引入</li><li>一对密钥：公钥和私钥</li></ul><h2 id="密码攻击概述"><a href="#密码攻击概述" class="headerlink" title="密码攻击概述"></a>密码攻击概述</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111425249.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>算法的安全性</p><p>如果破译算法的代价大于加密数据价值，那么加密算法是安全的。</p><p>如果破译算法所需的时间比加密数据保密的时间长，那么你可能是安全的。</p><hr><h1 id="编码与密码"><a href="#编码与密码" class="headerlink" title="编码与密码"></a>编码与密码</h1><h2 id="编码基础"><a href="#编码基础" class="headerlink" title="编码基础"></a>编码基础</h2><h3 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h3><p>ASCII (American Standard Code for Information Interchange,美国信息交换标准代码)是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p><p>ASCII是现今最通用的单字节编码系统，并等同于国际标准ISO&#x2F;IEC 646。</p><p>标准ASCI川码也叫基础ASCII码，使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0到9、标点符号。</p><p>后128个称为扩展ASCII码。许多基于x86的系统都支持使用扩展ASCII。扩展ASCII码允许将每个字符的第8位用于确定附加的128个特殊符号字符、外来语字母和图形符号。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111431791.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>ASC川因为只有8位长，只能表达256种字符。所以不能满足其它国家需求，Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。使用16位的编码空间。也就是每个字符占用2个字节。</p><p>**UTF-8(8-bit Unicode Transformation Format)**是一种针对Unicode的可变长度字符编码，在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同，所以有UTF。UTF-8使用一至六个字节为每个字符编码</p><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。每6个比特为一个单元，对应某个可打印字符除了A-Z,a-z,0-9共62个字符还有<code>+</code>、<code>/</code>，最后用<code>=</code>填充不能被3整除的空位。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111438905.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="古典密码学"><a href="#古典密码学" class="headerlink" title="古典密码学"></a>古典密码学</h2><p>主要考虑消息的保密性，对于完整性和不可否认性没有太多考虑</p><p>古典密码的加密是将明文的每个字母代换为字母表中的另一个字母，根据代换是对每个字母逐个进行还是对多个字母同时进行，古典密码又分为<strong>单表代换</strong>和<strong>多表代换</strong></p><h2 id="单表代换"><a href="#单表代换" class="headerlink" title="单表代换"></a>单表代换</h2><p>通用特点：对每个字母逐个进行替换</p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码加密时将明文中的每个字母按字母表顺序向前或向后移动固定数目，作为密文。</p><p><strong>如偏移量是左移3为例</strong></p><blockquote><p>明文：ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>密文：DEFGHIJKLMNOPQRSTUVWXYZABC</p></blockquote><h3 id="移位密码"><a href="#移位密码" class="headerlink" title="移位密码"></a>移位密码</h3><p>与凯撒密码类似，最早的凯撒密码是固定左移3位。</p><p>区别在于移位密码可以任意移动，后期不仅处理26个字母，还会处理数字和特殊字符。参照ASCII码表进行位移。</p><h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111507869.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>乘法逆元： <strong>a*a<sup>-1</sup>(mod m) &#x3D; 1</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111508578.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111509698.png"></p><h2 id="多表替换"><a href="#多表替换" class="headerlink" title="多表替换"></a>多表替换</h2><p>加密方式使用多个表，解决单表加密的频率分析问题</p><h3 id="Playfair"><a href="#Playfair" class="headerlink" title="Playfair"></a>Playfair</h3><p>该算法基于5*5的字母矩阵，该矩阵使用一个<strong>关键词构造</strong>（即密钥），从左到右、从上到下顺序，填入关键词的字母（去除重复字母）后，将字母表其作余字母填入。(I&#x3D;J)</p><p>将明文两个分为一组，若出现相同字母，则用X替代最后字母。</p><p><strong>在每组中，查找矩阵替换：</strong></p><ul><li>若两个字母同行，则用右方字母替换若</li><li>两个字母同列，则用下方字母替换</li><li>若即不同行也不同列，则用矩阵对角字母替换</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111518402.png"></p><h3 id="polybius"><a href="#polybius" class="headerlink" title="polybius"></a>polybius</h3><p>又称棋盘密码。将给定明文加密为两两组合的特征加密后结果只有5种字符,ADFGX密码是德军在一战中使用的栏块密码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111519575.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：A  T  T  A  C  K  A  T  O  N  C  E</span><br><span class="line">密文：AF AD AD AF GF DX AF AD DF FX GF XF</span><br></pre></td></tr></table></figure><h3 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h3><p>使用26个字母构成字母矩阵横行为明文列，纵向为密钥列</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111525105.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>明文：come greatwall<br>密钥：crypto</p><p>扩充密钥与明文一样长：efktzferrltzn</p><h2 id="其他类型密码"><a href="#其他类型密码" class="headerlink" title="其他类型密码"></a>其他类型密码</h2><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p>用两种不同的字体，代表A和B，或者0和1，结合加密表进行加密。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111527343.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>明文：steganography<br>正常字体是A，粗体是B，加密结果如图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111528963.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p>把明文分成N个一组，然后每组的第1个字连起来，然后连第2个….</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111530092.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111531242.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p><strong>对称密码主要特征就是加密和解密使用相同的密钥，也叫单密钥加密</strong></p><p><strong>根据加密对象分为</strong></p><ol><li><p>流加密，每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文。典型算法<strong>RC4</strong></p></li><li><p>块加密，块密码算法也叫分组密码算法，从字面意思就可以知道，它把加密和解密序列分成了一个个分组，最后把每一块序列合并到一起，形成明文或者密文。根据不同的分组加密方式，每个分组之间可以有联系，也可以没有联系。典型算法是<strong>DES和AES</strong></p></li></ol><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>RC4应用广泛，是典型的流加密算法。常见用于SSL&#x2F;TLS,及802.11和WAP中。</p><p>流加密会逐字节加密数据，RC4本质是以密钥为种子(seed)产生的随机数来对明文进行逐字节异或，分组密码与流密码的区别就在于有无记忆性。</p><p>每次只加密明文中的一个字节，密钥长度可变，1-256字节</p><p>介绍RC4算法的几个关键变量：</p><ol><li><p>密钥流：RC4算法的关键是根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说明文的长度是500字节，那么密钥流也是500字节。当然，加密生成的密文也是500字节，因为密文第i字节&#x3D;明文第i字节^密钥流第i字节； </p></li><li><p>状态向量S：长度为256，S[0],S[1]…..S[255]。每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换；</p></li><li><p>临时向量T：长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给T，否则，轮转地将密钥的每个字节赋给T；</p></li><li><p>密钥K：长度为1-256字节，注意密钥的长度keylen与明文长度、密钥流的长度没有必然关系，通常密钥的长度16字节（128比特）。</p></li></ol><p><strong>基本流程</strong></p><ol><li>初始化S和T</li><li>计算排列S,j从0到255</li><li>产生与明文等长的密钥流</li><li>加密运算</li></ol><p><strong>算法描述</strong></p><p><strong>S和T的初始状态：</strong> S中元素的值按升序被置为0-255，同时建立一个临时向量T。将密钥的值循环复制到T向量中。</p><p>S的初始置换，用T产生S的初始置换，伪代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">j=0</span><br><span class="line">for (i = 0;i&lt;256;i++)&#123;</span><br><span class="line">    j = (j+S[i]+T[i]) mod 256;</span><br><span class="line">    swap(S[i],S[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>密钥流生成伪代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i,j = 0;</span><br><span class="line">while(true)&#123;</span><br><span class="line">    i = (i+1)mod 256</span><br><span class="line">    j = (j+S[i]) mod 256;</span><br><span class="line">    swap(S[i],S[j]);</span><br><span class="line">    t = (S[i]+S[j]) mod 256;</span><br><span class="line">    k = S[t];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111903439.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>数据加密标准(data encryption standard,DES)是迄今为止世界上最为广泛使用和流行的一种分组密码算法,它的分组长度为64比特，密钥长度为56比特，由美国IBM公司研制</p><p>DES在1975年3月17日首次被公布在联邦记录中，经过大量的公开讨论后于1977年1月15日被正式批准并作为美国联邦信息处理标准</p><p>1998年5月美国EFF(electronics frontier foundation)宣布，他们以一台价值20万美元的计算机改装成的专用解密机，用56小时破译了56比特密钥的DES</p><p><strong>DES介绍</strong></p><p>明文分组长 64 bit</p><p>密钥 56 bit</p><p>明文处理：3个阶段</p><ul><li>初始置换IP</li><li>16轮变换</li><li>逆初始置换1P<sup>-1</sup></li></ul><p>密钥处理：</p><ul><li>置换函数</li><li>左循环移位+置换-&gt;子密钥</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111906040.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111911398.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111912808.png"></p><p>F中的代换由8个S盒组成，每个S盒的输入比特为6bit，输出长为4bit，其变换关系由表定义，每个S盒给出了4个代换</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111914972.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>密钥的产生：</strong></p><p>56比特密钥首先经过一个<strong>置换运算</strong>，然后将置换后的56比特分为各为28比特的左、右两半，分别记为C0和D0。</p><p>在第i轮分别对C<sub>i-1</sub>和D<sub>i-1</sub>进行左循环移位，所移位数由表给出。</p><p>移位后的结果作为求下一轮子密钥的输入，同时也作为置换选择2的输入。通过置换选择2产生的48比特的Ki,即为本轮的子密钥，作为函数F(R<sub>i-1</sub>,K)的输入。其中置换选择2由表定义。</p><p>为了提高DES的安全性，并利用实现DES的现有软硬件，可将DES算法在多密钥下多重使用，比如2DES、3DES</p><p><strong>DES的加密模式</strong></p><p>分组密码在加密时，明文分组的长度是固定的，而实际应用中待加密消息的数据量是不定的，数据格式可能是多种多样的。为了能在各种应用场合使用DES,美国在FIPS PUS74和81中定义了DES的4种运行模式</p><p>这些加密模式大都可以归类为两种，即<strong>ECB模式</strong>和<strong>CBC模式</strong></p><ol><li><p><strong>ECB</strong>全称为Electronic CodeBook,是块加密中比较简单的加密模式。在ECB模式中，每一块明文数据都被独立地进行加密来生成加密块。这意味着如果你发现两个加密块有相同的内容，那么就可以确定这两个加密块的原文也是相同</p></li><li><p><strong>CBC</strong>全称为Cipher-Block Chaining,算是最常见的块加密模式了。在CBC模式中，每个明文块都会在加密前被使用前一个明文块的秘文进行异或；解密过程侧正好相反。其中第一个明文块会使用V即初始化向量进行异或。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205111923347.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="AES介绍"><a href="#AES介绍" class="headerlink" title="AES介绍"></a>AES介绍</h2><p>1997年4月15日，美国ANSl发起征集AES(advanced encryptionstandard)的活动，并为此成立了AES工作小组。</p><p>1998年8月，在首届AES候选会议上公布了AES的15个候选算法。</p><p>1999年3月，在第2届AES候选会议上经过对全球各密码机构和个人对候选算法分析结果的讨论，从15个候选算法中选出了5个。</p><p>2000年10月，NIST宣布Rijndael作为新的AES。至此，经过3年多的讨论，Rijndael终于脱颖而出。</p><h3 id="Rijndael"><a href="#Rijndael" class="headerlink" title="Rijndael"></a>Rijndael</h3><p>Rijndael由比利时的Joan DDaemen和Vincent Rijmen设计，算法的原型是Square.算法，它的设计策略是宽轨迹策略。</p><p>宽轨迹策略是针对差分分析和线性分析提出的，它的最大优点是可以给出算法的最佳差分特征的概率及最佳线性逼近的偏差的界。</p><p>Rijndael密码的设计力求满足以下3条标准：</p><ul><li>抵抗所有已知的攻击。</li><li>在多个平台上速度快，编码紧凑</li><li>设计简单。</li></ul><p>优点：加解密速度快、安全性好、适合大量数据加密</p><h2 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h2><p>差分密码分析是迄今已知的攻击迭代密码最有效的方法之一，其基本思想是：<strong>通过分析明文对的差值对密文对的差值的影响来恢复某些密钥比特。</strong></p><p>线性密码分析是对迭代密码的一种已知明文攻击，它利用的是密码算法中的“不平衡（有效）的线性逼近”</p><hr><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>1976年以前，所有的加密方法都是同一种模式：加解密双方使用相同算法，相同密钥来进行运算得到结果。这种加密模式有一个最大弱点：甲方必须把加密规则与密钥告诉乙方，否则无法解密。保存和传递密钥，就成了最头疼的问题。</p><p>公钥密码体制以<strong>非对称</strong>的形式解决单钥密码体制中最难解决的两个问题：<strong>密钥分配</strong>和<strong>数字签名</strong></p><p>1976年，Diffie和Hellman提出公钥密码思想，可以在不直接传递密钥的情况下，完成解密。这被称为”Diffie-Hellman密钥交换算法”</p><p>RSA算法是1978年由R.Rivest,A.Shamir和L.Adleman提出的一种用数论构造的、也是迄今为止理论上最为成熟完善的公钥密码体制，该体制已得到广泛的应用。</p><h2 id="公钥密码体制算法条件"><a href="#公钥密码体制算法条件" class="headerlink" title="公钥密码体制算法条件"></a>公钥密码体制算法条件</h2><p>产生一对密钥是计算可行的</p><p>已知公钥、明文，产生密文是计算可行的</p><p>利用私钥、密文，得到明文是计算可行的</p><p>利用公钥来推断私钥是计算不可行的</p><p>利用公钥、密文，得到明文是计算不可行的</p><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121026040.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121029598.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121029522.png"></p><hr><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><h2 id="公钥体制的密钥管理"><a href="#公钥体制的密钥管理" class="headerlink" title="公钥体制的密钥管理"></a>公钥体制的密钥管理</h2><p>公钥的分配方法：公开发布、公用目录表、公钥管理机构、公钥证书</p><p>公钥分配完成后，用户就可以使用公钥体制进行保密通信。但是公钥加密速度慢，进行通信时不太合适。此时更适合使用<strong>对称加密</strong>来通信。由此引申出<strong>对称加密的密钥分配管理问题</strong>。</p><p>Diffie-Hellman密钥交换是W.Diffie和M.Hellman于1976年提出的第一个<strong>公钥密码算法</strong>，算法的惟一目的是使得两个用户能够安全地<strong>交换密钥</strong>，<strong>得到一个共享的会话密钥</strong>，算法本身不能用于加、解密。算法的<strong>安全性基于求离散对数的困难性</strong>。</p><h2 id="Diffie-Hellman算法"><a href="#Diffie-Hellman算法" class="headerlink" title="Diffie-Hellman算法"></a>Diffie-Hellman算法</h2><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121454844.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121454051.png"></p><h2 id="单密钥加密体制密钥分配"><a href="#单密钥加密体制密钥分配" class="headerlink" title="单密钥加密体制密钥分配"></a>单密钥加密体制密钥分配</h2><p>在大量用户需要互相通信时，单密钥体制，会使用大量密钥。如有n个用户要互相通信，此时需要<strong>n(n-1)&#x2F;2</strong>个密钥此时密钥管理是一个严重的风险问题。</p><p>引入KDC来解决这个问题，<strong>密钥分发中心KDC</strong>和每个终端用户都共享一对唯一的主密钥（用物理的方式传递，如U盾)。终端用户之间每次会话，都要向KDC申请唯一的会话密钥，<strong>会话密钥通过与KDC共享的主密钥加密来完成传递。</strong></p><h3 id="基于KDC的单密钥分配"><a href="#基于KDC的单密钥分配" class="headerlink" title="基于KDC的单密钥分配"></a>基于KDC的单密钥分配</h3><p><strong>建立一个共享的一次性会话密钥，可通过以下几步来完成：</strong></p><ol><li>A向KDC发出会话密钥请求。表示请求的消息由两个数据项组成，第1项是A和B的身份，第2项是这次业务的惟一识别符N1。</li><li>KDC为A的请求发出应答。应答是由KA加密的消息，因此只有A才能成功地对这一消息解密，并且A可相信这一消息的确是由KDC发出的。</li><li>A存储会话密钥，并向B转发E<sub>KB</sub>[K<sub>S</sub> ||ID<sub>A</sub>]。因为转发的是由K加密后的密文,所以转发过程不会被窃听。B收到后，可得会话密钥K<sub>S</sub>,并从ID<sub>A</sub>可知另一方是A,而且还从E<sub>KB</sub>知道K<sub>S</sub>的确来自KDC。</li><li>B用会话密钥K<sub>S</sub>加密另一个一次性随机数N2,并将加密结果发送给A。</li><li>A以f(N2)作为对B的应答，其中f是对N2进行某种变换（例如加1）的函数，并将应答用会话密钥加密后发送给B。</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121502661.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="无KDC的密钥分配"><a href="#无KDC的密钥分配" class="headerlink" title="无KDC的密钥分配"></a>无KDC的密钥分配</h3><p>两个用户A和B建立会话密钥需经过以下3步(A与B已经有共享主密钥)</p><ol><li>A向B发出建立会话密钥的请求和一个一次性随机数N1。</li><li>B用与A共享的主密钥MKm对应答的消息加密，并发送给A。应答的消息中有B选取的会话密钥、B的身份、f(N1)和另一个一次性随机数N2。</li><li>A使用新建立的会话密钥Ks对f(N,)加密后返回给B。</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121504128.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="公钥加密体制的密钥管理"><a href="#公钥加密体制的密钥管理" class="headerlink" title="公钥加密体制的密钥管理"></a>公钥加密体制的密钥管理</h2><h3 id="基于公钥管理机构的公钥分配"><a href="#基于公钥管理机构的公钥分配" class="headerlink" title="基于公钥管理机构的公钥分配"></a>基于公钥管理机构的公钥分配</h3><ol><li>用户A向公钥管理机构发送带时戳的消息，请求获取用户B的公钥。</li><li>管理机构作出应答，该消息由管理机构用自己的私钥SKAU加密，因此A能用管理机构的公开钥解密，并确认该消息的真实性。</li><li>A用B的公钥对一个消息加密发往B,这个消息有两个数据项：一是A的身份IDA,二是一个一次性随机数N1,用于惟一地标识这次业务。</li><li>B以相同方式从管理机构获取A的公开钥（与步骤①、②类似）。这时，A和B都已安全地得到了对方的<strong>公钥</strong>，所以可进行保密通信。</li><li>B用PKA对一个消息加密后发往A,该消息的数据项有A的一次性随机数N1和B产生的一个一次性随机数N2。因为只有B能解密③的消息，所以A收到的消息中的N1可使其相信通信的另一方的确是B。</li><li>A用B的公开钥对N2加密后返回给B,可使B相信通信的另一方的确是A。</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121511645.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="基于公钥证书管理公钥"><a href="#基于公钥证书管理公钥" class="headerlink" title="基于公钥证书管理公钥"></a>基于公钥证书管理公钥</h3><p>用户通过公钥证书来互相交换自己的公钥而无须与公钥管理机构联系。公钥证书由证书管理机构CA(certificate authority)为用户建立，其中的数据项有与该用户的秘密钥相匹配的公开钥及用户的身份和时戳等。</p><p>所有的数据项经CA用自己的秘密钥签字后就形成证书，即证书的形式为：CA&#x3D;E<sub>SKCA</sub>[T,ID<sub>A</sub> ,PK<sub>A</sub>]</p><p>ID<sub>A</sub>是用户A的身份，PK<sub>A</sub>是A的公钥，T是当前时戳，SK<sub>CA</sub>是CA的秘密钥，CA即是为用户A产生的证书</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121548445.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><p>哈希函数也可以称为<strong>杂凑函数</strong><br>哈希函数H是公开函数，用于将任意长的消息M映射为较短的、固定长度的一个值H(M),称函数值H(M)为杂凑值、哈希值或消息摘要。</p><h2 id="哈希算法的条件"><a href="#哈希算法的条件" class="headerlink" title="哈希算法的条件"></a>哈希算法的条件</h2><p>哈希函数的目的是为需认证的数据产生一个“指纹”。为了能够实现对数据的认证，哈希函数应满足以下条件：</p><ol><li>函数的输入可以是任意长。</li><li>函数的输出是固定长。</li><li>已知x,求H()较为容易，可用硬件或软件实现。</li><li>已知h,求使得H(x)&#x3D;h的x在计算上是不可行的，这一性质称为函数的单向性，称H(X)为单向杂凑函数。</li><li>已知x,找出y(y≠x)使得H(y)&#x3D;H(x)在计算上是不可行的。如果单向杂凑函数满足这一性质，则称其为弱单向杂凑函数。</li><li>找出任意两个不同的输入X、y,使得H(y)&#x3D;H(x)在计算上是不可行的。如果单向杂凑函数满足这一性质，则称其为强单向杂凑函数。</li></ol><p><strong>第⑤和第⑥个条件给出了杂凑函数无碰撞性的概念，如果杂凑函数对不同的输入可产生相同的输出，则称该函数具有碰撞性。</strong></p><h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><p>MD5算法采用迭代型杂凑函数的一般结构。算法的输入为任意长的消息，分为512比特长的分组，输出为128比特的消息摘要。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121603185.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>MD5的处理步骤</strong></p><ol><li>对消息填充，使得其比特长在模512下为448。</li><li>附加消息的长度用步骤①留出的64比特以little-endian方式来表示消息被填充前的长度。如果消息长度大于264，则以264为模数取模。</li><li>对MD缓冲区初始化算法使用128比特长的缓冲区以存储中间结果和最终杂凑值，缓冲区可表示为4个32比特长的寄存器（A,B,C,D）</li><li>以分组为单位对消息进行处理每一分组都经一压缩函数HMD5处理。H<sub>MD5</sub>是算法的核心。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205121605834.png"></p><h2 id="MD5的安全性"><a href="#MD5的安全性" class="headerlink" title="MD5的安全性"></a>MD5的安全性</h2><p>目前对MD5的攻击已取得以下结果</p><ol><li>对单轮MD5使用差分密码分析，可在合理的时间内找出具有相同杂凑值的两个消息。</li><li>可找出一个消息分组和两个相关的链接变量（即缓冲区变量ABCD)，使得算法产生出相同的输出。</li><li>对单个512比特长的消息分组已成功地找出了碰撞，即可找出另一个消息分组，使得算法对两个消息分组的128比特长的输出相同。</li></ol><hr><h1 id="数字签名和电子证书"><a href="#数字签名和电子证书" class="headerlink" title="数字签名和电子证书"></a>数字签名和电子证书</h1><h2 id="数字签名的性质"><a href="#数字签名的性质" class="headerlink" title="数字签名的性质"></a>数字签名的性质</h2><ol><li><p>能够验证签字产生者的身份，以及产生签字的日期和时间</p></li><li><p>能够用于证实被签消息的内容</p></li><li><p>数字签字可由第三方验证，从而能够解决通信双方的争议</p></li></ol><h2 id="数字签名的要求"><a href="#数字签名的要求" class="headerlink" title="数字签名的要求"></a>数字签名的要求</h2><p>为了实现上述的3个性质，数字签名应该满足以下要求：</p><p>签字的产生必须使用发方独有的一些信息以防伪造和否认。</p><p>签字的产生应较为容易。</p><p>签字的识别和验证应较为容易。</p><p>对已知的数字签字构造一新的消息或对已知的消息构造一假冒的数字签字在计算上都是不可行的。</p><h2 id="数字签名标准"><a href="#数字签名标准" class="headerlink" title="数字签名标准"></a>数字签名标准</h2><p>数字签字标准DSS(Digital Signature Standard)是由美国NIST公布的联邦信息处理标准FIPS PUB186,其中采用了上一章介绍的SHA和一种新的签字技术，称为DSA(Digital Signature Algorithm)。DSS最初于1991年公布，在考虑了公众对其安全性的反馈意见后，于1993年公布了其修改版。</p><p><strong>DSS与RSA</strong><br>RSA算法既能用于加密和签名，又能用于密钥交换<br>DSS使用的算法只能提供数字签字功能</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205131952912.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>DSA步骤</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205131953995.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>p g q为全局公开钥,x为用户私钥,y为用户公钥,k为用户秘密选取的随机数。最终签名为(r,s)，r由一系列公钥算出，s由消息原文算出。r可用于第三方验证s用于完整性与真实性</p><h2 id="X-509证书"><a href="#X-509证书" class="headerlink" title="X.509证书"></a>X.509证书</h2><p>X.509是密码学里公钥证书的格式标准</p><p>X.509证书己应用在包括TLS&#x2F;SSL在内的众多Intenet协议里</p><p>X.509证书里含有公钥、身份信息（比如网络主机名，组织的名称或个体名称等）和签名信息</p><p>X.509的格式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205131955750.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>X.509有多种常用的扩展名。但具有这个扩展名的文件可能并不是证书，比如说可能只是保存了私钥</p><p><code>.pem</code> DER编码的证书再进行Base64编码后存放在”<strong>—BEG引NCERTIFICATE—</strong>“和”<strong>—END CERTIFICATE—</strong>“之中<br><code>.cer</code>,<code>.crt</code>,<code>.der</code> 通常是DER二进制格式的，也可Base64编码。<br><code>.p7b</code>,<code>.p7c</code> PKCS#7是签名或加密数据的格式标准，不包含数据<br><code>.p12</code> PKCS#12格式，包含证书的同时可能还有带密码保护的私钥<br><code>.pfx</code> PFX,PKCS#12之前的格式（通常用PKCS#12格式，比如那些由IIS产生的PFX文件）</p><p><strong>X.509申请过程</strong></p><p>组织机构通过发起证书签名请求(CSR)来得到一份签名的证书。</p><p>CSR包含有请求发起者的身份信息，用来对此请求进行验真的的公钥以及所请求证书专有名称。</p><p>CA对这个专有名称发布一份证书，并绑定一个公钥。</p><p>组织机构可以把受信的根证书分发给所有的成员（现在操作系统、浏览器都已内置了知名的CA根证书）</p><h2 id="SSL-x2F-TLS"><a href="#SSL-x2F-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h2><p>X.509证书广泛应用在SSL&#x2F;TLS协议中，即我们常见的HTTPS站点</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205132000343.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>client hello<br>客户端发起请求，以明文传输请求信息，包含版本信息，加密套件候选列表，压缩算法候选列表，随机数，扩展字段等信息，支持的最高TSL协议版本version,从低到高依次SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2<br>客户端支持的加密套件cipher suites列表，每个加密套件对应四个功能的组合：认证算法Au(身份验证)、密钥交换算法KeyExchange、对称加密算法和信息摘要Mac<br>随机数random C,用于后续的密钥的生成</p></li><li><p>server_hello+server_certificate+sever_hello_done<br>server_hello,服务端返回协商的信息结果<br>server_certificates,服务器端配置对应的证书链，用于身份验证与密钥交换；<br>server_hello_done,通知客户端server hello信息发送结束；</p></li><li><p>证书校验<br>客户端验证证书的合法性，如果验证通过才会进行后续通信，否则根据错误情况不同做出提示和操作，合法性验证包括如下：</p><ul><li><strong>证书链</strong>的可信性trusted certificate path,方法如前文所述；</li><li><strong>证书是否吊销</strong>revocation,有两类方式离线CRL与在线OCSP,不同的客户端行为会不同；</li><li><strong>有效期</strong>expiry date,证书是否在有效时间范围：</li><li><strong>域名</strong>domain,核查证书域名是否与当前的访问域名匹配；</li></ul></li><li><p>client_key_exchange+change_cipher_spec+encrypted_handshake_message</p></li><li><p>change_cipher_spec+encrypted_handshake_message</p></li><li><p>握手结束</p></li><li><p>加密通信<br>服务器也可以要求验证客户端，即<strong>双向认证</strong>，可以在过程2要发送client_certificate_request信息。在4中回复信息。</p></li></ol><p>4和5主要用于交换密钥</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层协议学习</title>
      <link href="/2022/05/10/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/10/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="传输层概述"><a href="#传输层概述" class="headerlink" title="传输层概述"></a>传输层概述</h1><p>两个主机进行通信实际上就是两个主机中的<strong>应用进程</strong>互相通信。IP地址是标识在因特网中的一个主机，而不是标识主机中的应用进程。传输层的一个重要功能就是<strong>复用和分用。</strong> 传输层提供应用进程间的逻辑通信。“逻辑通信”的意思是当应用进程的报文到达传输层后，从效果上看，就好像是直接沿水平方向传送到远地的传输层。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101512077.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>当两台计算机进行通信时，首先要在下列方向取得一致：</p><ul><li>计算机一次发送多少信息；</li><li>接收到数据后如何验证完整性；</li><li>如何确定数据包是否在传输过程中丢失了</li></ul><p>传输层提供了<strong>端对端数据传输服务</strong>，并且在两台计算机之间建立了逻辑连接，主要包含两种协议：TCP与UDP</p><h2 id="传输层和网络层"><a href="#传输层和网络层" class="headerlink" title="传输层和网络层"></a>传输层和网络层</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101513421.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101514031.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络层：提供数据转发路径</p><p>传输层：提供端到端的连接，不关心数据是如何传输的</p><p>传输层为应用进程之间提供逻辑通信，而网络层是为主机之间提供<strong>逻辑通信</strong>。传输层要对收到的报文进行<strong>差错检测</strong>，网络层只检测IP数据报的首部中的字段，不检查数据部分</p><h2 id="传输层和应用层"><a href="#传输层和应用层" class="headerlink" title="传输层和应用层"></a>传输层和应用层</h2><p>应用进程对于数据传输通常有着各种不同的要求，由网络层IP协议提供的数据传输是不可靠的，传输层旨在通过一系列协议和机制来改善该不足</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101518075.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>仅使用一种协议很难在高效、可靠性之间达到权衡</p><p>为满足不同应用进程的要求，可以按照传输需求分为两类：</p><ul><li>强调可靠性，允许少量延迟类</li><li>强调高效性，允许部分丢包</li></ul><p>传输层的TCP和UDP分别针对这两类应用进程提供服务</p><ul><li>TCP的特点是面向连接的、可靠的、有序的</li><li>UDP的特点是面向无连接的、不可靠的、无序的</li></ul><p><strong>传输控制协议TCP</strong>(Transmission Control Protocol)。是一个<strong>基于连接</strong>的通信协议，提供<strong>可靠</strong>的数据传输，TCP提供传输保证，引入了确认、超时重发、流量控制和拥塞控制等机制，使数据正确的、无差错地到达目的地。</p><p><strong>用户数据报协议UDP</strong>(User Datagram Protocol)。提供端到端的数据报的<strong>无连接服务</strong>，UDP几乎不进行检查，不确认保证报文到达，不很可靠，但效率较高。</p><h2 id="传输层的功能"><a href="#传输层的功能" class="headerlink" title="传输层的功能"></a>传输层的功能</h2><ol><li>连接管理：连接的创建、维护与撤销</li><li>流量控制：网络拥塞控制</li><li>差错检测与恢复</li><li>提供用户要求的服务质量</li><li>提供端到端的可靠通信</li><li>分段与重装：分组大小不同时需要进行分段和重装</li></ol><hr><h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101523849.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>当传输层采用面向连接的TCP协议时，尽管下面的网络是不可靠的，但这种逻辑通信信道就相当于一条全双工的可靠信道</p><p>通过端口号进行应用识别，<strong>TCP协议常见的端口号</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101526141.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>端口在进程之间的通信中起作用，UDP和TCP都使用于应用层接口处的端口于上层的应用层进行通信</p><p>端口号在0~1024之间的端口为通用端口，遵循相同的标准化方法；</p><p>端口号在1024~49151之间的端口为注册端口，用于特定用途；</p><p>端口号在49152~65535之间的端口为动态端口，供有任何需求的应用程序使用。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101531822.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>端口号只具有<strong>本地意义</strong>，各端口独立的分配自己的端口号，为了通信时不发生冲突，必须把端口号和主机的IP地址结合在一起使用</p><h2 id="TCP包"><a href="#TCP包" class="headerlink" title="TCP包"></a>TCP包</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101554912.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="可靠传输的实现"><a href="#可靠传输的实现" class="headerlink" title="可靠传输的实现"></a>可靠传输的实现</h2><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101559339.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101600311.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在滑动窗口的过程中的最后，发送方如果收不到确认的情况，会停止等待，并且超时重传</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>数据的传送与接收过程当中很可能出现收方来不及接收的情况，这时就需要对发方进行控制以免数据丢失。上面介绍了滑动窗口，如果窗口越大，发送速度也就越大，TCP可以使用控制滑动窗口的大小来进行控制速度，从而控制流量。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101604192.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h2><p>三次握手的目的：消除旧有连接请求的SYN消息对新连接的干扰，同步连接双方的序列号和确认号并交换TCP窗口大小信息。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101605910.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>四次挥手：由于TCP的半关闭特性，TCP连接时双全工（即数据在两个方向上能同时传递），因此，每个方向必须单独的进行关闭。这个原则就是：当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向上的连接。当一端收到一个FIN后，它必须通知应用层另一端已经终止了那个方向的数据传送。即收到一个FIN意味着在这一方向上没有数据流动了。保证服务器与客户端都能完全的接受对方发送的数据。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101606176.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="UDP协议概述"><a href="#UDP协议概述" class="headerlink" title="UDP协议概述"></a>UDP协议概述</h2><p>UDP协议提供传输层最基本的功能，也就是负责连接端口的处理工作。用户数据报(UDP)协议提供一种基本的、低时延的数据报传输，<strong>适用于一次传输少量突发报文的应用</strong>，UDP报头记录封包源端与目的端的连接端口信息，让封包能够正确地送达目的端的应用程序。</p><p>当传输层采用UDP协议时，这种逻辑通信信道则是一条<strong>不可靠信道</strong>。<strong>传输层提供的可靠的交付是指将数据可靠地交付给接收端的应用层。</strong></p><p>同样通过端口号进行应用识别，<strong>UDP协议常见的端口号</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101534389.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="UDP包"><a href="#UDP包" class="headerlink" title="UDP包"></a>UDP包</h2><p><strong>UDP的封装</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101607780.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>UDP首部</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101607431.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>根据应用层协议的数据传输需求，TCP多用于对数据<strong>可靠性有较高要求的应用层协议</strong>，例如网页、电子邮件、文件传输等；UDP多用于对延迟容忍度低的应用层协议，比如语音和视频。局部应用协议在实现时既会使用TCP,又会使用UDP。例如DNS,在实现数据的区域传送时将TCP作为传输层协议，而在实现域名解析时则将UDP作为传输层协议</p><hr><h1 id="远程访问协议"><a href="#远程访问协议" class="headerlink" title="远程访问协议"></a>远程访问协议</h1><h2 id="Telnet协议"><a href="#Telnet协议" class="headerlink" title="Telnet协议"></a>Telnet协议</h2><p>远程登录Telnet是一个简单的远程终端协议。用户使用Telnet就可在其所在地通过<strong>TCP连接</strong>注册（即登录）到远地的另一个主机上。能将用户的操作命令传到远地主机，也能将远地主机输出通过TCP连接返回到用户屏幕。Telnet的默认<strong>端口号为23。</strong></p><h3 id="Telnet工作原理"><a href="#Telnet工作原理" class="headerlink" title="Telnet工作原理"></a>Telnet工作原理</h3><p>使用客户服务器方式。本地系统运行客户进程，远地主机则运行服务器进程。服务器的主进程等待新的请求，从属进程处理每一个连接。定义了网络虚拟终端NVT(Network  Virtual Terminal)。其中，客户端就是管理设备，服务器为被管理设备</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101620906.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101615561.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="Telnet协议缺点"><a href="#Telnet协议缺点" class="headerlink" title="Telnet协议缺点"></a>Telnet协议缺点</h3><p>不提供服务器认证，客户端无法识别服务器的身份；</p><p>用户认证机制简单，仅支持密码认证；</p><p>用户认证信息以明文形式传输，容易被窃听；</p><p>用户数据以明文形式传输，无机密性可言。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101619478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="Telnet使用"><a href="#Telnet使用" class="headerlink" title="Telnet使用"></a>Telnet使用</h3><p>建立与服务器23端口的TCP连接：</p><p>从键盘上输入字符；</p><p>把字符串变成NVT格式送给远程服务器；</p><p>从远程服务器接收输出的信息；把该信息显示在您的屏幕上。</p><h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>SSH为Secure Shell的缩写，由IETF的网络小组(Network Working Group)所制定。SSH为建立在<strong>应用层基础上的安全协议</strong>。SSH是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台一包括HP-UX、Linux、AIX、Solaris、Digital UNIX、lrix,以及其他平台，都可运行SSH。</p><h3 id="SSH工作原理"><a href="#SSH工作原理" class="headerlink" title="SSH工作原理"></a>SSH工作原理</h3><blockquote><p>通信模型：C&#x2F;S<br>传输层协议：TCP<br>端口号：22<br>数据形式：密文</p></blockquote><p>服务器组件会侦听指定的端口，并负责协商安全的连接、认证连接方，并且会衍生(spawn)一个正确的环境给已经认证的客户端。</p><p>客户端负责发起与服务器的TCP握手、协商安全连接、验证服务器的身份与之前记录的信息匹配，并且提供认证的凭证。</p><p>SSH会话在两个独立的阶段建立，第一个阶段是协商建立加密以保护未来通讯的过程，第二个阶段就是认证阶段。</p><ul><li>协商会话加密阶段。协调加密方式，交换计算会话密钥(Diffie-Hellman算法)</li><li>认证阶段。一种是密码认证；一种是密钥对认证。</li></ul><h3 id="SSH协议的特点"><a href="#SSH协议的特点" class="headerlink" title="SSH协议的特点"></a>SSH协议的特点</h3><p>提供服务器认证，客户端可以识别服务器的身份</p><p>用户认证机制既支持密码认证，也支持公钥认证</p><p>用户认证信息以密文形式传输，或者不传输</p><p>用户数据以密文形式传输</p><hr><h1 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h1><p>电子邮件(e-mai)也称电子信箱，是因特网上使用得最多和最受用户欢迎的一种应用。电子邮件将邮件发送到ISP的邮件服务器，并放在其中的收信人邮箱(mail box)中，收信人可随时上网到ISP的邮件服务器进行读取。e-mail不仅可传送文字信息，而且还可附上声音和图像。</p><h2 id="电子邮件系统发送过程示意"><a href="#电子邮件系统发送过程示意" class="headerlink" title="电子邮件系统发送过程示意"></a>电子邮件系统发送过程示意</h2><p>ARPANET上电子邮件标准是<strong>简单邮件传送协议SMTP</strong>(Simple Mail Transfer Protocol),它已成为因特网的事实上的标准。</p><p>1993年又制定通用因特网邮件扩充MIME(Multipurpose Internet Mail Extensions)。在邮件首部中说明了邮件数据类型。MIME邮件可同时传送多种类型的数据，在多媒体通信环境下非常有用。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205101630714.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="电子邮件的主要构建"><a href="#电子邮件的主要构建" class="headerlink" title="电子邮件的主要构建"></a>电子邮件的主要构建</h2><p>电子邮件系统由<strong>用户代理</strong>、<strong>邮件服务器</strong>，以及电子邮件使用的<strong>协议</strong>3个主要组成部件。</p><p><strong>MTA</strong>(Message Transport Agent)是<strong>邮件传输代理</strong>。常用的SMTP服务器（在Outlook或者Netscape Messenger中也经常称为发送服务器或者outgoing服务器)就是MTA。</p><p><strong>MUA</strong>(Message User Agent)是<strong>邮件用户代理</strong>，是用户与电子邮件系统的接口。用户代理使用户能够通过一个友好的接口发送和接收电子邮件。常用Outlook,Netscape Messenger,,Foxmail及网易邮件或163邮件的Web界面，都是MUA。</p><ol><li>撰写：给用户提供方便的编辑信件的环境。</li><li>显示：能够方便地在计算机屏幕上将信显示。</li><li>处理：包括发送和接收邮件。</li></ol><p><strong>邮件服务器</strong>是核心构件，它的功能是发送和接收邮件，并向发信人报告邮件传送的情况。按照客户服务器方式工作，它需要两个协议；<strong>SMTP协议</strong>发送邮件，端口号为25；<strong>POP3协议</strong>接收邮件，端口号为109。</p><p><strong>SMTP</strong>(Simple Mail Transfer Protocol),<strong>简单邮件传输协议</strong>是在Internet.上发送邮件的协议。邮件从撰写完毕到发送到达收件人信箱的所有网络传输都是依照SMTP的规范来进行的。</p><p><strong>POP3</strong>(Post Office Protocol,邮局协议)和<strong>IMAP</strong>(Internet Message Access Protocol,Internet邮件存取协议)，邮件在成功发送后通常保存在收件人的信箱里。收件人可以通过POP3和IMAP协议来浏览信件。</p><h2 id="电子邮件的发送和接收过程"><a href="#电子邮件的发送和接收过程" class="headerlink" title="电子邮件的发送和接收过程"></a>电子邮件的发送和接收过程</h2><p>发信人调用用户代理编辑发送邮件。用户代理用SMTP将邮件传送给发送端邮件服务器。</p><p>发送端邮件服务器将邮件放入邮件缓存队列中等待发送。</p><p>运行在发送端邮件服务器的SMTP客户进程，向接收端邮件服务器发起TCP的连接。</p><p>TCP建立后，SMTP客户开始向远程SMTP服务器进程发送邮件。发送完毕关闭TCP连接。</p><p>接收端邮件服务器收到后放入收信人邮箱。</p><p>收信人在打算收信时，调用用户代理，使用POP3协议将自己的邮件从接收端邮件服务器的用户邮箱中取回。</p><h2 id="电子邮件的组成"><a href="#电子邮件的组成" class="headerlink" title="电子邮件的组成"></a>电子邮件的组成</h2><p>电子邮件由<strong>信封</strong>(envelope)和<strong>内容</strong>(content)组成。用户不需要填写电子邮件信封上的信息。</p><p>TCP&#x2F;IP体系的电子邮件系统规定<strong>电子邮件地址格式</strong>： 收信人邮箱名@邮箱所在主机的域名</p><p>因特网上每个人的电子邮件地址都是唯一的。<strong>发送电子邮件时</strong>，邮件服务器只使用电子邮件地址中的后一部分，即<strong>目的主机的域名</strong>。只有在邮件到达目的主机后，目的主机的邮件服务器才根据电子邮件地址中的前部分将邮件放在收件人的邮箱中。</p><p><strong>电子邮件的格式-邮件内容首部包括关键字</strong></p><blockquote><p>**To:**后面填入一个或多个收信人电子邮件地址。<br>**Subject:**是邮件主题，反映邮件的主要内容。<br>**Cc:**抄送，表示应给某人发送一个邮件副本。<br>**Bcc:**盲复写副本，发信人将邮件副本发给某人。<br>**From和Date:**发信人的电子邮件地址和日期.<br><strong>Reply-To：</strong>即对方回信所用的地址。</p></blockquote><h2 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h2><p>规定在两个相互通信的SMTP进程之间应如何交换信息。使用客户服务器方式工作。</p><p><strong>SMTP通信有3个阶段：</strong></p><ol><li>连接建立<ul><li>发信人先将要发送的邮件发送到邮件缓存。</li><li>SMTP客户定时对邮件缓存扫描。</li><li>使用SMTP的熟知端口号码(25)与目的主机的SMTP服务器建立TCP连接。</li><li>SMTP不使用中间的邮件服务器。</li></ul></li><li>邮件传送<ul><li>首先从MAIL命令开始，MAIL后面有发信人的地址：</li><li>其次一个或多个RCPT命令。RCPT是先弄清接收端是否已做好准备，然后才发送；</li><li>最后是DATA命令，开始传送邮件的内容。</li></ul></li><li>连接释放<ul><li>SMTP客户应发送QUIT命令。SMTP服务器返回信息“221（服务关闭）”，表示SMTP同意释放TCP连接。</li><li>SMTP使用TCP连接并不能保证不丢失邮件。没有端到端的确认返回到发信人处。</li></ul></li></ol><p><strong>SMTP基本工作流程</strong></p><ul><li>建立TCP连接</li><li>客户端向服务器发送HELO命令以标识发件人自己的身份</li><li>服务器端以○K作为响应，表示准备接收</li><li>客户端发送RCPT命令</li><li>服务器端表示是否愿意为收件人接收邮件</li><li>协商结束，发送邮件，用命令DATA发送输入内容</li><li>结束此次发送，用QUIT命令退出</li></ul><h2 id="文件读取协议"><a href="#文件读取协议" class="headerlink" title="文件读取协议"></a>文件读取协议</h2><p><strong>常见的邮件读取协议有两个：</strong></p><ul><li>邮局协议第三版本POP3</li><li>因特网报文存取协议IMAP</li></ul><p>邮局协议POP,是一个脱机协议。</p><p>邮局协议POP是一个简单、功能有限的邮件读取协议。POP使用客户&#x2F;服务器工作方式。</p><p>POP服务器只有在用户输入鉴别信息后才允许对邮箱进行读取。</p><p>POP服务器是有存储转发功能的中间服务器。</p><p>因特网报文存取协议IMAP,是联机协议。</p><p>MAP用户可以在不同的地方使用不同的计算机随时阅读和处理自己的邮件，还允许收信人只读取邮件中的某一个部分。</p><p>缺点是如果用户没有将邮件复制到自己的PC机上，则邮件一直存放在MAP服务器上。</p><hr><h1 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h1><p>文件传送协议FTP(File Transfer Protocol)是因特网上使用得非常广泛的<strong>文件传送协议</strong>。</p><p>FTP提供交互式的访问，允许客户指明文件的类型与格式，并允许文件有存取权限。</p><p>FTP屏蔽了各计算机系统的细节，适合于在异构网络中任意计算机之间传送文件。</p><p>基于TCP的FTP和基于UDP的TFTP都是文件共享协议中的一大类，即复制整个文件其特点是，若要存取一个文件，就必须先获得本地的文件副本。</p><h2 id="主要工作原理"><a href="#主要工作原理" class="headerlink" title="主要工作原理"></a>主要工作原理</h2><p>使用TCP可靠的传输服务：主要功能是减少或消除不同操作系统下处理文件的不兼容性。</p><p>客户&#x2F;服务器：同时为多个客户进程提供服务。</p><p>服务器进程由两部分组成：主进程，负责接受新的请求；若干个从属进程，负责处理单个请求。</p><h2 id="工作步骤"><a href="#工作步骤" class="headerlink" title="工作步骤"></a>工作步骤</h2><ol><li><p>服务端打开默认端口(21)，使客户进程能够连接上</p></li><li><p>等待客户进程发出连接请求</p></li><li><p>启动从属进程处理客户进程发来请求。从属进程对客户进程请求处理完毕终止，但从属进程运行期间根据需要可创建其他子进程。</p></li><li><p>回到等待状态，继续接受其他客户进程发来请求。主进程与从属进程是并发地进行的。</p></li></ol><p>FTP的工作模式有两种：<strong>主动模式</strong>和<strong>被动模式</strong></p><p><strong>主动模式port</strong><br>在主动模式下，FTP客户端首先与FTP服务器的TCP21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送Port命令。Port命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过其TCP20端口连接到客户端的指定端口发送数据。FTP服务器必须与客户端建立一个新的连接用来传送数据。主动FTP连接过程如下：<br>命令连接：客户端&gt;1024端口→服务器21端口<br>数据连接：客户端&gt;1024端口←服务器20端口</p><p><strong>被动模式pasv</strong><br>在被动模式下，建立控制通道时与主动模式类似，但建立连接后发送的不是Pot命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口(端口号大于1024)并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器上的这个端口，然后FTP服务器将通过这个端口传送数据。被动FTP连接过程如下：<br>命令连接：客户端&gt;1024端口→服务器21端口<br>数据连接：客户端&gt;1024端口→服务器&gt;1024端口</p><p><strong>主动与被动FTP优缺点</strong><br>主动FTP对FTP服务器的管理有利，但对客户端的管理不利。因为FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。<br>被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。</p><h2 id="FTP协议扩展——TFTP协议"><a href="#FTP协议扩展——TFTP协议" class="headerlink" title="FTP协议扩展——TFTP协议"></a>FTP协议扩展——TFTP协议</h2><p><strong>简单文件传输协议TFTP</strong>(Trivial File Transfer Protocol)是很小且易于实现的文件传送协议。</p><p>TFTP的默认<strong>端口号为69</strong></p><p>TFTP使用客户&#x2F;服务器方式，但使用UDP数据报，因此要有自己的差错改正措施。</p><p>只支持文件传输，不支持交互，没有庞大的命令集，没有列目录功能，不能对用户进行身份鉴别。</p><p><strong>优点：</strong>可用于UDP环境；代码所占内存小。</p><p><strong>隐患：</strong>TFTP是局域网传输文件的通用方式，是普通文件传输协议，不需要用户登录认证，因此有安全隐患。</p><h2 id="TFTP与FTP的区别"><a href="#TFTP与FTP的区别" class="headerlink" title="TFTP与FTP的区别"></a>TFTP与FTP的区别</h2><ol><li><p>FTP使用TCP,TFTP使用UDP。</p></li><li><p>TFTP的功能比FTP少。TFTP不能使用通配符、创建和删除目录、删除文件等；不提供用户名与口令认证。</p></li><li><p>TFTP的简洁性，所以路由器经常使用TFTP传输访问列表及路由配置信息。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由基础知识学习</title>
      <link href="/2022/05/09/%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/09/%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="路由原理"><a href="#路由原理" class="headerlink" title="路由原理"></a>路由原理</h1><h2 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h2><p>路由（route），为需要跨网络转发的数据包提供的路径信息，依据逻辑地址对跨网络的数据包执行转发。</p><p>路由器是工作在<strong>网络层</strong>的数据包转发设备，路由器的主要功能是<strong>路由选择</strong>，路由器可以连接多个网络或网段，对不同网络或网段之间的数据信息进行“翻译”，从而构成一个更大的网络</p><h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><p>按照某种规则在一对源节点和目的节点之间的多条路由中选择一条最佳路由的方法叫做<strong>路由选择算法</strong>，简称<strong>路由算法</strong></p><p>静态路由选择算法不用测量也不需要利用网络信息，路由选择在网络设计时或网络安装时已经设置好，是一种按照某种固定规则进行的路由选择。</p><h3 id="扩散式路由选择"><a href="#扩散式路由选择" class="headerlink" title="扩散式路由选择"></a>扩散式路由选择</h3><p>一个网络节点从某条线路收到一个分组后，向除该线路外的所有线路重复发送收到的分组。</p><p>基本思想：把分组发送给除发送节点以外的所有邻节点，各节点收到重复分组时都有废弃能力（扩散式，全路发送）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091442185.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li>各节点第一次收到分组时，就继续向目的地方向发送，经其他节点，直至目的地节点；</li><li>除了第一次收到的分组外，其它重复收到的分组将被废弃；</li><li>网络资源利用率低，但可靠性高。</li></ol><p>适用范围：规模小，负荷轻的网络</p><h3 id="固定式路由选择"><a href="#固定式路由选择" class="headerlink" title="固定式路由选择"></a>固定式路由选择</h3><p>网络中的网络控制中心按照最佳路由选择算法求出每对源、目的节点之间的最佳路由，为每个节点构造一个固定路由表并分发给各节点，每个网络节点的表格中每一项记录着对应某个目的节点的下一个节点或链路</p><p>优点：简便易行，在负载稳定，拓扑结构变化不大的网络中运行效果较好</p><p>缺点：灵活性差</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091517106.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="随机路由选择"><a href="#随机路由选择" class="headerlink" title="随机路由选择"></a>随机路由选择</h3><p>转发节点随机地选择一个链路发送分组，如果选择各个链路的概率相同，则可用循环方式轮流的把各个分组转发到所有相邻的节点。</p><p>优点：是简单易行，对网络负载的增加小。</p><p>缺点：是分组在网络中迂回旅行的时间过长。</p><p>静态路由选择算法只适宜小型的、结构相对稳定的计算机网络。</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>动态路由选择算法的节点的路由选择要依靠网络当前的状态信息来决定。它能较好地适应<strong>网络流量</strong>、<strong>拓扑结构的变化</strong>，有利于改善网络的性能，因此又称为自适应路由选择算法。</p><p>独立路由选择：利用本地信息进行分布式控制；</p><p>集中路由选择：利用相邻节点的信息进行集中式控制：</p><p>分布路由选择：利用全网节点的信息进行分布式控制；</p><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><p>路由选择协议也称为<strong>路由协议</strong>，是执行路由选择算法的协议，是路由器之间实现路由信息共享的一种机制，它允许路由器之间相互交换和维护各自的路由表。</p><p>TCP&#x2F;IP网络的路由协议分为两大类：<strong>内部网关协议IGP</strong>(Interior Gateway Protocol)和<strong>外部网关协议EGP</strong>(External Gateway Protocol)。IGP用于自治系统或管理域之内，而EGP用于自治系统之间或管理域之间。</p><p>内部网关协议IGP:具体的协议有多种，如<strong>RIP</strong>和<strong>OSPF</strong>等。</p><p>外部网关协议EGP:目前使用的协议是<strong>BGP</strong>。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091524140.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>适用于单播的路由算法分为：V-D(向量距离)和L-S(链路状态)两大类；</p><p>适用于组播的路由算法分位：SBT(源树路由)和CBT(核心树路由)两大类。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091527940.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="路由表与路由条目"><a href="#路由表与路由条目" class="headerlink" title="路由表与路由条目"></a>路由表与路由条目</h2><p>路由表：路由条目的集合</p><p>路由条目：记录特定IP地址与转发接口的某类表项</p><p>每台路由设备中都至少维护着一张路由表：路由器必须依赖路由表中的信息来转发数据包；如果路由表中没有与数据包目的IP地址相关的路由条目，路由器就只能丢弃数据包；如果路由表中有多条与数据包目的1P地址相关的路由条目，路由器需要依据一些规则选出“最优路由”，并以此执行转发。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091626010.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="路由来源与优先级"><a href="#路由来源与优先级" class="headerlink" title="路由来源与优先级"></a>路由来源与优先级</h2><p>优先级数值越小，来源越可靠，管理员可以修改优先级值（直连路由除外）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091628674.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>路由开销：</strong> 路由开销值越小，路由越优，对于每种动态路由协议来说，路由开销的参数各不相同，当多条路由的路由来源相同时，通过路由开销来选出最优路由</p><hr><h1 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h1><h2 id="RIP路由协议概述"><a href="#RIP路由协议概述" class="headerlink" title="RIP路由协议概述"></a>RIP路由协议概述</h2><p>RIP是一种内部网关协议，结构简单，适用于小型网络。它运行于<strong>UDP</strong>之上，缺省的端口号是512。RIP是一种分布式的基于距离向量的路由选择协议，RIP协议的”距离”也称为“<strong>跳数(hop count)<strong>”。<br>从一路由器到直接连接的网络的距离定义为0。从一路由器到非直接连接的网络的距离定义为所经过路由器数加1。RIP支持的最大跳数是15，跳数为16的网络被认为不可达。因此RIP只</strong>适用于小型互联网</strong>。</p><h2 id="交换路由信息"><a href="#交换路由信息" class="headerlink" title="交换路由信息"></a>交换路由信息</h2><p>如果两个路由器之间的通信不需要金国另一个路由器，则他们是相邻的，两个相邻路由器在同一个网络上都有自己的接口</p><p>RIP 协议规定，对于不相邻的路由器就不交换信息，交换的信息是到本自治系统中所有网络的最短距离，以及到每个网络应该经过的下一跳路由器，RIP协议交换的是当前本路由器所知道的全部信息，即路由表。RIP协议按固定的时间间隔交换路由信息。然后路由器根据收到的路由信息更新路由表。</p><p>当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息</p><h2 id="RIP协议的特点"><a href="#RIP协议的特点" class="headerlink" title="RIP协议的特点"></a>RIP协议的特点</h2><ol><li>仅和相邻路由器交换信息</li><li>交换的信息是当前路由器知道的全部信息，即自己的<strong>路由表</strong></li><li>按固定的时间间隔交换路由信息，当网络拓扑发生变化时，也要及时向相邻路由器通告拓扑变化后的路由信息</li><li>RIP不能在两个网络之间同时使用多条路由，RIP选择一条具有最少路由器的路由。</li><li>RIP协议的每个路由器都要不断的和其他路由器交换路由信息</li></ol><h2 id="路由表的初始化"><a href="#路由表的初始化" class="headerlink" title="路由表的初始化"></a>路由表的初始化</h2><p>路由器启动时对路由表进行初始化，为与自己直接相连的每个网络生成一个表项，路由表中最主要的信息是：到某个网络的距离，以及经过的下一跳地址</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091922524.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="RIP协议的缺点"><a href="#RIP协议的缺点" class="headerlink" title="RIP协议的缺点"></a>RIP协议的缺点</h2><ol><li>限制了网络的规模，它最大只有15跳。</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加</li><li>“坏消息传的慢”，更新过程的收敛时间过长</li><li>依赖于固定的路由度量，不考虑真是距离和带宽</li></ol><hr><h1 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h1><h2 id="OSPF协议概述"><a href="#OSPF协议概述" class="headerlink" title="OSPF协议概述"></a>OSPF协议概述</h2><p>开放最短路径优先协议OSPF(Open Shortest Path First)是一个典型的基于L-S算法的路由协议，它运行在IP协议之上，协议号为89。</p><p>OSPF最主要的特征是使用分布式的<strong>链路状态协议</strong>。“链路状态”是说明本路由器和哪些路由器相邻，以及该链路的”度量(metric)</p><h2 id="OSPF协议特点"><a href="#OSPF协议特点" class="headerlink" title="OSPF协议特点"></a>OSPF协议特点</h2><p>OSPF能提供负载均衡功能</p><p>OSPF允许将AS中的网络分成若干区域</p><p>OSPF允许灵活配置IP子网，支持无分类路由和特定分类网络的路由</p><p>OSPF支持最佳（最长或最具体的）地址匹配</p><p>所有OSPF协议交换都要被鉴别</p><p>从外部得到的路由选择数据要在整个自治系统中通告</p><h2 id="OSPF区域划分和路由类别"><a href="#OSPF区域划分和路由类别" class="headerlink" title="OSPF区域划分和路由类别"></a>OSPF区域划分和路由类别</h2><p>OSPF使用层次结构的区域划分。在上层的区域叫做主干区域，其作用是连通其他在下层的区域。从其他区域来的信息都由<strong>区域边界路由器</strong>进行概括。</p><p>OSPF将一个规模很大的自治系统划分为若干个小的区域，每一个区域都有一个32bt的<strong>区域标识符</strong>。在一个区域内的路由器最好不超过200个。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091928714.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>【R6】ASBR(Autonomous System Boundary Router)<strong>自治系统边界路由器</strong>：和属于其它自治系统的路由器交换路由信息的路由器。在自治系统中的每一个路由器都知道到ASBR的路径。<br>【R5】BR(Backbone Router)<strong>骨干路由器</strong>：有一个接口连到骨干区域的路由器。<br>【R7】ABR(Area Border Router)<strong>区边界路由器</strong>：连接到多个区域的路由器。<br>【R9】IR(Internal Router)<strong>内部路由器</strong>：路由器连接的所有网络都在同一个区域内。</p><h2 id="OSPF基本路由选择算法"><a href="#OSPF基本路由选择算法" class="headerlink" title="OSPF基本路由选择算法"></a>OSPF基本路由选择算法</h2><ol><li>当路由器启动时，首先初始化路由协议数据结构</li><li>路由器使用OSPF的Hello协议获得邻居</li><li>路由器尝试与其新获得的邻居中的一些形成邻接。OSPF仅在邻接路由器上收发路由更新</li><li>路由器周期性地通告它的链路状态LSA</li><li>LSA在整个区域内洪泛发送。确保一个区域中的所有路由器有完全相同的链路状态数据库</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091933884.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091934086.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="OSPF报文类型"><a href="#OSPF报文类型" class="headerlink" title="OSPF报文类型"></a>OSPF报文类型</h2><p>Hello报文。路由器之间定时交换Hello报文，发现相邻路由器，维护邻居关系，确定链路状态。另外，在具有多播或广播性能的物理网络，Hello包使用<strong>多播</strong>方式发送，允许动态地发现邻居路由器。</p><p>OSPF规定两个相邻路由器每隔10秒钟交换一次问候分组，以确定哪些邻站是可达的。</p><p>只有可达邻站的链路状态信息才存入链路状态数据库。</p><p>若40秒钟没有收到某个相邻路由器发来的问候分组，则认为该相邻路由器是不可达的，应立即修改链路状态数据库，并重新计算路由表。</p><p><strong>Link State Update(链路状态更新包)：</strong>链路状态更新报文用于节点之间广播的L-S信息。</p><p><strong>Link State Acknowledgement(链路状态确认包)：</strong>节点收到Link StateUpdate报文后必须应答该报文。</p><p><strong>Link State Request(链路状态请求包)：</strong>局域网上一个路由器启动后向值班路由器发出该请求。</p><p><strong>Database Description(数据库描述包)：</strong>值班路由器以该报文响应Link State Request报文，将自己的所有L-S信息下载给非值班路由器。</p><h2 id="OSPF规定"><a href="#OSPF规定" class="headerlink" title="OSPF规定"></a>OSPF规定</h2><p>两个同步的路由器叫做“完全邻接的”(fully adjacent)路由器。<br>OSPF每一个路由器用数据库描述分组与相邻路由器交换本数据库中已有的链路状态摘要信息。<br>为了确保链路状态数据库与全网的状态保持一致，OSPF每隔30min刷新一次数据库中的链路状态。<br>通过路由器之间交换的链路状态信息，每个路由器都可得出该互联网的链路状态数据库，算出以自己为根的最短路径树。<strong>根据最短路径树得出路由表。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层协议基础学习</title>
      <link href="/2022/05/09/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/09/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><p>网络层负责从源节点到目的节点的数据传输</p><p>具体功能：路由选择、拥塞控制和网际互联</p><p>研究和解决的主要问题：路由选择、流量控制、网络连接的建立保持和终止、为传输层提供服务</p><h2 id="IP协议概述"><a href="#IP协议概述" class="headerlink" title="IP协议概述"></a>IP协议概述</h2><p>IP(Internet Protocol) 协议是整个TCP&#x2F;IP网络的核心协议，将各个局域网和广域网相互连成一个有统一地址统一分组格式和相同服务特性的IP网络</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091056361.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址(PV4)是给每个连接在因特网上的主机分配一个在全球范围是唯一的<strong>32bit</strong>的标识符。IP地址采用分层结构，即由<strong>网络地址</strong>和<strong>主机地址</strong>两部分组成，网络地址用来标识接入Internet的网络。主机地址用来标识接入Internet的主机。</p><p><strong>IPv4编址：</strong>IPv4地址长度为32位，即4字节，按照每个字节分为一组，每组8位，分为4组，每组将二进制换算成十进制，用点分隔开，也叫<strong>点分十进制</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091103823.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>IP地址的编制方法共经历了分类IP地址、子网的划分和构造超网三个历史阶段</p><h2 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091108639.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>A类IP地址：网络字段的第一位固定的0，第一字节的范围是1-127</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091109938.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络号1.0.0.0-126.0.0.0，网络<strong>127</strong>保留用于本地软件回环测试本主机用<br>可用网络数：126<br>每个网络主机数： 2<sup>24</sup> - 2 &#x3D; 16777214</p></li><li><p>B类IP地址：网络字段前两位是固定的10，第一字节范围是128-191</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091113132.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络号128.0.0.0-191.255.0.0<br>可用网络数：2<sup>14</sup><br>每个网络可用主机数：2<sup>16</sup> - 2 &#x3D; 65534</p></li><li><p>C类IP地址：网络字段前三位是110，地址范围 192-223</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091116347.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络号 192.0.0.0-223.255.255.0<br>可用网络数：2<sup>21</sup><br>每个网络可用的主机数 2<sup>8</sup> - 2 &#x3D; 254</p></li></ol><p><strong>广播地址：</strong> 32位全为”1”的1P地址，是用于向网上（本地）所有主机发送报文的广播地址。</p><p><strong>有限广播：</strong> 主机号各位全为“1”的1P地址，用于本网广播，叫做有限（定向）广播地址。</p><p><strong>“0”地址：</strong> 各位全为“0”的网络地址，表示本地网络。</p><p><strong>回送地址：</strong> A类网络地址127，它是一个保留地址，用于网络软件以及本地进程间通信。</p><h2 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h2><p>随着Internet的发展，两级地址结构很难满足日益增长的网络的需求，并日益显现出下面的缺点。</p><ol><li><strong>IP地址的浪费</strong>,目前的P地址分类方案有不合理之处，因而造成许多地址的浪费。</li><li><strong>路由器效率低下</strong>,给每一个网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li></ol><p><strong>解决问题方法：划分子网和构造超网。</strong></p><p>子网划分基本思路：从主机号借用若干比特作为子网号，主机号相对减少若干比特</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091343887.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><table><tr><th> 划分前 </th><th> 划分子网后 </th></tr><tr><td>    <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091345512.png" style="border-radius:10px;"/></td><td>    <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091345423.png" style="border-radius:10px;"/></td></tr></table><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>子网掩码是用来表示网络号和主机号的</p><ul><li><code>1</code> 对应的IP地址位表示网络号</li><li><code>0</code> 对应的IP地址位表示主机号</li></ul><p>在IPv4地址中，左侧N位表示网络位，其余32-N位表示主机位，子网掩码就是网络位全为1，主机位全为0，子网掩码和IPv4地址进行运算，可以道道对应的网络位地址</p><p><strong>子网掩码的表示</strong></p><ol><li>点分十进制表示：比如 255.255.255.0</li><li>&#x2F;网络位位数：比如 &#x2F;24</li></ol><p>A、B、C类地址的掩码表示方式</p><ul><li>A类：255.0.0.0或&#x2F;8</li><li>B类：255.255.0.0或&#x2F;16</li><li>C类：255.255.255.0或&#x2F;24</li></ul><h2 id="无类域间路由"><a href="#无类域间路由" class="headerlink" title="无类域间路由"></a>无类域间路由</h2><p><strong>CIDR</strong>消除了“子网”的概念，使IP地址从三级地址又回到了两级地址，记法为：<code>IP地址 ::=&#123;&lt;网络前缀&gt;，&lt;主机号&gt;&#125;</code></p><p>CIDR使用“斜线记法”或CIDR记法，它在IP地址后面加上一个斜线“&#x2F;”，写上网络前缀所占的比特数（对应于子网掩码中比特1的个数）。例如128.14.32.0&#x2F;20表示的地址块共212个地址。其地址范围是：128.14.32.0 ~ 128.14.47.255</p><p>网络前缀越短，其地址块所包含的地址数就越多。在查找路由表时可能会得到不止一个匹配结果，应当从匹配结果中选择具有最长网络前缀的路由，这叫做<strong>最长前缀匹配</strong>，又称<strong>最长匹配</strong>或<strong>最佳匹配</strong>。</p><p><strong>技术特点：</strong></p><ul><li>使用网络前缀和主机号的二级地址结构，不再使用子网的概念；</li><li>网络前缀相同的连续的P地址形成一个地址块，由起始地址和块地址数来表示。</li></ul><p><strong>无类域间路由的优点</strong></p><ul><li>解决了困扰传统IP寻址的两大问题；</li><li>减小Internet的路由条目。</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205091404701.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机工作原理学习</title>
      <link href="/2022/05/08/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/08/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="交换机工作原理"><a href="#交换机工作原理" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h1><h2 id="冲突域和广播域"><a href="#冲突域和广播域" class="headerlink" title="冲突域和广播域"></a>冲突域和广播域</h2><ol><li>冲突域<br><strong>竞争同一带宽的节点集合</strong>。传统的基于共享式集线器(HUB)的局域网中所有站点都处于同一个“冲突域”中。</li><li>广播域<br><strong>接收同样广播消息的节点的集合</strong>。交换机和HUB组成的网络是一个广播域。路由器的一个接口下是一个广播域。所以<strong>路由器可以隔离广播域</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081530927.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="网络拓扑结构和环路"><a href="#网络拓扑结构和环路" class="headerlink" title="网络拓扑结构和环路"></a>网络拓扑结构和环路</h2><p><strong>总线型：</strong> 结构简单、费用少、故障诊断困难；<br><strong>星型：</strong> 结构简单、存在单点故障；<br><strong>环形：</strong> 结构简单、存在单点故障：<br><strong>网状：</strong> 可靠性高、网络复杂成本高；</p><p><strong>网络环路：</strong> 会产生网络风暴，造成网络拥塞；解决方法：结构设计时避免环路；生成树协议（STP），树是没有环路的，所有的数据都只是在树所指示的路径上传输</p><h2 id="交换机工作原理-1"><a href="#交换机工作原理-1" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h2><p>MAC地址表：交换机端口与主机的MAC地址的对应关系，可初始化并自动学习。</p><p>转发：位于mac地址表中的单帧数据</p><p>广播：广播、组播、未知单帧数据。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081609416.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="交换机工作过程"><a href="#交换机工作过程" class="headerlink" title="交换机工作过程"></a>交换机工作过程</h2><ol><li>MAC地址表初始化</li><li>MAC地址表学习</li><li>单帧转发</li><li>广播、组播和未知单播帧的转发</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081610606.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>交换机可以使用VLAN（虚拟机局域网）来隔离广播</p><ul><li>VLAN标签：交换机用VLAN标签来区分不同VLAN的以太网帧</li><li>Access端口：仅允许一个VLAN通过，用于连接终端</li><li>Trunk端口：允许多个VLAN通过，用于交换机之间连接</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081615414.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h2><p>同时具备交换机的转发能力和路由器的路由功能，一般应用与核心及主干网络</p><p><strong>访问网络设备</strong>，Console口本地访问，使用Telnet终端或者SSH终端访问</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081618545.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><h2 id="TCP-x2F-IP-分层结构"><a href="#TCP-x2F-IP-分层结构" class="headerlink" title="TCP&#x2F;IP 分层结构"></a>TCP&#x2F;IP 分层结构</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081625185.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="地址解析——ARP协议"><a href="#地址解析——ARP协议" class="headerlink" title="地址解析——ARP协议"></a>地址解析——ARP协议</h2><p>地址解析协议(<strong>Address Resolution Protocol</strong>),在局域网中，当主机或其它网络设备有数据要发送给另一个主机或设备时，它必须知道对方的网络层地址（即<strong>IP地址</strong>）。但是仅仅有引P地址是不够的，因为IP数据报文必须封装成帧才能通过物理网络发送，因此发送站还必须有接收站的<strong>物理地址</strong>，所以需要一个从<strong>IP地址到物理地址的映射</strong>，APR就是实现这个功能的协议。</p><p><strong>原理:</strong> 主机以广播的方式，发送包含目标P地址的包到网络上的所有主机，然后接收返回信息，以此来确定目标地址的MAC地址，收到响应信息后，将IP地址和MAC地址的映射缓存一段时间（下次请求可以先查缓存，这样节省时间）</p><h2 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h2><p>先在自己的缓存中查找有没有目的MAC地址和IP地址的映射关系；</p><p>如果有，就用IP与MAC地址的对应关系，将MAC地址按照协议写入MAC帧，然后局域网发送MAC帧；</p><p>如果没有，就发送广播MAC帧请求，<strong>FF-FF-FF-FF-FF-FF</strong>,主机B接收到后，向A发送ARP响应分组，响应分组中是包括IP与MAC的对应关系的。主机A会将这个对应关系进行缓存，下次使用。</p><p>分组格式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081636612.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="ARP命令"><a href="#ARP命令" class="headerlink" title="ARP命令"></a>ARP命令</h2><p>在Linux下使用 <code>man arp</code> 可以查看命令的使用方式，在windows下直接输入 <code>arp</code> 来查看命令使用方式</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br><span class="line">arp -n</span><br></pre></td></tr></table></figure><hr><h1 id="RARP协议"><a href="#RARP协议" class="headerlink" title="RARP协议"></a>RARP协议</h1><h2 id="RARP简介"><a href="#RARP简介" class="headerlink" title="RARP简介"></a>RARP简介</h2><p>反向地址解析协议。将主机的MAC地址转换为P地址，比如局域网中有一台主机只知道MAC地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。RARP协议广泛用于获取无盘工作站的IP地址。RARP是一种逝去的地址分配技术，是Bootp和DHCP的鼻祖，目前只有部分无盘工作站等情况需要用到。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局域网知识学习</title>
      <link href="/2022/05/06/%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/06/%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="局域网概述"><a href="#局域网概述" class="headerlink" title="局域网概述"></a>局域网概述</h1><p>局域网（LAN：Local Area Network）是将局部范围内各种通信设备互联在一起实现相互间<strong>数据传输</strong>和<strong>资源共享</strong>的通信网络</p><p><strong>局域网特征：</strong></p><ul><li>覆盖范围小</li><li>传输速率高</li><li>误码率低</li><li>是一个自治网，由所属单位管理</li></ul><p>局域网技术包含物理层和数据链路层的功能</p><p><strong>它的特征主要由三个因素确定：</strong></p><ul><li>连接各种设备的<strong>拓扑结构</strong></li><li>传输数据的<strong>传输介质</strong>（包括信号技术）</li><li>共享资源的<strong>介质访问控制技术</strong></li></ul><hr><h1 id="局域网分类"><a href="#局域网分类" class="headerlink" title="局域网分类"></a>局域网分类</h1><ol><li>按转换方式：共享介质局域网、交换局域网</li><li>按资源管理方式：对等局域网、非对等局域网</li><li>按传输技术：基带局域网、宽带局域网</li><li>按局域网采用的物理层和介质访问控制子层协议分类：以太网、令牌环网、令牌总线</li><li>按物理拓扑分类：总线型拓扑、环形拓扑、星型拓扑</li></ol><h2 id="总线型拓扑"><a href="#总线型拓扑" class="headerlink" title="总线型拓扑"></a>总线型拓扑</h2><p>所有的用户工作站都同等的挂接在一条广播式公共信道总线上，是一种分布式结构的单挑系统，常用的总线传输介质有双绞线对、同轴电缆和光缆、无方向性同频广播式无线电信道</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205062034269.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>总线型拓扑结构局域网的优点：</strong></p><ol><li>通信成本最省</li><li>易于扩充工作站数目</li><li>总线的无源操作和系统的分布控制，保证了网络的高度可靠性</li><li>用广播式通信方式无转接节点，传输时延短</li></ol><p><strong>总线型拓扑结构局域网的缺点：</strong></p><ol><li>网络覆盖范围受到限制</li><li>信道的故障将导致整个网络失败，完全瘫痪</li><li>广播式竞争型多址通信不利于网络业务量的增加</li></ol><h2 id="环型拓扑"><a href="#环型拓扑" class="headerlink" title="环型拓扑"></a>环型拓扑</h2><p>各个工作站通过一个环接器挂接在一个环型的传输通路上，环内的信号必须是单项传播的。环型局域网的传输介质可采用双绞线、同轴电缆和光纤</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205062042249.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>环型结构局域网的优点：</strong></p><ol><li>网络接入控制及其接口部件比较简单</li><li>网络操作是分布式且非竞争型的，信道资源分配比较公平。</li><li>网络的性能比较稳定，能够承受较重的负荷</li></ol><p><strong>环型结构局域网的缺点：</strong></p><ol><li>每个节点的环接器必须是有源部件，可靠性较差</li><li>环内需要设置对令牌进行控制的控制装置</li><li>网络的扩充不如总线网容易</li></ol><h2 id="星型拓扑"><a href="#星型拓扑" class="headerlink" title="星型拓扑"></a>星型拓扑</h2><p>每个工作站都经过一条专用线路连接到中心节点上，通过中心节点的转接，可与其他任何一个工作站建立连接，相互通信，星型局域网使用双绞线或光纤作为传输介质</p><p><strong>星型拓扑结构局域网的优点：</strong></p><ol><li>集中控制有利于将各个工作站送来的数据流进行汇集</li><li>易于别的网络互联，连接方便、经济;</li><li>易于扩充，故障管理容易</li></ol><p><strong>星型拓扑结构局域网的缺点：</strong></p><ol><li>中心节点交换机是关键设备，可靠性要求高，要求有备份机或者双机运行</li></ol><hr><h1 id="局域网接入控制技术"><a href="#局域网接入控制技术" class="headerlink" title="局域网接入控制技术"></a>局域网接入控制技术</h1><h2 id="固定接入类"><a href="#固定接入类" class="headerlink" title="固定接入类"></a>固定接入类</h2><p>将公共的信道带宽资源对网络用户做了固定或相对固定的分配。如：<strong>频分复用</strong>和<strong>时分复用</strong>，信道被划分成若干子信道，每一子信道可提供给一对节点固定使用，实现一对通信实体之间的点到点通信</p><h2 id="集中控制接入类"><a href="#集中控制接入类" class="headerlink" title="集中控制接入类"></a>集中控制接入类</h2><p>要求网络中设置一个对信道接入进行管理的中心控制节点，将信道的全部带宽资源按需分配给要求接入网络通信实体，如轮询和预约接入技术等</p><h2 id="分布控制接入类"><a href="#分布控制接入类" class="headerlink" title="分布控制接入类"></a>分布控制接入类</h2><p>不要求网络中设置中心控制节点，它决定网络系统具有高度的可靠性和可扩展性的重要因素。</p><ul><li>局域网中采用最多的一类信道接入控制技术</li><li>根据特定的网络拓扑形式发展起来，只适用于特定拓扑的局域网</li></ul><hr><h1 id="局域网参考模型"><a href="#局域网参考模型" class="headerlink" title="局域网参考模型"></a>局域网参考模型</h1><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205062059026.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>局域网参考模型和OSI&#x2F;RM相比，相当于OSI&#x2F;RM的最低两层；<br>为例使局域网中的数据链路层不至于过于复杂，将局域网的数据链路层划分为<strong>媒体访问控制MAC子层</strong>和<strong>逻辑链路控制LLC子层</strong></p><p>MAC子层主要完成与具体传输媒体有关功能<br>LLC子串完成与媒体访问无关部分主要功能<br>局域网对LLC子层是透明的，只有MAC子层才能看到所连接的是采用什么标准的局域网</p><p>IEEE 802标准：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205062105224.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>局域网的链路层两种不同的帧</p><p>LLC帧和MAC帧</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205062106076.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="以太网的物理层和MAC子层"><a href="#以太网的物理层和MAC子层" class="headerlink" title="以太网的物理层和MAC子层"></a>以太网的物理层和MAC子层</h1><h2 id="802-3以太网标准"><a href="#802-3以太网标准" class="headerlink" title="802.3以太网标准"></a>802.3以太网标准</h2><p>1EEE802.3有5种物理层规范</p><ul><li>粗缆以太网(10BASE-5)</li><li>细缆以太网(10BASE-2)</li><li>双绞线以太网(10BASE-T)</li><li>光纤以太网(10BASE-F)</li><li>宽带以太网(10 Broad36)</li></ul><p><strong>802.3以太网标准-粗缆以太网(10BASE-5)</strong></p><p>使用总线结构的<strong>粗同轴电缆</strong>作为传输介质，最大传输速率为10Mb&#x2F;s,采用<strong>基带传输技术</strong>，每一个网段最大长度为500m。每个网段理论上可以连接100台计算机。网络上两台计算机之间的缆线长度不小于2.5m。</p><p><strong>802.3以太网标准-细缆以太网(10BASE-2)</strong></p><p>使用总线结构的<strong>细同轴电缆</strong>作为传输介质，每一个网段最大长度为185m,每个网段理论上可以连接33台计算机,电缆总长度不超过900m</p><p><strong>802.3以太网标准-双绞线以太网(10BASE-T)</strong></p><p>每一个网段最大长度不超过100m</p><p><strong>802.3以太网标准-光纤以太网(10BASE-F)</strong></p><p>使用单模或多模光纤作为传输介质,每一个网段最大长度为500m</p><p><strong>802.3以太网标准-宽带以太网(10 Broad36)</strong></p><p>是一种宽带LAN。使用75Ω同轴电缆作为传输介质，单个网段的最大连接距离为1800m,整个网段的最大跨度为3600m,10 Broad36与<strong>基带以太网相互兼容</strong>的方法是把基带曼彻斯特编码经过差分相移键控调制后发送到宽带电缆上，调制后的10Mb&#x2F;s信号占用14MHz的带宽</p><p><strong>802.3以太网标准-“5-4-3”规则</strong></p><ul><li>一个以太网最多只允许含5个网段</li><li>最多只允许使用4个中继器</li><li>其中3个网段上可以接终端</li></ul><p><strong>IEEE 802.3以太网主要技术特性</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071604474.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>以太网的传输介质特性比较</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071605704.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>以太网物理层编码技术</strong></p><p>曼彻斯特编码：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071606860.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="以太网数据封装格式"><a href="#以太网数据封装格式" class="headerlink" title="以太网数据封装格式"></a>以太网数据封装格式</h2><p><strong>ETHRNET Ⅱ标准定义的数据帧分装格式</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071607946.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>以太网数据帧的长度在 64-1518字节之间</p><p><strong>IEEE 802.3标准数据帧</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071609154.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>与ETHRNET Ⅱ标准数据帧的区别在于，Ethernet Ⅱ格式中包含一个Type字段，标识以太帧处理完成后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段</p><h2 id="Mac子层"><a href="#Mac子层" class="headerlink" title="Mac子层"></a>Mac子层</h2><p><strong>常见的冲突避免技术</strong></p><ol><li>载波侦听多路访问&#x2F;冲突检测（CSMA&#x2F;CD）</li><li>令牌环</li><li>载波侦听多路访问&#x2F;冲突避免（CSMA&#x2F;CA）</li></ol><p>MAC帧的封装功能</p><ul><li>成帧（帧定界、帧同步）和卸帧</li><li>编址与寻址（源和目的地址的处理）</li><li>差错检测（由更高层负责矫正差错）</li></ul><h2 id="802-3的MAC子层的主要功能"><a href="#802-3的MAC子层的主要功能" class="headerlink" title="802.3的MAC子层的主要功能"></a>802.3的MAC子层的主要功能</h2><p><strong>介质接入管理功能</strong></p><ul><li>信道分配（避免碰撞，介质接入控制）</li><li>竞争解决（处理碰撞，退避延时重发等）</li></ul><p>以太网使用带碰撞检测的载波侦听多路访问（CSMA&#x2F;CD）技术的总线型网络</p><p><strong>多点接入</strong>——是总线网络，许多计算机以多点接入的方式连接在一根总线</p><p><strong>载波监听</strong>——在发送数据之前要检测总线上是否有其他计算机在发送数据，如果有暂时不要发送，以避免发送碰撞</p><p><strong>碰撞检测</strong></p><ul><li>计算机边发数据边检测信道上信号电压大小</li><li>当检测到的电压摆动值超过门限值则表明发生了碰撞</li></ul><p><strong>传播时延对载波监听的影响</strong></p><p>使用CSMA&#x2F;CD协议的以太网不能同时进行发送和接收</p><p>每个站在自己发送数据后2t时间内，存在着遭遇碰撞的可能性，因此以太网不能保证在某一段时间内能够将自己的数据帧成功的发送出去，这称为发送的不确定性</p><h2 id="MAC层的硬件地址"><a href="#MAC层的硬件地址" class="headerlink" title="MAC层的硬件地址"></a>MAC层的硬件地址</h2><p>MAC层地址指网卡上的地址，共48位，前24位是厂商代号，后24位由厂商自行指派。硬件地址又称物理地址或MAC地址。实际上就是网卡地址或网卡标识符<br>EU1-48。采用六字节表示，EUU为扩展惟一标识符。</p><ul><li>前三字节是机构惟一标识符OUI，</li><li>后三字节称为扩展标识符。</li></ul><p>名字指我们所要寻找的那个资源<br>地址指出那个资源在何处<br>路由告诉我们如何到达该处</p><p>所有的网卡都能够识别单播和广播地址，有的网卡通过编程的方法可以识别多播地址</p><h2 id="CSMA-x2F-CD-技术"><a href="#CSMA-x2F-CD-技术" class="headerlink" title="CSMA&#x2F;CD 技术"></a>CSMA&#x2F;CD 技术</h2><p>CSMA（carrier sense multiple access：载波侦听多址接入）技术</p><p>CSMA&#x2F;CD 带碰撞检测的载波侦听多址接入技术</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>任一个网络节点在它要发送帧之前，先监测一下广播信道中是否存在别的节点正在发送帧的载波信号。如果监测到这种信号，说明信道正忙，否则信道是空闲的。</p><p>若测得空闲，或者立即将自己的帧发送出去，或者为慎重起见暂时不发送出去；</p><p>若测得信道忙，或者继续坚持监测载波，或者暂时退避一段时间再监测</p><ul><li>非坚持型CSMA</li><li>1-坚持型CSMA</li><li>p-坚持型CSMA</li></ul><h3 id="非坚持CSMA"><a href="#非坚持CSMA" class="headerlink" title="非坚持CSMA"></a>非坚持CSMA</h3><p>当一个网络节点准备发送数据帧之前先监测信道，若测得信道空闲，立刻启动发送帧。若信道正忙，则暂时不坚持监测信道，随机延迟一段时间后再次监测信道状态。如此循环，直到将帧发送完为止。</p><p><strong>特点</strong></p><p>当监测到信道忙时，能主动地退避一段随机时间，有利于减少冲突机会，可提高吞吐率和信道的利用率。</p><h3 id="1-坚持型CSMA"><a href="#1-坚持型CSMA" class="headerlink" title="1-坚持型CSMA"></a>1-坚持型CSMA</h3><p>当一个网络节点准备发送数据帧之前先监测信道，若测得信道空闲，立刻启动发送帧。若信道正忙，则坚持继续监测信道，直到监测到信道空闲时，立即启动发送帧。</p><p>由于它在信道忙时要坚持监测信道，可能会有多个节点同时监测到信道空闲而同时采取发送行动，导致吞吐性能比非坚持型CSMA差。但由于控制简单，很有实用价值。</p><h3 id="p-坚持型CSMA"><a href="#p-坚持型CSMA" class="headerlink" title="p-坚持型CSMA"></a>p-坚持型CSMA</h3><p>一方面坚特对信道状态的持续监测，及时确知信道忙闲情况，避免信道时间的浪费；</p><p>另一方面，即使已监测到信道空闲，也不一定要立刻发送，要求任一节点以(1-P)的概率主动退避。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205071947009.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>“边说边听”</strong>：任一站在发送数据帧期间要保持侦听信道的碰撞情况。一旦检测到碰撞，应立即中止发送。<br><strong>“强化干扰”</strong>：发送站在检测到碰撞并停止发送后，立即发送一段“强化干扰”信号，以加强碰撞检测效果。<br><strong>“基本等待时间”</strong>：任一站若能完整地发完一个帧，停顿一个时间(BWT&#x3D;2tpmax)并倾听信道情况。若在此期间未发生碰撞，则可确认该帧已发送成功。</p><hr><h1 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h1><h2 id="交换式以太网概述"><a href="#交换式以太网概述" class="headerlink" title="交换式以太网概述"></a>交换式以太网概述</h2><p>为提高网络可用性，保证各种终端设备间正常通信，常采用<strong>多条链路连接</strong>交换设备形成备份连接，以保证线路上的单点故障不会影响正常网络的通信。冗余链路会导致<strong>交换回路</strong>的产生，网络中必须有一个机制来阻止回路。</p><p><strong>主要功能分为两部分：****建立虚连接</strong>和<strong>转发</strong>。</p><ul><li>当两个站点间有包要传送时，在这两个站点间临时建立一条<strong>点对点的连接</strong>，包发送完后，就立即拆除这条连接。</li><li>在交换机内部保存了一张地址表，存储所连接的各站点所在的交换机端口号和MAC地址之间的对应关系。</li><li><strong>过程：</strong>交换机从一个端口收到包→识别出包中的目的站MAC地址→查地址表一→得到目的站所在的端口号→在两个端口间建立一条虚连接→将包从源端口发送到目的端口→包发送完后→拆除这条虚连接。</li></ul><p><strong>包转发技术</strong><br>分三种：存储转发、切入法和改进切入法</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081436843.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>为提高可靠性，常在局域网之间采用多台交换设备链接，以保证线路上的单点故障不会影响正常网络的通信。但网络中冗余链路的引入导致拓扑结构中产生了回路，出现帧的循环转发。</p><p>主机发出一个带有未知目的地址的帧F，而对于未知目标地址的帧，交换机都采用扩散法</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081437251.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h2><p><strong>生成树协议的功能</strong></p><ul><li>解决网络中由备份链接产生的环路问题。</li><li>生成树协议通过生成树算法(Spanning Tree Algorithm,STA)生成一个没有环路的网络。当主要链路出现故障时，能够自动切换到备份链路。</li></ul><p><strong>生成树协议的原理</strong></p><ul><li>当网络中存在环路时，通过一定的算法将交换机的某些端口进行阻塞，使网络形成一个无环路的树状结构</li></ul><p><strong>生成树协议的工作过程：</strong> </p><p>在网络中选择一个交换机作为根交换机，比较优先级，比较MAC地址（较小的获胜）通过Hello BPDU</p><ol><li><p>根端口的选择<br>除根交换机以外的每台交换机都将选择一个“最靠近”根交换机的端口作为根端口(Root Port)</p></li><li><p>通过判断有<strong>最小根路径成本</strong>(Lowest Root Path Cost)的端口来实现的。端口根路径成本是指从该端口到根交换机的路径成本。</p></li><li><p>指定端口的选择<br>在每个网段选择一个交换机端口处理该段网络的流量，在网段内有最小根路径成本的端口就成为<strong>指定端口</strong>(Designated Port)。</p></li><li><p>删除桥接环<br>根端口和指定端口<strong>转发</strong>(Forwarding)<strong>状态</strong><br>既不是根端口也不是指定端口的交换机端口被设为<strong>阻塞状态</strong><br>这就断开了不设置阻塞而会形成的所有桥接环(Bridging Loop)。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081447804.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>生成树协议的端口状态</strong></p><ul><li><strong>Disabled(禁用)：</strong>为了管理目的或因为发生故障将端口关闭。</li><li><strong>Blocking(阻塞)：</strong>端口不能接收或传输数据，不能把MAC地址加入它的地址表，只能接收BPDU。</li><li><strong>Listening(监听)：</strong>端口不能接收或传输数据，不能把MAC地址加入到地址表，只能接收或发送BPDU。</li><li><strong>Learning(学习)：</strong>端口不能传输数据，但可以发送和接收BPDU。可以学习MAC地址，并将其加入到地址表中。</li><li><strong>Forwarding(转发)：</strong>能够发送和接收数据，学习MAC地址，还能发送和接收BPDU</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081450172.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>生成树协议的缺点</strong></p><ul><li>解决交换链路冗余问题。缺点是<strong>收敛速度慢</strong>。</li><li>拓扑发生变化时<strong>产生时延</strong>，默认值15秒。所有交换机收到之前，若旧拓扑结构中处于转发的端口还没有发现，则可能存在<strong>临时环路</strong>。</li><li>为了解决临时环路的问题，生成树使用了一种定时器策略，定时器策略至少<strong>两倍转发时延的收敛时间</strong>。</li></ul><p><strong>生成树性能的三个计时器</strong></p><ul><li>**Hello timer(BPDU发送间隔)**：定时发送BPDU报文的时间间隔，默认为2秒。</li><li>**Forward-Delay timer(转发时延)**：端口从listening转为learning,或者从learning转为forwarding间隔为15秒。</li><li>**Max-Age timer(最大保留时间)**：BPDU报文消息生存的最长时间。当超过这个时间，报文消息将被丢弃，默认为20秒。</li></ul><h2 id="快速以太网"><a href="#快速以太网" class="headerlink" title="快速以太网"></a>快速以太网</h2><p><strong>100BASE-T快速以太网</strong>(Fast Ethernet)，是在双绞线上传送100Mbit&#x2F;s基带信号的星型拓扑以太网。</p><p>保留了传统以太网帧格式、介质访问控制方法CSMA&#x2F;CD、组网方法，最短帧长仍为64字节。每个比特发送时间由100ns降至10ns,它可以在原来的10BASE-T网上一起运行保护了原有的网络投资利益。其国际标准代号为802.3u。只要更换一张网卡，再配100Mb&#x2F;s的集线器，就可以由10BASE-T以太网直接升级到100BASE-T。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081507773.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><p><strong>干兆以太网</strong></p><p>其标准802.3z有以下几个要点</p><ol><li>在1Gbit&#x2F;s下全双工和半双工两种方式工作。</li><li>使用802.3协议规定的帧格式。把Ethernet每个比特的发送时间由100ns降低到了1ns。</li><li>在半双工方式下使用CSMA&#x2F;CD协议（全双工方式不需要使用CSMA&#x2F;CD协议）。</li><li>与10BASE-T和100BASE-T技术向后兼容。从10Mb&#x2F;s的Ethernet升级到Fast Ethernet:或吉位以太网非常容易。</li></ol><p><strong>干兆以太网-1000BASE-X(802.3z标准)</strong></p><ul><li>1000BASE-SX:SX短波长，使用纤芯直径62.5μm和50μm多模光纤，传输距离为275m和550m。</li><li>1000BASE-LX:LX长波长，使用纤芯直径62.5μm和50μm的多模光纤时，传输距离550m。使用纤芯直径为10um的单模光纤时，传输距离5km。</li><li>1000BASE-CX:CX铜线，使用两对短距离的屏蔽双绞线电缆，传输距离为25m。</li></ul><p><strong>干兆以太网-1000BASE-T(802.3ab标准)</strong></p><ul><li>使用4对5类线UTP,传送距离为100m。</li><li>工作在半双工方式时，必须进行碰撞检测。</li><li>一个网段的最大长度为100m,采用了“”载波延伸”的办法，并增加了分组突发的功能。</li><li>全双工方式时，不使用载波延伸和分组突发。</li></ul><p><strong>载波延伸(carrier extension)法</strong>来进行碰撞检测，最短帧长仍为64字节，将争用时间增大为512字节，不足用特殊字符填充在帧的后面。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081510419.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>**分组突发(packet bursting)**是有很多短帧要发送，第一个短帧采用载波延伸方法填充，随后短帧一个接一个地发送，直到达到1500字节或稍多一些为止。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081511140.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>10吉比特以太网</strong></p><p>10吉比特以太网即万兆以太网，其标准为lEEE802.3ae。</p><ul><li>帧格式与802.3标准规定的帧格式完全相同</li><li>保留802.3标准规定的以太网最小和最大帧长</li><li>10吉比特以太网只使用光纤作为传输媒体</li><li>10吉比特以太网只工作在全双工方式，不存在争用问题，也不使用CSMA&#x2F;CD协议</li></ul><p><strong>共享型以太数据帧处理如下：</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081513257.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>交换型以太数据帧处理如下：</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081514001.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用CAM表，CAM表指MAC地址与交换机端口的二元组映射关系。</p><ul><li>交换型以太网中，实现有针对性地数据帧转发</li><li>基于源MAC地址学习，源MAC地址与端口建立映射关系</li><li>基于目的MAC地址转发，得到响应的MAC地址与端口建立映射关系</li></ul><hr><h1 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h1><h2 id="虚拟局域网概述"><a href="#虚拟局域网概述" class="headerlink" title="虚拟局域网概述"></a>虚拟局域网概述</h2><p>**虚拟局域网(Virtual LAN,VLAN)**，是由一些局域网网段构成的可跨越不同物理网段、不同网络类型的逻辑网络。每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个VLAN.</p><h2 id="VLAN的特点"><a href="#VLAN的特点" class="headerlink" title="VLAN的特点"></a>VLAN的特点</h2><p>一个虚拟工作组可以跨越不同的交换机来组成一个广播域。</p><p>虚拟局域网支持任意多个站点间的组合，一个站点或工作组可以属于多个虚拟工作组。</p><p>虚拟局域网可大大简化网络的管理</p><p>虚拟局域网允许管理员在中央节点来配置和管理网络。</p><p>虚拟局域网为网络设备的变更和扩充提供了一种有效的手段。</p><h2 id="VLAN的信息交换方式"><a href="#VLAN的信息交换方式" class="headerlink" title="VLAN的信息交换方式"></a>VLAN的信息交换方式</h2><p><strong>端口交换：</strong> 把端口配置到一个或若干个背板连接共享HUB上，独立的由端口组合的共享网络段，每一个连接到端口上的用户被分配到其中一个段上。</p><p><strong>帧交换：</strong> 交换机每一个端口能提供一个独立的共享网络端口，在此端口上既可以连接共享HUB,也可以连接单独客户站。</p><p><strong>信元交换：</strong> 核心是由一个或多个ATM交换机组成，在ATM交换机上实现信元交换。</p><h2 id="VLAN的分类"><a href="#VLAN的分类" class="headerlink" title="VLAN的分类"></a>VLAN的分类</h2><ol><li><p><strong>按交换机端口划分：</strong>按交换机的端口来划分虚拟局域网，将同一虚拟工作组的端口设置成具有相同的广播域的虚拟子网，只允许同一广播域端口之间互相通信，各虚拟子网之间相对独立。由端口划分的虚拟局域网称为<strong>物理层虚拟局域网</strong>。</p></li><li><p><strong>按MAC地址划分：</strong>该虚拟工作组的广播域是按用户工作站的MAC地址来划分的，又称为<strong>链路层虚拟局域网</strong>。</p></li><li><p><strong>按P地址划分：</strong>是根据IP地址来定义虚拟局域网，又称为<strong>网络层虚拟局域网</strong>。</p></li><li><p><strong>按应用划分：</strong>根据应用所需的网络带宽和服务质量级别来定义虚拟局域网。</p></li></ol><h2 id="虚拟局域网示意图"><a href="#虚拟局域网示意图" class="headerlink" title="虚拟局域网示意图"></a>虚拟局域网示意图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205081523755.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="VLAN的路由"><a href="#VLAN的路由" class="headerlink" title="VLAN的路由"></a>VLAN的路由</h2><p>虚拟局域网主要采用<strong>集中式路由</strong>和<strong>分布式路由</strong></p><ul><li><p>集中式路由策略是指所有虚拟局域网都通过一个中心路由器实现互连。</p></li><li><p>分布式路由策略是将路由选择功能适当地分布在带有路由功能的交换机上。</p></li></ul><h2 id="VLAN的管理"><a href="#VLAN的管理" class="headerlink" title="VLAN的管理"></a>VLAN的管理</h2><p>虚拟局域网是通过网络管理软件实现的。</p><p>网络管理软件运行在与交换机相连的网管工作站上，负责网络配置、性能监控、故障检测与诊断以及网络安全性等方面的网络管理。</p><p>网络管理软件通常采用图形化的用户界面(GUI)，易于操作和理解。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络传输介质</title>
      <link href="/2022/05/06/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/"/>
      <url>/2022/05/06/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="有线传输介质"><a href="#有线传输介质" class="headerlink" title="有线传输介质"></a>有线传输介质</h1><h2 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h2><p>双绞线电缆是由按一定密度的螺旋结构排列的两根包有绝缘层的铜线部再包裹屏蔽层或橡塑外皮而构成。</p><p>双绞线电缆分为**屏蔽双绞线(STP)<strong>和</strong>非屏蔽双绞线(UTP)**两大类。</p><p>双绞线由两根相互绝缘的导线按照一定规格相互缠绕在一起，可以实现冲抵干扰，降低信号传输衰减的效果。</p><ol><li><p>非屏蔽双绞线(UTP)<br>优点：尺寸小、重量轻、容易弯曲；价格便宜；容易安装和维护。<br>缺点：<strong>抗干扰能力较弱</strong>；传输距离比较<strong>短</strong>。<br>UTP分为：3类线、4类线、5类线和超5类线，适合于楼宇内部的结构化布线。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061644495.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>屏蔽双绞线(STP)<br>优点：传输<strong>质量较高</strong>；电缆尺寸和重量与UTP相当。<br>缺点：安装不合适有可能引入外界干扰；成本较高。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061644226.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><p><strong>目前常用的UTP线缆类型如下：</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061645384.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h2><p>同轴电缆由两个导体组成，是一个空心圆柱形网状导体围裹着一个实心导体的结构。</p><p>同轴电缆可分为两种基本类型，<strong>基带同轴电缆</strong>和<strong>宽带同轴电缆</strong>。</p><p><strong>同轴电缆的结构</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061647915.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>同轴电缆的特性</strong></p><p><strong>物理特性：</strong>频率范围较宽。<br><strong>传输特性：</strong></p><ul><li>粗电缆：抗干扰性能好，传输距离远</li><li>细电缆：价格便宜，传输距离近</li></ul><p><strong>连通性：</strong>适于点到点及点到多点的连接。<br><strong>地理范围：</strong>距离大，几干米甚至几十干米。<br><strong>价格：</strong>高于双绞线，低于光纤。</p><h2 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h2><p>光纤是一种能够传导光信号的介质。光纤由纤芯、包层两部分构成。纤芯为光通路；包层由多层反射玻璃纤维构成，用来将光线反射到纤芯上。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061709035.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>光线在光纤中的传输方式依靠全反射</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061710935.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>光纤的特性</strong></p><p><strong>物理特性：</strong> 两根光纤组成传输系统，按波长范围可分成3种：0.85μm、1.3μm、1.55μm.<br><strong>传输特性：</strong> 数据传输率可达几干Mb&#x2F;s,传输距离达几干米。<br><strong>连通性：</strong> 普遍用于点到点的链路。<br><strong>地理范围：</strong> 6km~8km的距离内不用中继器传输。<br><strong>抗干扰性：</strong>不受电磁波干扰或噪声影响。<br><strong>价格：</strong>目前价格较高，但随着技术的改进会大幅下降。</p><hr><h1 id="无线传输介质"><a href="#无线传输介质" class="headerlink" title="无线传输介质"></a>无线传输介质</h1><h2 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h2><p><strong>微波中继通信</strong>是利用电磁波在<strong>对流层</strong>的视距范围内传输的一种通信方式，其频率般在1GHz至20GHz左右。</p><p>由于受地形和天线高度的限制，两站间的通信距离一般为30~50km。故长距离传输时，必须建立多个<strong>中继站</strong>。</p><p><strong>优点：</strong></p><ol><li>通信信道容量大</li><li>微波传输质量较高</li><li>建设投资少，见效快</li></ol><p><strong>缺点：</strong></p><ol><li>相邻站之间必须直视，不能有障碍物</li><li>有时会受恶劣气候的影响</li><li>隐蔽性和保密性较差</li><li>使用和维护耗费较大</li></ol><h2 id="卫星通信"><a href="#卫星通信" class="headerlink" title="卫星通信"></a>卫星通信</h2><p><strong>微波通信的一种方式</strong>，只不过它是利用位于高空的人造地球卫星作为<strong>中继器</strong>的一种微波接力通信。</p><p>卫星通信的最大特点是通信距离远，且通信费用与通信距离无关，非常适合于广播通信。卫星通信具有<strong>较大的传播时延</strong>，系统的<strong>保密性较差</strong>。</p><hr><h1 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h1><p>按数据代码的传输顺序：串行传输和并行传输</p><p>按数据传输的体制：模拟传输和数字传输</p><p>按数据传输的同步方式：同步传输和异步传输</p><p>按数据传输是否经过调制：基带传输和频带传输</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的硬件、软件及层次结构</title>
      <link href="/2022/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%92%8C%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/05/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%92%8C%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络的硬件"><a href="#计算机网络的硬件" class="headerlink" title="计算机网络的硬件"></a>计算机网络的硬件</h1><h2 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h2><p>网卡又名<strong>网络适配器</strong>（Network Internet Card <em>NIC</em>）,是计算机和网络线缆之间的物理接口。任何计算机想要连入网络都必须通过网卡</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061329130.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>网卡的作用：</strong>将计算机要发送的数据变换成<strong>数据包</strong>，转换成<strong>串行</strong>的<strong>光信号</strong>或<strong>电信号</strong>送到网线上传输；同样把网线上传输过来的信号转换成<strong>并行</strong>的<strong>数字信号</strong>，提供给计算机</p><p><strong>网卡的功能：</strong>并行数据和串行信号之间的转换，数据包的拆装，网络访问控制和数据缓冲等</p><h2 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h2><p>网线是用于连接计算机和通信设备之间的通信线路，常用的有<strong>双绞线</strong>，<strong>光纤</strong></p><p><strong>双绞线：</strong> 简单易用，造价低廉，一般用于局域网或计算机之间少于100m的连接</p><p><strong>光纤：</strong> 一般用于传输速率高，传输信息量大的计算机网络。光纤的传输质量好、速度快，但造价和维护比较贵</p><h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p><strong>主要功能</strong>：对接收到的<strong>信号进行再生整形放大</strong>，以<strong>延长</strong>网络的传输距离，同时把所有计算机<strong>终端集中</strong>在以它为中心的节点上</p><p>集线器工作在网络最底层，不具备任何智能，它只是简单的把电信号放大，然后转发给所有接口。集线器一般只用于局域网</p><h2 id="调制解调器"><a href="#调制解调器" class="headerlink" title="调制解调器"></a>调制解调器</h2><p><strong>调制解调器(Modem)<strong>是</strong>计算机</strong>与<strong>电话线</strong>之间进行信号转换的装置，它完成计算机的<strong>数字信号</strong>与电话线的<strong>模拟信号</strong>之间的互相<strong>转换</strong>。使用调制解调器可以使计算机接入电话线，并利用<strong>电话线接入因特网</strong>。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机是一个拥有智能和学习能力的设备。它可以学习掌握网络的结构及与它相连计算机的相关信息，并且可以对接收到的数据进行过滤，再将数据包送至与目的主机相连接的接口。用交换机可组建局域网或者把两个网络连接起来。</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><strong>路由器(Router)<strong>为网络中数据</strong>选择路由</strong>和<strong>转发数据</strong>，是计算机网络的核心设备。相当于高速公路中的立交桥。路由器可以<strong>连接多个网络或网段</strong>，并对不同网络或网段之间的数据信息进行“翻译”，使它们能够相互“读”懂对方的数据。</p><p>路由器提供<strong>分组过滤</strong>、<strong>分组转发</strong>、<strong>优先级</strong>、<strong>复用</strong>、<strong>加密</strong>、<strong>压缩</strong>和<strong>防火墙</strong>等功能，并且可以进行<strong>性能管理</strong>、<strong>容错管理</strong>和<strong>流量控制</strong>。</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>在计算机网络中专门用于为其他计算机提供服务的计算机叫做服务器。服务器就是一台运行了服务进程的计算机。服务器是计算机网络中一个重要的成员。如我们上网浏览的网页就来源于WWW服务器。</p><h2 id="计算机网络终端"><a href="#计算机网络终端" class="headerlink" title="计算机网络终端"></a>计算机网络终端</h2><p>一般计算机网络的终端指的是一台独立的计算机。但随着硬件技术的发展，已经有很多其他终端比如手机，在未来，终端和独立的计算机可能会逐渐失去严格的界限，可能会有更多的智能设备出现在未来计算机网络中</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061348830.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="计算机网络中的软件"><a href="#计算机网络中的软件" class="headerlink" title="计算机网络中的软件"></a>计算机网络中的软件</h1><p>计算机网络软件是用来<strong>驾驭</strong>和<strong>管理</strong>计算机网络<strong>硬件资源</strong>的，使得用户能够有效地利用计算机网络的资源。在计算机网络软件中，<strong>网络协议</strong>是网络软件系统中最重要的内容，有了网络协议的支持才有<strong>网络操作系统</strong>和其他<strong>网络应用软件</strong>。</p><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>协议：通信双方为了实现通信而设计的约定或对话规则<br>网络协议：网络中的计算机为了相互通信和交流而约定的规则</p><h2 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h2><p>网络操作系统负责管理整个网络资源，是计算机网络的心脏。网络操作系统一般是在计算机单机操作系统的基础上建立起来的，加入了强大的网络功能。如Windows操作系统家族里有单机版的操作系统Windows XP Home Edition,也有网络操作系统Windows2003 Server等。</p><p><strong>网络操作系统的功能：</strong></p><ul><li>支持多任务</li><li>支持大内存</li><li>支持对称多处理</li><li>支持网络负载均衡</li><li>支持远程管理</li></ul><p><strong>网络操作系统的结构：</strong></p><p>局域网的组建模式通常有<strong>对等网络</strong>和<strong>客户机&#x2F;服务器网络</strong>两种。客户机和服务器网络是目前组网的标准模型。</p><p>客户机&#x2F;服务器网络操作系统由客户机操作系统和服务器操作系统两部分组成。</p><ul><li><strong>客户机操作系统</strong>的功能是让用户能够使用本地资源，处理本地的命令和应用程序，实现客户机与服务器的通信。</li><li><strong>服务器操作系统</strong>的功能是管理服务器和网络中的各种资源，实现服务器与客户机的通信，提供网络服务和网络安全管理。</li></ul><h2 id="其它网络软件"><a href="#其它网络软件" class="headerlink" title="其它网络软件"></a>其它网络软件</h2><p><strong>即时通讯类软件</strong>：如腾讯QQ,微软MSN,网易POPO,新浪UC等。</p><p><strong>Web浏览器</strong>：Internet Explorer,Mozilla Firefox,Tencent Traveler(腾讯TT)等。</p><p><strong>杀毒软件</strong>：诺顿、卡巴斯基、瑞星、江民、金山毒霸等。</p><p><strong>网络播放器</strong>：暴风影音、干干静听等。</p><p><strong>网络下载工具</strong>：迅雷(Thunder)、BitComet(BT)、酷狗(KuGoo)等。</p><h2 id="通信的规则"><a href="#通信的规则" class="headerlink" title="通信的规则"></a>通信的规则</h2><p>实现通信的几个要解决的基本问题：</p><ol><li><p>如何将不同表现形式的数据放到媒介中传输？<br>为了解决这个问题，一般是将数据转换为二进制编码进行存储和传输</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061414128.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>如何确保数据被发送给正确的接收方<br>本质是解决在通信过程中寻址的问题，每个通信的参与者必须满足以下两个条件：</p><ul><li>拥有某种地址信息来表示自己的物理位置</li><li>有用某种身份识别信息来标识该设备本身<br>IP地址就是为表示设备位置而定义的逻辑地址</li></ul></li><li><p>如何保证数据有序高效可靠的到达接收方<br>有序：包交换网络允许存在后发先至的情况<br>高效、可靠：需要一种机制来权衡二者的关系</p><ul><li>尽可能短的时间内完成数据的收发。</li><li>根据接收情况实时调整数据的发送速率</li></ul></li></ol><h2 id="网络协议的作用"><a href="#网络协议的作用" class="headerlink" title="网络协议的作用"></a>网络协议的作用</h2><p>实现数据通信的两个要素：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061429739.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>通信系统双方通过遵循某个协议可以让整个通信系统产生既定的效果，但协议本身不会赋予或剥夺任何通信系统双方的功能</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061433599.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>协议栈的必要性</strong></p><p>对于一个复杂的通信系统，通常具备以下特点    </p><ul><li>数据的表现形式繁多</li><li>传输介质类型不尽相同</li><li>涉及的操作流程繁琐</li></ul><p>因此，需要为每个通信系统制定一个分层的框架，以实现</p><ul><li>为特定的操作提供规范化的标准（协议）</li><li>不同的协议在内容上不会相互重复或冲突</li></ul><hr><h1 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h1><p>计算机网络体系结构是计算机网络及其部件所应完成的功能的精确定义。网络体系结构通常应包括以下内容：网络功能部件的定义及相互关系的描述、网络与用户之间的接口定义</p><p>网络体系结构的三要素：</p><ul><li>层：能提供某种或某一类<strong>服务功能</strong>集合的逻辑构造</li><li>协议：为完成该层<strong>对等实体</strong>之间通信所必须遵守的<strong>规则</strong>或<strong>标准</strong></li><li>接口：两个相邻协议层之间<strong>交换信息</strong>的<strong>连接点</strong></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061506111.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络体系结构是一种分层的层次式结构：</p><ul><li><strong>分层的原因：</strong>复杂的问题分而治之，逐个解决</li><li><strong>分层的思想：</strong>每层都在它的下一层服务的基础上提供更高级的增值服务，最高层提供能运行的应用程序的服务</li><li><strong>分层的好处：</strong>使每层实现一种相对对立的功能，每次不必知道下面一层是怎么实现的，只要知道下层通过接口提供的服务是什么，以及本层能向上提供什么服务就好</li><li><strong>分层的原则：</strong><ul><li>当需要一个不同抽象体时，应该单独创建一层</li><li>每层都应该执行一个明确定义的功能</li><li>选择每一层功能时，应该考虑到定义国际化标准的协议</li><li>选择层的边界时，应使通过接口的信息量最少</li><li>层数应该足够多，保证功能不被混在一层中</li><li>层数也不能太多，避免体系结构变得过于庞大</li></ul></li></ul><hr><h1 id="OSI-7层参考模型"><a href="#OSI-7层参考模型" class="headerlink" title="OSI 7层参考模型"></a>OSI 7层参考模型</h1><p>国际标准化组织ISO(International Organization for Standardization)于1979年12月公布了开放式系统互连参考模型OSl&#x2F;RM(Reference Model ofOpen System Interconnection)，”开放”是指按OSI标准建立的系统可以和世界上任意一个也按OSI标准建立起来<br>的系统相互进行通信。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061546809.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>第1层到第3层主要负责通信功能，一般称为通信子网层。第5层到第7层属于资源子网的功能范畴，称为资源子网层。传输层起着衔接上下三层的作用。</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层是OS引参考模型的最底层。物理层为通信提供物理链路，实现<strong>比特流(bt)<strong>的透明传输。物理层的作用是要尽可能地屏蔽掉不同物理设备和传输媒体的差异，使其上面的数据链路层感觉不到这些差异。<br>物理层定义了四个重要特性：</strong>机械特性</strong>、<strong>电气特性</strong>、<strong>功能特性</strong>和<strong>规程特性</strong>，以便建立、维护和拆除物理链接。</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层是在物理层提供的比特流服务基础上，建立相邻结点间的数据链路，传输按一定格式组织起来的<strong>数据帧</strong></p><blockquote><p>作用：通过数据链路层协议，在<strong>不太可靠的物理链路</strong>上实现<strong>可靠的数据传送</strong><br>主要功能：链路管理、帧的装配与分解、帧同步、<strong>流量控制</strong>、<strong>差错控制</strong>、将数据和控制信息区分开、透明传输、寻址等<br>数据链路层提供了网络中相邻结点间透明的、可靠的信息传输</p></blockquote><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>功能：提供源站到目标站的信息传输服务，负责由一个站到另一个站点的路径选择。网络层在通信子网中传输<strong>信息包或报文分组</strong></p><p>网络层为了向传输层提供整个网络上任意两个结点之间数据传输通路，需要解决建立、维护以及结束两个站点之间的联系和由此而引起的<strong>路径选择</strong>、<strong>流量控制</strong>、<strong>阻塞</strong>和<strong>死锁</strong>等问题</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层的作用是为不同系统内的会话实体建立<strong>端到端的连接</strong>，执行端到端的<strong>差错</strong>、<strong>顺序</strong>和<strong>流量控制</strong>，数据传输的基本单位是<strong>报文</strong>。<br>传输层将源主机与目标主机直接以点到点方式连接起来，把从源主机接收来的报文正确地传送到目的主机，是资源子网与通信子网的接口层。<br>传输层的服务可以提供一条<strong>无差错按顺序的端到端连接</strong>，也可以提供<strong>不保证顺序地独立报文传输</strong>，或<strong>多目标报文广播</strong>。</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>会话层也称为会晤层或对话层。它是在<strong>两个表示实体之间建立起通信伙伴关系</strong>向表示层提供对话服务，并对通信的过程进行管理和协调。</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层负责数据的表示方式，解决<strong>格式和数据表示</strong>问题。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>在OSI环境下为用户提供各种<strong>网络服务</strong>。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061553631.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061612561.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="TCP-x2F-IP-参考模型"><a href="#TCP-x2F-IP-参考模型" class="headerlink" title="TCP&#x2F;IP 参考模型"></a>TCP&#x2F;IP 参考模型</h1><p>TCP&#x2F;IP(Transmission Control Protocol&#x2F;Internet Protocol) 协议是定义所有的数据传输如何在Internet.上进行交换的一个协议集合或一组<strong>协议簇</strong>。这一系列协议是按其中最重要、应用最广泛的两个协议TCP与引P来命名的。目前TCP&#x2F;IP已成为一个事实上的工业标准。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061622273.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="TCP-x2F-IP-主要功能"><a href="#TCP-x2F-IP-主要功能" class="headerlink" title="TCP&#x2F;IP 主要功能"></a>TCP&#x2F;IP 主要功能</h2><p>TCP是传输控制协议，规定了一种可靠的数据信息传递服务；IP协议又称为互联网协议，提供网络之间连接的完善功能。<br>TCP&#x2F;IP主要特点</p><ol><li>与生产厂家无关</li><li>已经在各种计算机上实现</li><li>已被LAN和WAN采用</li><li>被许多政府部门和商业机构采用</li></ol><h2 id="TCP-x2F-IP-体系结构"><a href="#TCP-x2F-IP-体系结构" class="headerlink" title="TCP&#x2F;IP 体系结构"></a>TCP&#x2F;IP 体系结构</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061616131.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h2><p>负责<strong>光&#x2F;电信号</strong>的传递方式. 比如现在以太网通用的网线(双绞线)、早期以太网采用的的同轴电缆(现在主要用于有线电视)、光纤, 现在的wifi无线网使用电磁波等都属于物理层的概念。物理层的能力决定了最大传输速率、传输距离、抗干扰性等. 集线器(Hub)工作在物理层.</p><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>负责设备之间的<strong>数据帧</strong>的传送和识别. 例如网卡设备的驱动、帧同步(就是说从网线上检测到什么信号算作新帧的开始)、冲突检测(如果检测到冲突就自动重发)、数据差错校验等工作. 有以太网、令牌环网, 无线LAN等标准. 交换机(Switch)工作在数据链路层.</p><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><p>负责地址管理和路由选择. 例如在IP协议中, 通过IP地址来标识一台主机, 并通过路由表的方式规划出两台主机之间的数据传输的线路(路由)，路由器(Router)工作在网路层。处理输入<strong>数据报</strong>，用因特网控制报文协议ICMP处理路径、流量控制、拥塞等问题。</p><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><p>提供应用程序间的通信，即端到端的通信。其功能包括：第一、格式化的信息流；第二、提供可靠传输，保证数据无误有序地到达。如传输控制协议 (TCP), 能够确保数据可靠的从源主机发送到目标主机</p><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><p>负责应用程序间沟通，向用户提供一组常用、可以在TCP&#x2F;IP因特网上获得服务的应用程序，如超文本传输协议(HTTP) 、简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等. 我们的网络编程主要就是针对应用层.</p><h2 id="OSI和TCP-x2F-IP参考模型"><a href="#OSI和TCP-x2F-IP参考模型" class="headerlink" title="OSI和TCP&#x2F;IP参考模型"></a>OSI和TCP&#x2F;IP参考模型</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061632369.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>两者都是以<strong>协议栈</strong>的概念为基础，并且协议栈中的<strong>协议彼此相互独立</strong>。<strong>传输层以及传输层以上</strong>的各层都为希望通信的进程提供了一种<strong>端到端</strong>的，与网络无关的服务。</p><p>OSI模型中，服务、接口、协议的<strong>概念非常清晰</strong>，而TCP&#x2F;IP模型中并没有明确地区分三者之间的差异。</p><p>TCP&#x2F;IP一开始就考虑到多种异构网的互连问题，并将互联网协议IP作为TCP&#x2F;IP的重要组成部分。而OSI最初只考虑到使用一种标准的公用数据网络将各种不同的系统互联在一起。</p><p>TCP&#x2F;IP一开始就对面向连接服务和无连接服务并重，TCP&#x2F;IP的<strong>传输层</strong>支持<strong>面向连接服务</strong>和<strong>无连接服务</strong>，<strong>网络层</strong>只支持<strong>无连接的服务</strong>，而OSI的<strong>传输层</strong>只支持<strong>面向连接服务</strong>，<strong>网络层</strong>支持<strong>面向连接服务</strong>和<strong>无连接服务</strong>。</p><p>TCP&#x2F;IP有较好的网络管理功能，而OSI到后来才开始考虑这个问题。</p><p><strong>OSI是先有模型后有协议</strong>，适应范围广，而<strong>TCP&#x2F;IP是先有协议后有模型</strong>，因而TCP&#x2F;IP模型的通用性较差，很难描述其他种类的协议栈。</p><h2 id="设备与层的对应关系"><a href="#设备与层的对应关系" class="headerlink" title="设备与层的对应关系"></a>设备与层的对应关系</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061632980.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="网络体系结构中的数据传送"><a href="#网络体系结构中的数据传送" class="headerlink" title="网络体系结构中的数据传送"></a>网络体系结构中的数据传送</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205061637906.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基本知识学习</title>
      <link href="/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络的产生与发展"><a href="#计算机网络的产生与发展" class="headerlink" title="计算机网络的产生与发展"></a>计算机网络的产生与发展</h1><h2 id="网络的发展历程"><a href="#网络的发展历程" class="headerlink" title="网络的发展历程"></a>网络的发展历程</h2><h3 id="操作系统发展的4个阶段"><a href="#操作系统发展的4个阶段" class="headerlink" title="操作系统发展的4个阶段"></a>操作系统发展的4个阶段</h3><p>第一代（1946-1955）：真空管时代，无操作系统<br>第二代（1955-1965）：晶体管时代，批处理系统<br>第三代（1965-1980）：集成电路时代，多道程序设计<br>第四代（1980-至今）：大规模和超大规模集成电路时代，分时系统</p><p>现代计算机正向着巨型，微型，并行，分布，网络化和智能化几个方向发展</p><h3 id="前网络时代"><a href="#前网络时代" class="headerlink" title="前网络时代"></a>前网络时代</h3><p>早期插卡式的计算机（1946-1955）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205051059511.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="萌芽阶段"><a href="#萌芽阶段" class="headerlink" title="萌芽阶段"></a>萌芽阶段</h3><p>多道批处理系统的问世催生出了一种通信系统——分时系统</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205051114484.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>分时系统实现了<strong>计算机</strong>与<strong>终端</strong>之间的通信，但它仍不是一个计算机网络，使用终端来控制计算机的方式也发生了变化，最初使用直连的串行线缆，后来发展为使用公共电话网络</p><h3 id="雏形阶段"><a href="#雏形阶段" class="headerlink" title="雏形阶段"></a>雏形阶段</h3><p>公共电话网络采用的通信方式成为——<strong>电路交换</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205051117181.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>1964年《分布式通道》中首次提出分布式网络的概念</p><p>1966年首个分布式网络付诸实践——<strong>包交换网络</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205051119325.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>1969年，ARPAnet计划上线测试，ARPAnet通过IMP连接了SRI，UCSB，UCLA，UTAH这四个大学</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205051120706.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="诞生阶段"><a href="#诞生阶段" class="headerlink" title="诞生阶段"></a>诞生阶段</h3><p>连接到ARPAnet，需要美国国防部的授权，为了创建一个拜托政府管控的科研网络，1980年NSF（美国国家科学基金会）出资建立了一个新的计算机网络——CSNET（计算机科学网络），1985年NSF通过骨干网连接更多站点，构建出三层网络——NSFNET，NSFNET成为了未来互联网骨干网的重要组成部分</p><p>计算机网络是20世纪60年代美苏冷战时期的产物，60年代初期，美国国防部领导的高级研究规划署（Advanced Research Project Agency ARPA）提出要研制一种崭新的、能够适应现代战争的、残存性很强的网络，其目的是对付来自苏联的核进攻威胁</p><h3 id="腾飞阶段"><a href="#腾飞阶段" class="headerlink" title="腾飞阶段"></a>腾飞阶段</h3><p>万维网（WWW）标准的发展：</p><ul><li>HTTP和HTML标准出台</li><li>URL提议</li><li>WWW问世</li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052252777.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>对于网络的要求：</p><ul><li>用于计算机之间的数据传输</li><li>能够连接不同类型的计算机</li><li>所有的网络节点都同等重要</li><li>必须有冗余的路由</li><li>尽可能简单，但能够非常可靠的传递数据</li></ul><hr><h1 id="发展中的网络种类"><a href="#发展中的网络种类" class="headerlink" title="发展中的网络种类"></a>发展中的网络种类</h1><h2 id="传统的通信方式"><a href="#传统的通信方式" class="headerlink" title="传统的通信方式"></a>传统的通信方式</h2><p>面向连接的通信方式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052254797.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="新型的通信方式"><a href="#新型的通信方式" class="headerlink" title="新型的通信方式"></a>新型的通信方式</h2><p>无连接的通信方式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052255126.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="面向终端的网络"><a href="#面向终端的网络" class="headerlink" title="面向终端的网络"></a>面向终端的网络</h2><p>以单个计算机为中心的远程联机系统也成为面向终端的计算机通信网，或称它为第一代计算机网络</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052258336.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="面向通信的网络"><a href="#面向通信的网络" class="headerlink" title="面向通信的网络"></a>面向通信的网络</h2><p>网络上的通信处理任务由称为通信控制处理机CCP（Communication Control Processor）来承担，各CCP之间构成的通信子网为资源子网提供信息传输服务，网络上的主机专门负责数据处理，主机和终端构成了资源子网，以通信子网为中心的计算机网络，通常称其为第二代计算机网络</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052316086.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="标准化的网络"><a href="#标准化的网络" class="headerlink" title="标准化的网络"></a>标准化的网络</h2><p>计算机互联要求计算机网络体系必须标准化。OSI参考模型OSI&#x2F;RM（Open System Internet&#x2F;Reference Model），目前已被国际社会所普遍接收，是新一代计算机网络体系结构的基础，人们将符合国际标准化的计算机网络成为第三代计算机网络</p><hr><h1 id="计算机网络简述"><a href="#计算机网络简述" class="headerlink" title="计算机网络简述"></a>计算机网络简述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>计算机网络是利用通信设备和通信线路将地理位置不同，功能独立的多个计算机系统相互连接起来，以功能网上的网络软件（包括网络通信协议、网络操作系统）实现网络中<strong>资源共享</strong>和<strong>信息传递</strong>的系统</p><p>计算机网络是互联的，自治的计算机集合</p><h2 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h2><ol><li>数据通信</li><li>资源共享</li><li>分布式处理</li><li>提高系统的可靠性</li><li>负载均衡</li><li>性能价格比搞，扩充灵活，通信手段多</li><li>提供非常灵活的工作环境</li></ol><hr><h1 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h1><h2 id="按照网络的拓扑结构分类"><a href="#按照网络的拓扑结构分类" class="headerlink" title="按照网络的拓扑结构分类"></a>按照网络的拓扑结构分类</h2><p><strong>星型，树型，环型，总线型和网络型</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052315174.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>星型结构<br>每个节点都有一条单独的线路和中心节点相连，除中心节点外的任何两个节点之间的通信都要经过中心节点，采用<strong>集中控制</strong>，<strong>中心节点就是控制节点</strong><br><strong>优点：</strong> 简单，容易建网，便于管理<br><strong>缺点：</strong> 由于通信线路总长度较长，成本高；对中心节点的可靠性要求高，有单点故障问题（即中心节点故障引起整个网络瘫痪）</p></li><li><p>环型结构<br>网络各节点连成环状，数据信息沿着一个方向传送，通过中间节点存储转发侯到达目的节点<br><strong>优点：</strong> 结构没有路径选择问题，网络管理软件实现简单<br><strong>缺点：</strong> 信息在传输过程中要经过许多节点，有单点故障问题。另外，网络的<strong>吞吐能力较差</strong>，适用于信息传输量不大的情况，一般用于局域网</p></li><li><p>网型结构<br>这种结构无严格的布局规定和构型，其中一个节点可取到若干路径到达另一个节点<br><strong>优点：</strong> 可靠性高<br><strong>缺点：</strong> 所需通信线路总长度长，投资成本高，路径选择技术较复杂，网络管理软件也较复杂</p></li><li><p>树型结构<br>网络中各个节点按照层次进行连接，是一个<strong>分级管理</strong>基础上的<strong>集中式</strong>网络，适合于各种统计管理系统<br><strong>优点：</strong> 通信线路总长度较短，成本低<br><strong>缺点：</strong> 任一节点的故障均会影响它所在的支路网络的正常工作，而且处于越高层次的节点，其可靠性要求越高</p></li><li><p>总线结构<br>网中各节点连接在一条总线上，任一时刻，只允许一个节点占用总线，且只能由该节点发送信息，其他节点处于封锁状态，但允许接收<br><strong>优点：</strong> 网络中任何一个节点的故障不会使整个网络故障，相对而言容易扩展<br><strong>缺点：</strong> 故障管理困难，不利于网络业务量的增加</p></li></ol><h2 id="按网络的覆盖范围分类"><a href="#按网络的覆盖范围分类" class="headerlink" title="按网络的覆盖范围分类"></a>按网络的覆盖范围分类</h2><p>广域网（WAN），局域网（LAN），城域网（MAN）</p><ol><li><p><strong>局域网：</strong> 传输距离有限且行政可控，传输速度较高，以共享网络资源为目的的网络系统（广播技术）<br>局域网有以下两种分类标准：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052339999.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ul><li><p>局域网-全网状型<br>优点：容错性强<br>缺点：扩展性差（不利于增删节点）、建设成本高、邻接关系复杂（n(n-1)&#x2F;2）、路径控制难度高</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052343710.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>局域网-总线型<br>优点：结构简单、资源共享能力强、节点的增删比较方便<br>缺点：容错性差（主要争对总线），电气信号干扰较大（容易发生数据冲突）、不利于故障隔离</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052352702.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>局域网-环状<br>优点：结构简单，建设成本低<br>缺点：容错性差（主要争对节点）、扩展性差（不利于增删节点）、不利于故障隔离</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052354978.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>局域网-星型<br>优点：扩展性强，便于故障隔离<br>缺点：容错性差（主要争对中心节点）、中心节点负荷重、链路利用率低</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052356439.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>局域网-树型<br>优点：扩展性强（节点的增删比较方便）、层次分明<br>缺点：结构复杂、容错性差（主要争对次级节点）</p></li></ul></li><li><p><strong>城域网：</strong> 规模介于广域网和局域网之间的一种较大范围的高速网络<br>两种常见城域网：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052359241.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205052359382.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p><strong>广域网：</strong> 覆盖范围广、传输速率相对低，以数据通信为主要目的的数据通信网络（交换技术）</p><p>又称外网或公网，用于连接不同地区的局域网或城域网</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205060000586.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>广域网和局域网之间的区别：</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205060001147.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p><strong>互联网：</strong> Internet，因特网，i小写时表示多个网络连接在一起所构成的一个大网络<br><strong>特点：</strong></p><ul><li>不属于任何人和机构</li><li>不是一个单一的网络，而是大量异构网络的集合</li><li>任何人都可以连接到互联网中</li><li>连接到互联网的方式多种多样</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep,awk,sed与正则表达式学习</title>
      <link href="/2022/05/04/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/04/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p><code>grep</code> 命令用于查找文件里符合条件的字符串，即查找内容包含制定的范本样式的文件，如果发现某文件的内容符合制定的范式样本，则会把含有范式样本的那一行显示出来</p><p>语法 <code>grep 选项 需要捕获的文字 目标文件</code>，比如从 <code>/etc/passwd</code> 中查找tcpdump相关的信息 <code>grep tcpdump /etc/passwd</code></p><p>选项主要使用的有：</p><ul><li><code>-A</code> 显示捕获行之后的行</li><li><code>-B</code> 显示捕获行之前的行</li><li><code>-C</code> 显示捕获行前后的行</li><li><code>-c</code> 显示符合条件的行数</li><li><code>-i</code> 忽略大小写</li><li><code>-n</code> 输出符合条件文件所在行号</li><li><code>-v</code> 不包含关键字的行</li></ul><p>比如：过滤以#开头的行 <code>grep -v &#39;^#&#39; /etc/ssh/sshd_config</code><br>过滤以#开头的行和空行 <code>grep -v &#39;^#&#39; /etc/ssh/sshd_config | grep -v &#39;^$&#39;</code></p><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>在上面最后的例子中， <code>&#39;^#&#39;</code> 和 <code>&#39;^$&#39;</code> 都是正则表达式的匹配法</p><p>正则表达式(regular expression) 描述了一种字符串的匹配模式，可以用来检测一个串是否含有某种子串，将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p><p>一些正则表达式的测试网站：<br>  <a href="https://regex101.com/">https://regex101.com/</a><br>  <a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a></p><h2 id="匹配普通字符"><a href="#匹配普通字符" class="headerlink" title="匹配普通字符"></a>匹配普通字符</h2><p>普通字符包括没有显示制定为元字符的所有可打印和不可打印字符，包括所有大小写字母，数字，标点符号和一些其他符号</p><p><code>[]</code> 中的字符就是要匹配的字符，<br><code>[aeiou]</code> 单个匹配中括号中的这几个字符<br><code>[^aeiou]</code> 单个匹配不是中括号中这几个的其他字符<br><code>[a-z]</code> 匹配a到z的所有字母<br><code>[\s]</code> 匹配所有空白字符，包括换行，制表，换页等<br><code>[\S]</code> 匹配非空白符<br><code>[.]</code> 匹配除换行符之外的任意单个字符<br><code>[\w]</code> 匹配字母数组下划线</p><p><code>\f</code> 匹配一个换页符<br><code>\n</code> 匹配一个换行符<br><code>\r</code> 匹配一个回车符<br><code>\t</code> 匹配一个制表符<br><code>\v</code> 匹配一个垂直制表符</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041242282.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041243938.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如<code>^*</code>之类的表达式。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041245624.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>使用圆括号 <code>()</code> 将所有选项括起来，相邻的选项之间使用 <code>|</code> 来分隔，<code>()</code> 表示捕获分组，<code>()</code> 会把每个分组里的匹配值保存起来，多个匹配值可以通过数字来索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="string">&quot;123456runoob123runoob456&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/([1-9])([a-z]+)/g</span>)</span><br><span class="line"><span class="comment">// 这里n是一个对象，可以通过索引来查看两个捕获值</span></span><br><span class="line">n[<span class="number">0</span>],n[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041258940.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="grep-与-正则结合"><a href="#grep-与-正则结合" class="headerlink" title="grep 与 正则结合"></a>grep 与 正则结合</h1><p>前面使用 gerp -v <code>^$</code> 这类正则表达式是grep自身支持的，如果想要使用完整的正则语法，可以使用 <code>grep -E</code> 或者写作 <code>egrep</code></p><hr><h1 id="sed-编辑器"><a href="#sed-编辑器" class="headerlink" title="sed 编辑器"></a>sed 编辑器</h1><h2 id="sed概述"><a href="#sed概述" class="headerlink" title="sed概述"></a>sed概述</h2><p><code>Sed</code> 是一个流处理编辑器，它能帮助我们自动处理文件，分析日志文件，修改配置文件等，是一个 “非交互式的” 面向字符流的编辑器，能同时处理多个文件多行的内容</p><ul><li>可以不对原文件改动，把整个文件输出到屏幕</li><li>可以把匹配到的内容输出到屏幕上</li><li>还可以对原文件改动，但是不会在屏幕上返回结果</li></ul><h2 id="sed处理流程"><a href="#sed处理流程" class="headerlink" title="sed处理流程"></a>sed处理流程</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041952863.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="sed参数说明"><a href="#sed参数说明" class="headerlink" title="sed参数说明"></a>sed参数说明</h2><p><code>sed [-hnV][-e &lt;script&gt;][-f &lt;script文件&gt;][文本文件]</code></p><ul><li><code>-e&lt;script&gt;</code>或<code>--ecpression=&lt;script&gt;</code> 以选项中指定的script来处理输入的文本文件</li><li><code>-f&lt;script文件&gt;</code>或<code>--file=&lt;script文件&gt;</code> 以选项中指定的script文件来处理输入的文本</li><li><code>-h</code> 显示帮助</li><li><code>-n</code> 仅显示script处理后的结果</li><li><code>-V</code> 显示版本信息</li></ul><p>sed动作可以理解为操作</p><ul><li><code>a</code> ：新增，a的后面可以接字符串，新增字符串会在目前的下一行</li><li><code>c</code> ：取代，c的后面可以接字符串，这些字符串取代n1,n2之间的行</li><li><code>d</code> ：删除</li><li><code>i</code> ：插入，i的后面可以接字符串，新增的字符串会在目前行的上一行</li><li><code>p</code> ：打印，将某个选择的数据先输出，通常p会与参数sed -n 一起运行</li><li><code>s</code> ：替换，可以直接进行替换，通常这个s的动作可以搭配正则表示</li></ul><h2 id="sed示例"><a href="#sed示例" class="headerlink" title="sed示例"></a>sed示例</h2><p>有如下文件 <code>test.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello 11111</span><br><span class="line">Hello 22222</span><br><span class="line">Hello 33333</span><br><span class="line">Hello 44444</span><br><span class="line">Hello 55555</span><br></pre></td></tr></table></figure><ol><li><p>在文件中查找包含2222的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | sed -n &#x27;/2222/p&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042103352.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在文件中添加第三行，内容为 hello</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;2a hello&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042104861.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>删除第2行到第4行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;2,4d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042106804.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>删除包含222222的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;/22222/d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042108063.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>把 1-3行替换为 hahaha</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;1,3c hahaha&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042109217.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>查找替换，将文本中的Hello换成haha</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;s\Hello\haha\g&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042111513.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>前面的操作，知识在屏幕上按照要求输出了内容，而文件本身没有改变，sed也可以用于文件自身的修改，但这样操作非常危险，有可能误操作将文件改坏，所以我们必须有把握才能这么做</p><p>在什么的操作中，结合 <code>-i</code> 就可以修改文件了，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e &#x27;2a hello&#x27; test.txt</span><br><span class="line">sed -i &#x27;2,4d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042116851.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h2><p>awk 是一种编程语言，用于在 linux&#x2F;unix 下对文本和数据进行处理，支持用户自定义函数和动态正则表达式的功能，是 linux&#x2F;unix 下的一个强大编程工具</p><p>awk一次处理一行内容，对每行可以<strong>切片处理</strong>，空格和制表符为默认分隔符将每行切片，切开的部分再进行各种分析处理</p><h2 id="awk格式"><a href="#awk格式" class="headerlink" title="awk格式"></a>awk格式</h2><p><strong>命令行格式</strong></p><p><code>awk [选项参数] &#39;script&#39; var=value file(s)</code></p><p>script组成： pattern {awk操作命令}</p><ul><li>pattern：正则表达式；逻辑判断式</li><li>awk操作命令：内置函数 print(),printf(),getline…;</li><li>控制命令：if(){..}else{..};while(){…}</li></ul><p>扩展格式：<strong>BEGIN{print “start”}<strong>pattern{commands}<strong>END{print “END”} **<br>注意：加粗的部分在所有commands</strong>之前</strong>和</strong>之后**执行</p><h2 id="awk内置参数"><a href="#awk内置参数" class="headerlink" title="awk内置参数"></a>awk内置参数</h2><ol><li><p>内置变量1：</p><ul><li><code>$0</code> 表示整个当前行</li><li><code>$1</code> 每行第一个字段</li><li>…</li></ul></li><li><p>内置变量2；</p><ul><li><code>NR</code> 每行的记录号，行号</li><li><code>NF</code> 字段数量变量，字段总数</li><li><code>FILENAME</code> 正在处理的文件名</li></ul></li></ol><h2 id="awk示例"><a href="#awk示例" class="headerlink" title="awk示例"></a>awk示例</h2><ol><li><p>以 <code>:</code> 分割，显示&#x2F;etc&#x2F;passwd 的第一列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042131319.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>显示&#x2F;etc&#x2F;passwd的第一列和第七列，用逗号分隔显示，所有行开始前添加列名 <code>start1，start7</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;BEGIN&#123;print &quot;start1,start7&quot;&#125;&#123;print $1&quot;,&quot;$7&#125;END&#123;print &quot;end1,end7&quot;&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042135465.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>匹配某段字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;$1 ~ /00/&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042137767.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>显示前五行的行号，列数，以及行内完整内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n5 /etc/passwd | awk -F : &#x27;&#123;print NR &quot; &quot; NF &quot; &quot; $0&#125;&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042139293.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>条件匹配操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;$3==&quot;0&quot;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042325020.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>这里操作符号可以用 `==`,`>`,`>=`,`<`,`<=`,`!=` 等，和数字比较时，将数字用双引号引起来表示字符串，不加引号表示数字</li><li><p>累加前四行用户的uid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n4 /etc/passwd | awk -F : &#x27;&#123;(sum=sum+$3);print $0&#125;END&#123;print sum&#125;&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042332991.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>流程控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;&#123;if($1&gt;&quot;q&quot;)&#123;print $1&#125;else&#123;print &quot;-&quot;&#125;&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042334615.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>也可以将上面的语句放在一个脚本中去调用,比如在`awkscript`这个文件中写入下面的脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    if($1 &gt; &quot;q&quot;)&#123;</span><br><span class="line">        print $1</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        print &quot;-&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用下面的命令去调用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : -f awkscript /etc/passwd</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本编程学习</title>
      <link href="/2022/05/03/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/03/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本概述"><a href="#shell脚本概述" class="headerlink" title="shell脚本概述"></a>shell脚本概述</h1><p>shell 脚本并不是真正的编程语言，shell脚本是在linux的shell中运行，实际上shell脚本就是命令的集合，类似于windows的批处理命令，我们将需要做的操作写入一个shell脚本中，可以定时执行，一次执行多个命令，shell脚本是提高服务器管理维护的工具。</p><h1 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p><strong>下面实现一个脚本，输入日期和”Hello World!”:</strong></p><ol><li><code>cd /usr/local/sbin</code> 进入一个放shell脚本的目录</li><li><code>vim first.sh</code>  打开一个要编写的shell文件，后缀是<code>.sh</code></li><li>输入shell脚本,并保存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><code>chomd +x first.sh</code> 给脚本赋予执行权限</li><li><code>./first.sh</code> 执行脚本</li></ol><h2 id="shell脚本使用变量"><a href="#shell脚本使用变量" class="headerlink" title="shell脚本使用变量"></a>shell脚本使用变量</h2><p>编写下列脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d=`<span class="built_in">date</span> +%H:%M:%S`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the scirpt start at <span class="variable">$d</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;wait 2 seconds&#x27;</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">d1=`<span class="built_in">date</span> +%H:%M:%S`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the scirpt start at <span class="variable">$d1</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>date +%H:%M:%S</code> 是一整个命令，使用 <code>反引号</code> 包围起来<br>echo 回显时，如果有变量，需要使用双引号包围起来，变量前面加<code>$</code>符号<br>注意设置变量时不要有多余的空格<br>这里 d 和 d1 两个变量，保存了执行命令时的时间，所以需要两个分别来记录</p></blockquote><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>编写下列脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$a</span>+<span class="variable">$b</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span>+<span class="variable">$b</span>=<span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意数学计算要用中括号<code>[]</code>括起来，并且前面加 <code>$</code>符号</p></blockquote><h2 id="用户输入交互"><a href="#用户输入交互" class="headerlink" title="用户输入交互"></a>用户输入交互</h2><p>编写下列脚本，用户输入x和y，计算x+y并输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input a number x:&quot;</span> x</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input a number y:&quot;</span> y</span><br><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$x</span>+<span class="variable">$y</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;x is <span class="variable">$x</span>,y is <span class="variable">$y</span>,x+y = <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="脚本选项使用"><a href="#脚本选项使用" class="headerlink" title="脚本选项使用"></a>脚本选项使用</h2><p>编写脚本 <code>option.sh</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;x is <span class="variable">$x</span>,y is <span class="variable">$y</span>,x+y = <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><p>赋予执行权限后，使用命令 <code>./option.sh 88 99</code> 进行执行，输出88+99的值</p><p>这里 <code>$1</code> 和 <code>$2</code> 分别代表跟在脚本后的第一个和第二个选项， <code>$0</code> 代表脚本自身的名字</p><h2 id="脚本使用判断"><a href="#脚本使用判断" class="headerlink" title="脚本使用判断"></a>脚本使用判断</h2><p>下面脚本判断输入是否大于60</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input your score:&quot;</span> a</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt 60 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;you pass the exam&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：逻辑表达式用<code>[]</code>括起来，注意 <code>[]</code>前后的空格</p></blockquote><h3 id="两个整数之间的比较"><a href="#两个整数之间的比较" class="headerlink" title="两个整数之间的比较"></a>两个整数之间的比较</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032313813.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032315373.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="文件判断"><a href="#文件判断" class="headerlink" title="文件判断"></a>文件判断</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032316525.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h3><p>除了上面的if之外，还可以使用 <code>else</code>, <code>elif</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;please input your score:&quot; a</span><br><span class="line">if [ $a -gt 60 ] &amp;&amp; [ $a -lt 80 ];then</span><br><span class="line">echo &quot;you pass the exam&quot;</span><br><span class="line">elif [ $a -ge 80 ];then</span><br><span class="line">echo &quot;you are good at exam&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;you not pass the exam&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="case逻辑判断"><a href="#case逻辑判断" class="headerlink" title="case逻辑判断"></a>case逻辑判断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;input a number:&quot;</span> Num</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$Num</span> <span class="keyword">in</span></span><br><span class="line">1) <span class="built_in">echo</span> <span class="string">&#x27;you select 1&#x27;</span></span><br><span class="line">;;</span><br><span class="line">2) <span class="built_in">echo</span> <span class="string">&#x27;you select 2&#x27;</span></span><br><span class="line">;;</span><br><span class="line">3|4) <span class="built_in">echo</span> <span class="string">&#x27;you select 3 or 4&#x27;</span></span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 代表其他所有情况</p></blockquote><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p><code>seq 1 5</code> 表示 1 2 3 4 5 五个数,这是<strong>系统命令</strong>， 反引号中写的是<strong>系统命令</strong><br>我们甚至可以写 <code>ls</code> 这个就会输入当前文件夹的所有文件</p></blockquote><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> -ge 1 ];<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">a=$[ <span class="variable">$a</span> -1 ]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line">until [ <span class="variable">$a</span> == 1 ];<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">a=$[ <span class="variable">$a</span> - 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>until循环语法和while循环一样，区别在于 until 循环 满足添加会终止，while循环 不满足条件时终止</p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sumaa()</span><br><span class="line">&#123;</span><br><span class="line">    sumbb=$[$1+$2]</span><br><span class="line">    echo $sumbb</span><br><span class="line">&#125;</span><br><span class="line">sumaa $1 $2</span><br></pre></td></tr></table></figure><blockquote><p>注意，函数一定要写在脚本的最前面</p></blockquote><h2 id="shell中的中断"><a href="#shell中的中断" class="headerlink" title="shell中的中断"></a>shell中的中断</h2><h3 id="break终中断"><a href="#break终中断" class="headerlink" title="break终中断"></a>break终中断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">break</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><h3 id="continue-中断"><a href="#continue-中断" class="headerlink" title="continue 中断"></a>continue 中断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><p>continue 和 break 都是用于循环中，不同的是 break直接退出循环，continue 是跳过本次循环，进入下一次</p><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><p>exit命令是直接退出整个shell脚本</p><hr><h1 id="shell小练习"><a href="#shell小练习" class="headerlink" title="shell小练习"></a>shell小练习</h1><ol><li><p>计算 1~100的和</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">for i in `seq 1 100`;do</span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li><li><p>输入数字n,计算1+n，如果n&lt;1 重新输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=0</span><br><span class="line">sum=0</span><br><span class="line">while [ $n -lt 1 ];do</span><br><span class="line">read -p &#x27;input n:&#x27; n</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in `seq 1 $n`;do</span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li><li><p>编写shell脚本，将&#x2F;root目录下所有目录复制到 &#x2F;tem目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">for f in `ls`;do</span><br><span class="line">if [ -d $f ];then</span><br><span class="line">cp -r $f /tmp/</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="最后的练习"><a href="#最后的练习" class="headerlink" title="最后的练习"></a>最后的练习</h1><p>编写脚本实现下面功能<br>运行脚本提示，请输入你喜欢的操作系统（Windows 、Mac、Linux）<br>在用户输入windows后，提示一句话<br>在用户输入mac后，提示另一句话<br>在用户输入linux后，提示“真是伟大的选择”<br>直到用户输入linux后，脚本才运行结束，否则一直循环脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;input your opratiing system:    &quot; x</span><br><span class="line">echo $x</span><br><span class="line">until [ $x == linux ];do</span><br><span class="line">if [ $x == windows ];then</span><br><span class="line">echo &quot;first line&quot;</span><br><span class="line">elif [ $x == mac ];then</span><br><span class="line">echo &quot;second line&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;no such oprating system&quot;</span><br><span class="line">fi</span><br><span class="line">read -p &quot;input your opratiing system:    &quot; x</span><br><span class="line">done</span><br><span class="line">echo &quot;good choice&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程管理</title>
      <link href="/2022/05/02/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/02/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h1><p>一个进程是一条命令运行的实例，如一个vi的命令同时被15个不同的用户打开，那么就会创建15个进程,进程通过ID进行识别，进程ID对当前系统来说是唯一的,进程会与一个特定的用户账号和组关联，账号信息可以帮助进程获取指定的系统资源权限</p><p>Linux的进程在 &#x2F;proc 目录下，存在于以进程ID命名的文件夹中，如下图，蓝色的部分表示进程ID</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021209700.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="列出进程"><a href="#列出进程" class="headerlink" title="列出进程"></a>列出进程</h1><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><blockquote><p>ps 是最早也是最常用的列出当前系统进程的命令</p></blockquote><p>常用的ps命令</p><ol><li><p><code>ps u</code> 显示进程的同时，以用户角度查看进程的使用资源情况<br><code>VSZ(Virtual Set Size)</code> 虚拟内存大小，以KB为单位<br><code>RSS(Resident Set Size)</code> 实际内存大小<br><code>STAT</code> 中 <code>R</code> 表示睡眠进程，<code>S</code> 表示正在运行，<code>+</code>表示前台操作</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021339093.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p><code>ps ux | less</code> 查看系统当前用户的所有进程，<code>| less</code> 是管道处理，分页显示结果</p></li><li><p><code>ps -e</code> 列出运行中的进程<br>我们还可以自定义显示的列，或者按照某列排序<br><code>ps -eo pid,user,group,gid,vsz,rss,comm | less</code> o选项后面代表指定列<br><code>ps -eo pid,user,group,gid,vsz,rss,comm --sort=-rss</code> sort代表排序，按照 <code>-rss</code>代表按照内存使用排倒序</p></li></ol><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><blockquote><p>top 提供了一种面向屏幕的方法来显示系统中运行的进程，在使用top时，默认按照进程当前所使用的CPU时间来显示进程，也可以设置为其它排序</p><p>当发现一个进程为不适当的进程，可以使用top来完全终止进程活改变进程优先级</p></blockquote><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021419834.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>top命令的一些操作</p><blockquote><p><strong>单击h</strong>,查看帮助文件，再按任意键返回<br><strong>单击M</strong>,以内存占用排序，<br><strong>单击P</strong>,以CPU占用排序<br><strong>单击数字1</strong>，切换显示所有CPU的使用情况<br><strong>单击R</strong>,对输出进行反向排序<br><strong>单击u</strong>,并输入用户名，显示某用户的进程<br><strong>单击r</strong>,然后输入进程P1D,改变进程的优先级，优先级取值为-19~20<br><strong>单击k</strong>,杀死进程，输入进程PID,再输入15表示彻底终止该进程</p></blockquote><hr><h1 id="管理前台和后台进程"><a href="#管理前台和后台进程" class="headerlink" title="管理前台和后台进程"></a>管理前台和后台进程</h1><p>在Linux的SHELL中，无法快捷的进行进程的切换，因为SHELL中没有像任务栏一样的进程切换工具，SHELL能做的是在后台和前台之间切换当前活动的进程</p><p>直接在命令后面加一个 <code>&amp;</code> 符号就可以把命令放到后台,比如 <code>find /usr &gt; /tmp/1.txt &amp;</code> </p><p>通过<code>jobs</code>命令查看后台进程</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021454842.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用 <code>fg</code> 命令可以恢复进程到前台，比如 <code>fg % 1</code> 其中1 为工作号 如果不写 <code>% 1</code> 那么 <code>fg</code> 命令会把带有 <code>+</code> 号的工作恢复到前台</p><h2 id="关闭和修改进程"><a href="#关闭和修改进程" class="headerlink" title="关闭和修改进程"></a>关闭和修改进程</h2><h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><p>Linux对进程的操作依赖进程间的信号来实现，通常信号是由一个系统错误产生，当然也可以人为发送信号，常用的信号如下</p><table><thead><tr><th>信号名</th><th>数字</th><th>说明</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>由一个非链接状态的终端发送给控制进程，或者控制进程在自身结束时发给前台进程</td></tr><tr><td>SIGINT</td><td>2</td><td>一般是由ctrl+C发起的中断</td></tr><tr><td>SINGKILL</td><td>9</td><td>一般用于SHELL中强制终止异常进程</td></tr><tr><td>SIGTERM</td><td>15</td><td>通常是一个结束请求，如关机时发送给进程，kill命令也默认发送这个信号</td></tr></tbody></table><p>比如我们要关闭一个PID为8888的进程可以执行下面的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kill 8888           kill默认发送15信号</span><br><span class="line">kill -15 8888       kil指定发送15信号</span><br><span class="line">kill -SIGKILL 8888  kll指定发送9信号，即SIGKILL</span><br><span class="line">kill -1 8888        kill指定发送1信号，类似于systemctlreload httpd,重新加载配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>killall</code>命令，可以根据进程名发送信号，而不需要查看进程ID,这样的有点是可以方便的杀死进程，但是也有可能误杀其他进程，比如 <code>killall bash</code> 除了会杀掉bash，还会杀掉所有的shell脚本，使用<code>killall</code>时，同样可以使用信号数字</p><h3 id="修改进程优先级"><a href="#修改进程优先级" class="headerlink" title="修改进程优先级"></a>修改进程优先级</h3><p>修改进程CPU使用优先级，Linux使用nice值定义进程访问CPU的优先级，<code>top</code> 命令的<code>NI</code> 列指向的就是CPU优先级</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021522533.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>nice的值可以在-20~19之间，默认取值为0</p><ul><li>nice值越低，进程就有更多访问CPU的机会，优先级越高</li><li>普通用户只能将自己的进程nice设为 0~19</li><li>普通用户只能将nice值越设越高</li><li>普通用户只能在自己进程上设置nice</li></ul><p>使用下面的命令来修改nice值</p><ol><li><code>nice -5 vim &amp;</code> 将vim进程放在后台运行且设置nice值为 5</li><li><code>renice -n -5 8888</code> renice 对正在运行的进程修改nice值，这个命令的意思是对进程ID为8888的进程nice值减5</li></ol><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>守护进程(init或systemd) ，可以理解为所有“进程之母”，是所有进程的起源，进程由他调度,守护进程是Linux内核中的第一个进程，通常名称为 <code>init</code> 或 <code>systemd</code>，Linux内核中有一个PID为0的进程表示内核，守护进程PID为1</p><hr><h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><p>Linux 服务管理有两个命令</p><ul><li><code>service</code></li><li><code>systemctl</code></li></ul><p><code>service</code> 命令的本质是指向<code>/etc/init.d</code>目录下的脚本</p><p><code>systemctl</code> 命令是linux系统最新的初始化系统，同时 <code>systemctl</code> 也兼容了 <code>service</code> 命令，也会查找<code>/etc/init.d</code>目录</p><p>systemctl常用方法如下：</p><blockquote><p><code>systemctl start|stop|restart service</code> 启动停止重启服务<br><code>systemctl enable|disable service</code>     开机启动开机不启动服务<br><code>systemctl status service</code>             查看服务的状态<br><code>systemctl is-active service</code>           查看服务是否启动<br><code>systemctl is-enabled service</code>           查看服务是否开机启动</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装包管理学习</title>
      <link href="/2022/05/01/Linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/01/Linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="程序包管理概述"><a href="#程序包管理概述" class="headerlink" title="程序包管理概述"></a>程序包管理概述</h1><p>在早期的Liux系统中，如果想要添加软件，必须获取该软件源代码，然后将其编译成二进制代码。再来运行，这种软件包通常是一个压缩包，如tar格式</p><p>获取压缩包安装软件并不困难，但是有一些明显的缺点：</p><ol><li>获取软件的依赖软件</li><li>不知道相关软件的路径</li><li>删除时可能比较困难</li><li>更新时比较困难</li></ol><p>为了解决从压缩包安装软件的困难，软件包从简单的压缩包，变成了更复杂的打包，比如：</p><ul><li>RPM包，该包最初被称为Red Hat Package Manager,后被重命名为RPM。RPM是SUSE、Red Hat、Centos等的首选软件包格式</li><li>Deb包，基于 Debian GNU&#x2F;Linux 的管理包文件，常用于基于 Debian 的发行版本 Linux ,如 Ubuntu、Linux mint、KNOPPIX 等</li></ul><p><strong>RPM</strong>与<strong>DEB</strong>都是非常优秀的软件包管理工具，作用的Liux系统不同，我们因为学习的是Centos,所以我们重点介绍<strong>RPM</strong></p><p>Liux系统管理员的主要职责之一是软件管理，包含以下常见工作</p><ul><li>安装应用程序</li><li>更新应用程序</li><li>给内核打补丁</li></ul><p>我们需要一个合适的工具，查看并维护当前的软件及版本，Linux通常使用<strong>rpm</strong>用作软件管理，同时使用<strong>yum</strong>作为补充</p><hr><h1 id="RPM安装程序包"><a href="#RPM安装程序包" class="headerlink" title="RPM安装程序包"></a>RPM安装程序包</h1><p><strong>程序包的含义</strong></p><p><strong>RPM程序包</strong>就是<strong>文件容器</strong>，包含特定应用程序或应用程序相关的文件组<br>通常<strong>RPM程序包</strong>包含:</p><ul><li>二进制文件(可执行文件)</li><li>安装脚本</li><li>配置文件</li><li>软件使用文档</li><li>安装卸载命令<br>注意：rpm包会依赖CPU类型来工作，如x86,x86_64,arm等</li></ul><p><strong>RPM数据库</strong></p><p>RPM数据库存在本机的 <code>/var/lib/rpm/</code> 目录，RPM数据库的作用如下</p><ol><li>跟踪每个RPM中各文件的版本和位置</li><li>维护各文件的MD5校验和</li></ol><p><strong>查询已安装软件</strong></p><p>使用命令 <code>rpm -qi 软件名称</code>，比如 <code>rpm -qi firefox</code></p><p>查看当前系统所安装的软件包 </p><ul><li><code>rpm -qa |more</code> 加<code>more</code> 是为了分页显示</li><li><code>rpm -qa | grep vim</code> 从显示结果中过滤出指定软件，这里过滤出包含vim的</li></ul><p><strong>安装软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -i packagename 安装软件包</span><br><span class="line">rpm -U packagename 升级软件包，如果原来没有安装，则安装</span><br><span class="line">rpm -F packagename 只升级软件包，如果原来安装，而不会新安装</span><br><span class="line"></span><br><span class="line">rpm -e packagename 卸载程序包</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <strong>使用rpm安装软件包，必须先完整的安装软件包的依赖</strong>，才能安装软件。但软件的依赖通常比较多，所以一般使用更优化的工具<strong>yum</strong>来安装</p><hr><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>YUM(Yellowdog Update Modified) 项目着手解决RPM软件包依赖的问题，主要作用是将RPM不再视为单一软件包，而是视为一个软件库</p><p>借助软件库，安装软件的工程师不再解决依赖问题，而是由LInux发行版的经销商来解决。发行版经销商将Linux发行版中每个软件包所需的所有组件都加入到软件库，yum的软件库可以放在WEB服务器，FTP服务器的一个目录甚至本地介质中，本地目录中，然后将软件库配置到<code>/etc/yum.conf</code> 中，或者 <code>/etc/yu.repos.d</code> 目录下的文件中</p><h2 id="yum工作原理"><a href="#yum工作原理" class="headerlink" title="yum工作原理"></a>yum工作原理</h2><p>yum基本语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [options] command</span><br></pre></td></tr></table></figure><p>比如我们要安装火狐浏览器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firefox</span><br></pre></td></tr></table></figure><p>用户只需要知道软件名，而不用知道完整的安装包路径或者安装包全称</p><p><strong>yum工作流程</strong><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021037621.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><code>/etc/yum.conf</code> 是yum的配置文件，当使用yum时，会检查此文件，CentOS7的文件默认如下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021052406.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>搜索软件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search 软件名</span><br></pre></td></tr></table></figure><p>比如搜索软件 <code>editor</code> 输入 <code>yum search editor</code> ，搜索到了我们就可以选择需要的使用 <code>yum install</code> 来安装</p><p><strong>查看软件信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info 软件名</span><br></pre></td></tr></table></figure><p><strong>如果知道一个命令，但是不知道软件名，可以查询这个命令来获取软件名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides netstat</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021057667.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>通过查询，可以发现，<code>netstat</code>命令在<strong>net-tools</strong>软件中</p><p><strong>查看软件包安装依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum deplist 软件名</span><br></pre></td></tr></table></figure><p>比如查看 net-tools 的依赖 <code>yum deplist net-tools</code></p><p><strong>安装软件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install xxxxx</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021115006.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>删除软件</strong></p><p>只会删除列出的软件包，不会删除所有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum erase xxxxx</span><br></pre></td></tr></table></figure><p><strong>查看yum历史记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021106788.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>争对历史记录我们还可以查看具体的信息,使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history info 2</span><br></pre></td></tr></table></figure><p>2是yum history中的id</p><p>我们还可以彻底还原，删除history 2 中的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history undo 2</span><br></pre></td></tr></table></figure><p><strong>更新软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum check-update //检查更新，只是检查</span><br><span class="line">yum update 软件包名 //更新指定软件包</span><br><span class="line">yum update // 更新所有软件包</span><br></pre></td></tr></table></figure><p><strong>维护yum缓存库</strong><br>如果yum配置中使用的软件缓存，那么yum的缓存目录很容易装满，缓存目录中的所有数据都是可以被清理的，清理后，yum下次使用时会自动下载新的<strong>元数据</strong>，使用下面的命令可以进行清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean packages</span><br><span class="line">yum clean metadata</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS网络管理学习</title>
      <link href="/2022/05/01/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/01/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux网络配置概述"><a href="#Linux网络配置概述" class="headerlink" title="Linux网络配置概述"></a>Linux网络配置概述</h1><p>目前将单一的桌面PC连接到网络是一件非常容易的事</p><p>但是将Linux服务器连接到网络，特别是在服务器配置上会有不同，典型的如</p><ul><li>静态IP</li><li>VPN网络</li><li>代理服务器</li></ul><p>学习网络配置管理，不仅要学会使用网络，更重要的是掌握网络状态，排查系统问题</p><p>传统的Linux网络配置是通过<code>network.service</code>来实现<br>基于<code>network</code>的常用的命令有</p><ul><li>ifconfig</li><li>ifup</li><li>ifdown</li></ul><p>传统的<code>network.services</code>用于服务器上比较稳定的网络环境是非常方便的,唯一的问题是网络改动或切换时，必须要重启整个<code>network服务</code>，导致短暂的中断。</p><p>在Centos7之后，提供了一种新的网络配置方式<code>NetworkManager</code>,其主要工具是<code>nmtui</code>和<code>nmcli</code></p><ul><li><code>nmtui</code>是可以在<strong>SHELL</strong>下执行的一个简单图形界面，以图形化方式来管理网络配置，更简单易懂。<code>nmtui</code>的本质仍然是修改Linux的配置文件</li><li><code>nmcli</code>是命令行的形式来管理网络类似<code>ifconfig</code>、<code>ifup</code>等传统命令，但优势更明显</li></ul><p><strong>注意：</strong><br>传统的<code>network</code>与新生的<code>NetworkManager</code>两者同时管理网络时，会出现冲突</p><p>我们只需学会一种即可,首先我们要学会判断当前系统是使用的那种服务,使用下面两个命令进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled network</span><br><span class="line">systemctl is-enabled NetworkManager</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011638559.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面两个命令测试的是<strong>开机是否自动启动</strong></p><p>使用下面的命令可以看到当前是否启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status NetworkManager</span><br><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><p>不论哪种方式，我们Linux的本质任然是文件配置，CentOS7的网络配置文件默认在 <code>/etc/sysconfig/network-scripts/</code> 目录下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011642432.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong><code>ifcfg-eth0</code> 就是eth0网卡的配置</strong></p><p>使用 <code>ifconfig</code>命令产看当前的网络配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011644292.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上图中eth0的信息如下</p><blockquote><p><code>inet</code> 192.168.29.4  <strong>lPv4地址</strong><br><code>netmask</code> 255.255.240.0 <strong>子网掩码</strong><br><code>broadcast</code> 192.168.31.255 <strong>广播IP</strong><br>ether fa:16:3e:58:2b:a2 txqueuelen 1000 (Ethernet) <strong>MAC地址、速率、连接类型</strong><br>RX packets 398909 bytes 32892437 (31.3 MiB) <strong>接收数据包个数，大小</strong><br>RX errors 0 dropped 0 overruns 0 frame 0 <strong>接数错误数</strong><br>TX packets 104 bytes 6977(6.8 KiB) <strong>发送数据包个数，大小</strong><br>TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 <strong>发送错误数</strong></p></blockquote><hr><h1 id="配置Linux网络"><a href="#配置Linux网络" class="headerlink" title="配置Linux网络"></a>配置Linux网络</h1><h2 id="使用network配置网络"><a href="#使用network配置网络" class="headerlink" title="使用network配置网络"></a>使用network配置网络</h2><ol><li><p>配置ip地址<br>命令格式： <code>ifconfig 网卡名 IP地址 netmask 子网掩码</code></p></li><li><p>配置DNS服务器<br>Linux的DNS服务器在network下是基于文件配置的 配置文件路径为 <code>/etc/resolv.conf</code> 我们使用vim编辑这个文件就可以进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011651855.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="基于NetworkManager的配置"><a href="#基于NetworkManager的配置" class="headerlink" title="基于NetworkManager的配置"></a>基于NetworkManager的配置</h2><p>在使用<code>NetworkManager</code>的时候，我们需要先关闭 <code>network</code> 防止冲突,使用下面的命令<strong>关闭network网络服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop network</span><br></pre></td></tr></table></figure><p>想使用NetworkManager的前提是网卡可以被 NetworkManager管理，NetworkManager网络管理服务配置文件是 <code>/etc/NetworkManager/NetworkManager.conf</code> 我们使用vim来进行编辑,如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=true           //允许接口进行管理</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011709149.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用 <code>nmcli device</code> 可以查看网络可管理状态</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011712623.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面的状态可以通过下面的命令进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli networking</span><br><span class="line">nmcli networking on|off</span><br></pre></td></tr></table></figure><h3 id="通过nmtui配置网络"><a href="#通过nmtui配置网络" class="headerlink" title="通过nmtui配置网络"></a>通过nmtui配置网络</h3><p>在CentOS7中已经默认安装了nmtui工具，在SHELL中直接输入 <code>nmtui</code> 命令可以进行执行，下图就是<strong>nmtui工具的界面</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012109475.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>选择编辑网络连接，可以看到下面界面</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012111844.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>点击Edit后，进入编辑界面如下，默认ipv4是自动获取的，我们改为手动，点击show就看到需要配置的内容了</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012112803.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>配置Ip，子网掩码，网关，DNS等信息</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012113866.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>配置结束后，按方向键向下，一直到最后选择OK，保存，然后退出</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012115326.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在配置完后，也是需要重新加载一下配置文件的，执行下面的命令 <code>nmcli device connect ens33</code> 注意 <code>ens33</code> 是编辑的那个网卡的名字</p><h2 id="基于文件配置"><a href="#基于文件配置" class="headerlink" title="基于文件配置"></a>基于文件配置</h2><p>直接进入前面说的网卡配置文件进行修改 比如 eth0网卡的配置文件  <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012127898.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>记得修改后需要重新启动网卡<code>eth0</code>配置文件，使用命令 <code>ifdown eth0</code> 和 <code>ifup eth0</code></p><hr><h1 id="网络常用命令"><a href="#网络常用命令" class="headerlink" title="网络常用命令"></a>网络常用命令</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping 目标IP地址</code>,通常用来诊断到目标IP地址的连通性，判断从本机到目标及其网络是否正常，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012132136.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>使用<code>netstat</code> 指令可以得知整个Linux系统的网络情况，选项如下</p><blockquote><p><code>-a</code>或<code>--all</code> 显示所有连线中的Socket。<br><code>-h</code>或<code>--help</code> 在线帮助。<br><code>-i</code>或<code>--interfaces</code> 显示网络界面信息表单。<br><code>-l</code>或<code>--listening</code> 显示监控中的服务器的Socket。<br><code>-n</code>或<code>--numeric</code> 直接使用IP地址，而不通过域名服务器。<br><code>-p</code>或<code>--programs</code> 显示正在使用Socket的程序识别码和程序名称。<br><code>-s</code>或<code>--statistics</code> 显示网络工作信息统计表。<br><code>-t</code>或<code>--tcp</code> 显示TCP传输协议的连线状况。<br><code>-u</code>或<code>--udp</code> 显示UDP传输协议的连线状况。</p></blockquote><p>常用的组合选项命令</p><p><code>netstat -natp</code><br>第一个红框表示正在监听TCP22 端口，进程ID为1018，进程名 sshd<br>第二个红框表示当前TCP的连接，及SSH连接<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012140009.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p><code>ss</code>命令是 Socket Statistics 的缩写，用来获取socket统计信息</p><p><code>ss</code> 的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。当服务器的socket连接数量变得非常大时，无论是使用<code>netstat</code>命令还是直接<code>cat /proc/net/tcp</code>，执行速度都会很慢。</p><p><code>ss</code>快的秘诀在于，它利用到了TCP协议栈中<code>tcp_diag</code>。<code>tcp_diag</code>是一个用于分析统计的模块，可以获得Linux内核中第一手的信息，这就确保了ss的快捷高效。</p><p>常用选项</p><blockquote><p><code>-t</code>: tcp 显示tcp连接<br><code>-a</code>: all 显示所有连接<br><code>-l</code>: listening 列出所有打开的网络连接端口<br><code>-s</code>: summary 显示Sockets摘要<br><code>-p</code>: progress 显示端口对应的进程<br><code>-n</code>: numeric 不解析服务名称，也可理解为以数字形式显示<br><code>-r</code>: resolve 解析服务名称<br><code>-m</code>: memory 显示内存情况</p></blockquote><p>比如常用的组合选项 <code>ss -lntp</code> 以数字形式显示tcp连接，并显示进程名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012148035.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户和权限管理学习</title>
      <link href="/2022/05/01/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
      <url>/2022/05/01/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux用户"><a href="#Linux用户" class="headerlink" title="Linux用户"></a>Linux用户</h1><p>Linux有三种不同类用户</p><ol><li><strong>管理用户</strong>，即root用户，root用户是在安装操作系统时，由系统自动创建，具有Linux的所有权限。通常root用户是黑客在本机的终极目标。</li><li><strong>一般用户</strong>，即我们安装系统时创建的yjr1100。可以在操作系统上访问程序，如vim，数据库，WEB浏览器。可以创建保存文件到自己的HOME目录。无法修改系统配置文件</li><li><strong>服务用户</strong>，用于apache、邮件、打印服务等系统服务。这些服务用户与Linux系统用户进行交互，通常不需要我们人为的去更改。</li></ol><p>通常我们对Linux的操作过程是:使用普通用户登录进行查看，而需要修改Linux时，<strong>切换为root用户</strong>或使用<strong>root的权限</strong>进行操作</p><h2 id="Linux用户管理文件"><a href="#Linux用户管理文件" class="headerlink" title="Linux用户管理文件"></a>Linux用户管理文件</h2><p>用户管理文件存放在 <code>/etc/passwd</code> 文件中，包含每个用户的基本信息，我们可以使用vim打开该文件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011430766.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这个文件每一行有<strong>7列</strong>，中间用冒号隔开，分别是 <code>用户名：密码：用户id：组id：解释性描述：家目录：shell</code></p><ul><li><p><code>username</code>: 代表用户名，可以包含数字、<code>-</code>、<code>·</code>、<code>_</code>，但是不能<code>-</code> 开头，不能大于32个字符</p></li><li><p><code>password</code>: 用户口令，可以是 <code>x</code>、<code>*</code> 或者字母数字的随机组合</p><ul><li><code>x</code>：表示实际口令指向 <code>/etc/shadow</code></li><li><code>*</code>: 表示禁用用户</li><li><code>字母数字</code>：表示加密后的口令，这样一般不安全，可以被破解的</li></ul></li><li><p><code>UserID</code>: 用户的数字ID，root 默认是 0,普通用户从 1000 开始</p></li><li><p><code>GroupID</code>: 用户所属组ID，默认情况下，Linux会给每个用户新建一个用户组，与数字ID匹配</p></li><li><p><code>Userinfo</code>：类似于用户的备注信息，可以任意输入</p></li><li><p><code>Home Directory</code>：用户的家目录，登陆后用户默认所处的目录，默认是 <code>/home/用户名</code></p></li><li><p><code>Login Shell</code>：表示用户登录的SHELL程序</p><ul><li>默认可登录用户为<code>/bin/bash</code>,也可以自己定义一些其他的shell</li><li>无法登录的<strong>服务用户</strong>默认为 <code>/sbin/nologin</code> 表示无法登录</li></ul></li></ul><h2 id="用户的组管理文件"><a href="#用户的组管理文件" class="headerlink" title="用户的组管理文件"></a>用户的组管理文件</h2><p>用户的组管理文件放在 <code>/etc/group</code> 文件中，在Linux中每个用户都被分配到一个组名与用户名相同的组中</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011457978.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这个文件一行 <strong>4列</strong>，分别是：<code>组名：口令：组id：组内用户(这个一般看不到，是隐藏的)</code></p><ul><li><code>Groupname</code>：每个用户都有与用户名相同的组，也是组的唯一名称</li><li><code>Password</code>：通常是<code>x</code>，表示指向 <code>/etc/shadow</code> 文件，也可是字母数字的随机组合</li><li><code>Group ID</code>：和<code>UserID</code> 一样，如果要创建一个特殊的组，表示管理员权限，建议分配一个独立的<code>Group ID</code> 避免 <code>Group ID</code>滥用</li><li><code>Group menbers</code>：表示组内成员</li></ul><h2 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a><code>/etc/shadow</code>文件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011459677.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>它是<code>/etc/passwd</code> 的补充，包含8列信息</p><ul><li><code>Username</code>：用户名</li><li><code>Password</code>：加密后的口令，对应在<code>/etc/password</code>第二列需要是x</li><li><code>Password history</code>：口令的最后修改日期，在1970年1月1日之后的天数</li><li><code>mindays</code>：用户必须保持该口令的最小天数</li><li><code>maxdays</code>：口令的使用最长天数，在此之后必须更改口令</li><li><code>warndays</code>：口令过期前，提供警告的天数</li><li><code>inactive</code>：口令过期后仍然可使用口令的天数，在此期间会提示修改口令</li><li><code>disable</code>：禁用账户后，在1970年1月1日之后的天数</li></ul><hr><h1 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><code>useradd</code> 命令，格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure><p>选项有：</p><blockquote><p><code>-u</code> : 指定uid<br><code>-g</code> : 指定GID<br><code>-d</code> : 指定用户家目录<br><code>-C</code> : 输入备注信息<br><code>-M</code> : 表示不建立家目录<br><code>-S</code> : 自定义shell程序，不使用默认的&#x2F;bin&#x2F;bash<br><code>-e</code> : YYYY-MM-DD格式，输入用户的过期日期</p></blockquote><p>这样创建好后用户是默认没有密码的，我们只有设置好密码才能登录对应用户使用口令 <code>passwd 用户名</code> 给对应用户设置密码</p><p>注意：输入密码的过程中同样是没有回显的</p><p>我们也可以通过直接编辑&#x2F;etc&#x2F;passwd文件来添加用户确保以下几点:</p><ul><li>添加用户的主目录，并确保你想添加的用户和用户组有目录所有权</li><li>确保编辑文件的格式正确</li><li>确保用户有与其名称对应的私有组</li></ul><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p><code>userdel</code> 命令，格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项为 <code>-r</code> 表示一并删除用户家目录，一般来说，我们会保留家目录</p><h2 id="添加和删除用户组"><a href="#添加和删除用户组" class="headerlink" title="添加和删除用户组"></a>添加和删除用户组</h2><p><code>groupadd</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g GID 组名</span><br></pre></td></tr></table></figure><p>注意： 如果不使用<code>-g</code> 来指定 GID，系统会默认从1000 开始分配</p><p><code>groupdel</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><p>直接删除组</p><p>删除时，如果有用户的<strong>主要组</strong>是这个组，则需要<strong>先删除用户</strong>才能删除该组，所谓 <strong>主要组</strong> 就是用户的<code>/etc/passwd</code> 文件中的组ID那个组</p><p>一个用户是可以属于多个组的，我们可以使用以下命令更改用户的组</p><ul><li>将现有用户添加到<strong>辅助组</strong>，请使用带有-G 选项<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G groupname username </span><br></pre></td></tr></table></figure></li><li>将用户添加到多个辅助组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G groupname1,groupname2 username</span><br></pre></td></tr></table></figure></li><li>我们必须使用 -g 改变用户的<strong>主要组</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g groupname username</span><br></pre></td></tr></table></figure></li></ul><p>使用id命令可以查看用户的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id username</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p><code>su 用户名</code> 切换为指定用户</p><p>比如切换到root 用户，<code>su root</code> ，这里需要输入<code>root</code>用户的密码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011530194.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面su命令必须要知道root的密码才行。而root密码是一个非常敏感的密码，为了保障root密码的安全，Linux系统设计了<code>sudo</code>这个命令，即用<code>root的身份</code>执行一个命令，而不是切换为root用户。</p><p>sudo通过visudo工具来实现，Centos7默认已经安装有visudo。如果没有sudo命令，可以通过<code>yum install sudo</code>来安装。</p><p>使用sudo时需要输入当前用户自身的密码。普通用户如果要使用sudo，必须经过<code>root用户</code>的设置(允许)才行。下图就是普通用户使用sudo，但是提示，用户不在 <code>sudoers</code> 文件中，操作被拒绝了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011537062.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们可以看一下 <code>/etc/sudoers</code> 文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011540416.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在文件中我们可以找到上面两行，第一行是说<strong>允许 root 用户运行任何命令</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011542590.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>第二行是说 <strong>允许 wheel 组的用户执行sudo中的任何命令</strong> </p><blockquote><p>%wheel 代表用户组</p></blockquote><p>所以如果我们想要用户有执行sudo命令的权限，我们只需要用<code>root</code> 用户，执行下面命令，把对应用户加入到 <code>wheel</code> 组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G wheel yjr1100</span><br></pre></td></tr></table></figure><p>再次执行<code>sudo</code>命令，发现可以执行了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011545477.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim入门</title>
      <link href="/2022/05/01/vim%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/01/vim%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim概述"><a href="#Vim概述" class="headerlink" title="Vim概述"></a>Vim概述</h1><p>在Linux系统中<strong>一切皆文件</strong>，因此当我们在命令行下更改文件内容时，不可避免地要用到文本编辑器。相比图形界面编辑器，命令行编辑器的优势是可以通过任何shell、字符终端或SSH连接来使用，不需要图形界面。</p><p>Vim文本编辑器，具有使用简单、功能强大、是 Linux众多发行版的默认文本编辑器等特点</p><h1 id="Vim使用"><a href="#Vim使用" class="headerlink" title="Vim使用"></a>Vim使用</h1><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>直接使用 <code>vim</code> 命令后跟文件名可以新建或者打开之前的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011202390.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="三种常见模式："><a href="#三种常见模式：" class="headerlink" title="三种常见模式："></a>三种常见模式：</h2><ol><li><p>正常模式 </p><p>在此模式下，我们可以使用快捷键</p></li><li><p>编辑模式</p><p>才此模式下，可以输入</p></li><li><p>命令行模式</p><p>在此模式下我们可以保存退出，存盘，不保存等</p></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在终端输入 vim xxx  ——》 进入 一般&#x2F;正常模式</p><p><strong>正常模式</strong> 输入 i或者 a              ——》 进入编辑模式<br>其实除了i 和 a 还有一些别的按键可以进入编辑模式<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011224959.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>正常模式</strong> 输入<code>:</code>      ——》 进入 命令行模式  </p><p>其他模式下，输入ESC 返回到正常模式</p><p>命令行模式输入 <code>wq</code> ，<code>q</code>，<code>q!</code> , 等命令实现 写入退出，退出，强制退出</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011227740.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="快捷键使用"><a href="#快捷键使用" class="headerlink" title="快捷键使用"></a>快捷键使用</h2><ol><li><p>光标的移动<br>在正常模式下进行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011209946.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>复制删除粘贴操作<br>在正常模式下进行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011216622.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>`yy` 复制光标所在行  `5yy` 从光标所在行开始，向下复制5行`p` 粘贴`dd` 删除当前行`5dd` 删除5行`G` 光标到文件的最末行`gg` 光标到文件的最首行`u` 撤销上一步操作</li><li><p>命令行模式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011228366.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>`/xxx` 查找xxx`n` 查看找到的下一个`:set nu` 显示行号`:set nonu` 取消显示行号</li><li><p>可以在命令行模式下 <code>:set nu</code> 先显示行号，然后在正常模式下 <code>行号+ shift+g</code> 跳转到指定行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件系统</title>
      <link href="/2022/04/30/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/30/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p>在Linux系统中，任何东西都可以简化为文件，比如</p><ul><li><strong>分区</strong> 对应到 <code>/dev/sda1</code></li><li><strong>硬件部件</strong> 对应刻 <code>/dev/cdrom</code></li></ul><p><code>/</code> 是所有路径的开始，是所有目录的根</p><p><code>ls /</code> 显示Linux根目录下的文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301938371.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>Linux 整个目录是树状结构，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301948368.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p>&#x2F; 根目录<br>&#x2F;boot  存放的启动Linux时需要使用的内核文件，包括链接文件以及镜像文件<br>&#x2F;etc   所有的系统管理需要的配置文件和子目录列表<br>&#x2F;lib   系统开机所需要的动态连接共享库<br>&#x2F;bin   用户指令集合<br>&#x2F;sbin  超管命令存放，存放系统管理员的系统管理程序<br>&#x2F;run   运行目录，是一个临时文件系统，存储系统启动以来的信息，当系统重启时，这个目录下的人家应该被删除，如果系统上有 <code>/var/run</code> 目录，应该让他指向<code>/run</code><br>&#x2F;lost+found 一般情况是空的，系统非法关机后，存放一些文件<br>&#x2F;tmp   临时目录<br>&#x2F;root  系统管理员的用户主目录<br>&#x2F;home  用户的家目录，以用户的账号命名<br>&#x2F;usr   用户的很多应用程序和文件都放在这个目录<br>&#x2F;usr&#x2F;src 内核源码默认的放置目录<br>&#x2F;var   存放经常修改的数据，比如日志文件（<code>/var/log</code>），邮件等<br>&#x2F;opt   给主机安装软件放的目录，安装软件<br>&#x2F;media 系统会识别一些硬件设备然后挂载到这个目录下<br>&#x2F;dev   管理设备，存放的是Linux的外部设备，在Linux中访问设备和访问文件的方法是相同的<br>&#x2F;mnt   让用户临时挂载别的文件系统，可以把外部存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以产看外部存储设备里的内容了<br>&#x2F;selinux 安全子系统<br>&#x2F;proc  管理内存空间，虚拟的目录，是系统内存的映射，可以直接访问这个目录来获取系统信息，这个目录不在硬盘上，而是在内存里，也可以直接对里面的一些文件进行修改<br>&#x2F;srv<br>&#x2F;sys    这三个与Linux内核相关</p></blockquote><hr><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><h2 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h2><p><strong>创建目录</strong>: mkdir<br><strong>创建文件</strong>: touch<br><strong>查看文件内容</strong>: cat<br><strong>删除目录或文件:</strong> rm<br><strong>删除非空目录:</strong> rm -rf file目录<br><strong>删除日志:</strong> rm <em>log(等价: $find .&#x2F; -name“</em>log”-exec rm { ;)<br><strong>移动(剪切) :</strong> mv 原文件 目标文件<br><strong>复制文件:</strong> cp 原文件 目标文件<br><strong>复制目录:</strong> cp -r 原目录 目标目录</p><h2 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h2><p>**找到文件&#x2F;目录位置:**cd<br><strong>切换到上一个工作目录:</strong> cd -<br><strong>工换到父目录:</strong> cd ..<br><strong>切换到home目录:</strong> cd 或 cd ~<br><strong>切换到&#x2F;root目录:</strong> cd &#x2F;root<br><strong>显示当前路径:</strong> pwd<br><strong>更改当前工作路径为path:</strong> $cd path</p><p>绝对目录：从Linux的根目录开始<br>相对路径：路径不是从Linux的根目录开始，而是相对于当前<code>pwd</code>的目录</p><h2 id="目录操作-1"><a href="#目录操作-1" class="headerlink" title="目录操作"></a>目录操作</h2><p>ls:显示当前目录下的文件，常用选项:</p><blockquote><p>-a 列出所有文件，包含隐藏文件<br>-l 以列表形式显示<br>-1(数字1) 以分行显示<br>-t 按时间排序<br>-r 排倒序<br>-R 包含目录的子目录及文件</p></blockquote><p>按时间排序，以列表的方式显示目录 <code>ls -lt</code><br>如果<code>ls -lt</code>使用非常频繁，我们可以给他设置一下别名，在<code>.bashrc</code>中设置命令别名:alias lsl&#x3D;’ls -Irt’</p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>使用<code>ls -l</code> 列出文件详细内容后第一个字母</p><ul><li>—    一杠代表普通文件（文本文件，二进制文件，压缩文件</li><li>d    一个字母d代表文件夹（蓝色显示）</li><li>b    设备文件(块设备) 存储设备硬盘，U盘&#x2F;dev&#x2F;sda</li><li>c    设备文件(字符设备) 打印机，终端&#x2F;dev&#x2F;tty1</li><li>l    链接文件(淡蓝色)</li><li>s    套接字文件</li><li>p    管道文件</li></ul><p>ln命令 创建链接文件<br><code>ln -s 文件A 文件B</code><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302034805.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><hr><h1 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h1><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><p>使用 <code>ls -l</code> 命令可以看到文件权限</p><p>在Linux中，针对每个文件的权限分配9个位来表示，定义了<strong>文件的所有者</strong>，<strong>文件所属组</strong>和<strong>其他用户</strong>对文件的操作权限，包含<code>读，写，执行</code>三个维度</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302040870.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在九位权限中：</p><blockquote><p>前三位代表文件所有者权限，图中红色<br>中间三位代表文件所属组的权限，图中黄色<br>后三位代表其他人权限，图中蓝色</p></blockquote><p>其中<code>rwx</code>分别代表，读取权限、写入权限、执行权限而<code>-</code> 则表示，不具有相应的权限，因为<strong>文件</strong>和<strong>目录</strong>是不同的所以其rwx的含义也不同，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302041154.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h2><p>在更改过程中，每种权限都被分配了一个数字，<strong>r&#x3D;4 w&#x3D;2 x&#x3D;1</strong>，<code>rwx</code> 对应二进制<code>1 1 1</code>，十进制<code>4 2 1</code>, 即rwx&#x3D;7<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302058124.PNG" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br>更改文件权限为rwxrwxrwx使用命令<code>chmod 777 file</code><br>更改文件权限为rwxrw-rw-使用命令<code>chmod 766 file</code><br>使用以下命令，可以更改<strong>递归</strong>更改<strong>整个目录</strong>的权限，包含<strong>子目录</strong>和<strong>子文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /test/myapp</span><br></pre></td></tr></table></figure><p>除了使用数字，还用可以用字母来表示权限，可以分别使用+(加号）和-(减号)来打开或关闭权限</p><p>在使用字母时 <code>u</code>代表用户(9位权限中的前三位) <code>g</code>代表组(中间三位) <code>o</code>代表其他人(最后的三位)  <code>a</code> 代表全部权限即777,r、w、x则分别表示自己的含义</p><blockquote><p>如更改权限为r-xr-xr-x可以写成 <code>chmod a-w file</code>,即所有权限减去w<br>如将当前文件所属用户的写权限去掉，可以写成 <code>chmod u-w file</code>,注意是基于当前权限修改</p></blockquote><p>使用字母修改权限时，仅更改明显指出的权限，没有列出的权限不会更改</p><h2 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h2><p>当<strong>普通用户</strong>创建一个文件时，其默认权限是rw-rw-r–<br>当<strong>普通用户</strong>创建一个目录时，其默认权限是rwxrwxr-X<br>当<strong>root用户</strong>创建文件时，其默认权限是rw-r–r–<br>当<strong>root用户</strong>创建目录时，其默认权限是rwxr-xr-x</p><p>上面提到这些<strong>默认权限</strong>是由<code>umask(反掩码)</code>决定的</p><p>反掩码 umask 显示的值表示了当前用户新建目录和文件的权限</p><ul><li>新建目录的权限是 所有权限减去反掩码 即 <strong>新建目录权限 &#x3D; 777 - umask</strong></li><li>新建文件的权限同理 即 <strong>新建文件权限 &#x3D; 777 - umask</strong></li></ul><p>如果我们想要修改新建目录的默认权限，我们可以修改umask值后再进行创建文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302120815.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>注意，上面这样的操作只是临时更改了这个shell窗口中的umask值，如果我们要永久的修改，需要编辑 <code>$HOME/.bash.rc</code> 在文件的最后加入 <code>umask 311</code></p><h2 id="文件所有权"><a href="#文件所有权" class="headerlink" title="文件所有权"></a>文件所有权</h2><p>作为普通用户是无法更改文件或者目录的所有权的，只有root用户可以更改所有权，下图红色表示所有者，黄色表示文件所属组</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302124732.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>修改文件所有权，可以使用root用户执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将文件123的所有者改为root</span><br><span class="line">chown root 123</span><br><span class="line">将文件123的所属组改为root</span><br><span class="line">chgrp root 123</span><br><span class="line">将文件123的所有者和所属组都改为root</span><br><span class="line">chown root:root 123</span><br><span class="line">将文件夹Pictures和其子文件夹和子文件的所有者和所属组均为改root</span><br><span class="line">chown -R root:root Pictures</span><br></pre></td></tr></table></figure><hr><h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><p>使用<code>cat</code> 命令</p><blockquote><p><code>-n</code> 显示行号<br><code>-A</code> 包含特殊字符，比如回车</p></blockquote><p>使用<code>tac</code> 命令，显示文件内容，但是和<code>cat</code> 相反，先显示最后一行，再显示倒数第二行</p><p>使用 <code>more</code> 命令 当文件内容很多，一页显示不全时使用，可以按<code>空格</code>向后翻页，<code>回车</code> 显示下一行， <code>Ctrl+D</code> 向上， <code>Ctrl+F</code> 向下</p><p>使用 <code>less</code> 命令 作用和<code>more</code> 类似，但是功能多一些，可以使用方向键上下翻动，可以输入查找，通过<code>N</code> 和 <code>n</code> 向前和向后查找</p><p>使用 <code>head</code> 命令 显示文件前10行</p><blockquote><p><code>-n</code> 选项，显示前n行， <code>head -n 4 11.txt</code> </p></blockquote><p>使用 <code>tail</code> 命令 显示文件后10行</p><blockquote><p><code>-n</code> 选项，显示后n行，<br><code>-f</code> 选项，动态显示文件后10行，可以试试观察文件，常用于实时产看日志 或者直接使用命令 <code>tailf</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门学习</title>
      <link href="/2022/04/30/Linux%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/30/Linux%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h1><p>计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出(文字、图片、音频、视频等)。计算机由硬件和软件组成:</p><ul><li><p>硬件是计算机赖以工作的实体，包括显示器、键盘、鼠标、硬盘、CPU、主板等</p></li><li><p>软件会按照用户的要求协调整台计算机的工作，比如Windows、Linux、Mac OS、Android等操作系统，以及Office、QQ、迅雷、微信等应用程序。</p></li></ul><p>**操作系统(Operating System, OS)<strong>是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的</strong>桥梁(或者说接口、中间人、中介等)**。</p><p>操作系统会控制其他程序运行,管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如:文件系统、设备驱动、用户界面、系统服务等</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301650571.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>操作系统使得应用程序无法直接与硬件打交道，而是必须经由操作系统的内核，协调多个程序运行避免恶意程序破坏其他进程独占资源，保证了多任务平稳的运行</p><p>操作系统向外提供系统调用,然后系统调用被封装成库向外提供库调用，程序员只需要根据库的API接口进行编程，不用关心底层硬件的不同，便于程序的移植。</p><h1 id="Linux系统发展史"><a href="#Linux系统发展史" class="headerlink" title="Linux系统发展史"></a>Linux系统发展史</h1><p>Linux在设计之初，是一个基于POSIX的多用户、多任务并且支持多线程和多CPU的操作系统，它是由世界各地成千上万的程序员设计和开发实现。</p><p>当初开发Linux系统的目的就是建立不受任何商业化软件版权制约的、全世界都能自由使用的类Unix操作系统兼容产品。</p><h2 id="什么是Unix"><a href="#什么是Unix" class="headerlink" title="什么是Unix"></a>什么是Unix</h2><p>Unix是一种计算机操作系统，具有多任务、多用户的特征，是商业化的，和硬件配套使用 IBM—AIX、HP—HP-UX、SUN—Solaris</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301839958.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="Linux系统主要特性"><a href="#Linux系统主要特性" class="headerlink" title="Linux系统主要特性"></a>Linux系统主要特性</h2><ol><li>基本思想：一切皆文件，每个软件都有特定用途</li><li>兼容POSIX1.0标准： 可移植操作系统接口，可在其他兼容POSIX标准的系统上执行程序</li><li>多用户多任务：各个用户对于自己的文件有自己的权力，多个程序同时并独立的运行</li><li>支持多种平台：可以运行在多种硬件平台上，比如x86、680x0、SPARC、Alpha等处理器的平台</li><li>良好的界面：同时具有字符界面和图形界面</li><li>完全免费</li></ol><h2 id="Linux系统版本"><a href="#Linux系统版本" class="headerlink" title="Linux系统版本"></a>Linux系统版本</h2><h3 id="内核版"><a href="#内核版" class="headerlink" title="内核版"></a>内核版</h3><p>Linux内核版本指的就是Linux的核心版本，在<a href="https://www.kernel.org/">内核官方网站</a><a href="http://www.kernel.org发布.**内核/">www.kernel.org发布。**内核</a>** 指的是一个提供硬件抽象层、磁盘及文件系统控制、多任务等功能的系统软件。一个内核不是一套完整的操作系统。Linux内核的主要模块（或组件）分以下几个部分:<strong>存储管理</strong>、<strong>CPU和进程管理</strong>、<strong>文件系统</strong>、<strong>设备管理和驱动</strong>、<strong>网络通信</strong>，以及<strong>系统的初始化(引导)<strong>、</strong>系统调用</strong>等。</p><h3 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h3><p>预先整合好的Linux系统，一般使用者不需要重新编译，直接安装后进行小幅度更改设置就可以使用</p><p><code>Redhat</code> —— 最著名的Linux版本，企业级<br><code>CentOS</code> —— 要求高稳定性服务器使用<br><code>Ubuntu</code> —— 以桌面应用为主，多媒体<br><code>SUSE</code>   —— 连接数据库最稳定</p><h2 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h2><ol><li>由目的单一的小程序组成;</li><li>组合小程序完成复杂任务一切皆文件</li><li>尽量避免捕获用户接口</li><li>配置文件保存为纯文本格式</li><li>Linux的shell，是人机接口。Linux的shell 包括GUI和CLI两种类型。<ol><li>GUI指图形界面，与windows类似。比较常见的有gnome、KDE和xface等</li><li>CLI是命令行界面。比较常见的有bash.csh、zsh、 ksh 和tcsh等，我们通常使用用bash。</li></ol></li></ol><hr><h1 id="Linux命令行基础"><a href="#Linux命令行基础" class="headerlink" title="Linux命令行基础"></a>Linux命令行基础</h1><p>下面的命令行是基于 CentOS7 的版本</p><h2 id="登录Linux"><a href="#登录Linux" class="headerlink" title="登录Linux"></a>登录Linux</h2><p>Liunx命令行登录时是没有回显的，我们只需要输入完密码回车结束就好</p><p>Linux命令提示符有两种：<code>#</code> 和 <code>$</code></p><ol><li><code>$</code> 号是使用普通用户登录后的提示符</li><li><code>#</code> 号是超级用户root登录后的提示符</li></ol><h2 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h2><p>注意Linux命令是严格区分大小写的</p><ol><li><code>Ctrl+C</code> 终止当前输入和操作</li><li><code>TAB</code> 补全当前的命令，有的系统按一下就可以进行自动补齐，有点需要按两下</li><li><code>Ctrl+A</code> 使光标移到最前面</li><li><code>Ctrl+E</code> 使光标移到最后</li><li><code>Ctrl+D</code> 退出当前终端</li><li><code>Ctrl+L</code> 清屏</li><li><code>Ctrl+Z</code> 暂停当前进程，和Ctrl+C不同，Ctrl+Z暂停后可以恢复进程</li><li><code>ifconfig</code> 查看当前接口状态，默认为自动获取IP，默认网口为ens33</li><li><code>ss -lnt</code> 查看当前开放的tcp端口</li></ol><h3 id="Linux命令的语法"><a href="#Linux命令的语法" class="headerlink" title="Linux命令的语法"></a>Linux命令的语法</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301919332.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>有时命令会带有一个或者多个选项。</p><p>通常选项由<strong>单个字母构成</strong>，并在字母前加<strong>一个连接符</strong><code>-</code>，有时因为选项太多，我们可以使用更简单的写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a -l -t和ls -alt是一种含义</span><br></pre></td></tr></table></figure><p>有些选项也可以是一个<strong>连续的单词</strong>，我们称为<strong>长选项</strong>，使用<strong>两个连接符</strong>加一个完整单词如<code>ls --help</code><br>–help是多数命令的帮肋选历,可以查看命令的基本使用方式法，同时，多数命令在选项之后可以接参数，参数通常是指文件名、目录、用户名、设备。其实可以理解为命令要执行操作的对象。</p><p>总结一下，选项是告诉命令<strong>怎样执行</strong>，参数告诉命令<strong>对谁执行</strong></p><h3 id="Shell-History"><a href="#Shell-History" class="headerlink" title="Shell History"></a>Shell History</h3><p>我们可以通过 <code>history</code> 命令来查看以前执行过的命令</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301926508.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p>!数字 执行history中对应编号的命令<br>!!    执行上一条命令<br>!?is? 执行history中包含<code>is</code>的命令<br>还可以通过上下键来选择历史命令</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 Web服务器</title>
      <link href="/2022/04/30/windowsServer2012Web/"/>
      <url>/2022/04/30/windowsServer2012Web/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB服务器概述"><a href="#WEB服务器概述" class="headerlink" title="WEB服务器概述"></a>WEB服务器概述</h1><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301249777.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>web服务器一般也称为：网页服务器，HTTP服务器 </p><p>web服务器使用的协议是： http协议, <strong>端口号：80</strong></p><p><strong>web服务器的作用：</strong><br>​    web服务器是将我们做好的网页发布出去,让网民可以通过网络远程访问我们的网页，比如京东网站服务器，</p><h2 id="WEB服务中的元素"><a href="#WEB服务中的元素" class="headerlink" title="WEB服务中的元素"></a>WEB服务中的元素</h2><p>HTTP (HyperText Transfer Protocol，超文本传输协议)，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，HTTP是一个客户端(用户)和服务端(网站)之间请求和应答的标准</p><p>www (World Wide Web，万维网)是一个透过互联网访问的，由许多互相链接的超文本组成的系统,万维网是信息时代发展的核心，也是数十亿人在互联网上进行交互的主要工具。今天我们通常用www，表示一台WEB主机。</p><p>URL(Uniform Resource Locator，统一资源定位符)互联网上的标准地址，统一资源定位符的完整格式如下</p><blockquote><p><a href="https://bbs.sangfor.com.cn:80/plugin.php?id=service">https://bbs.sangfor.com.cn:80/plugin.php?id=service</a></p></blockquote><h2 id="WEB服务器常见类型"><a href="#WEB服务器常见类型" class="headerlink" title="WEB服务器常见类型"></a>WEB服务器常见类型</h2><p>Windows Server内置了一个WEB服务器，名为IIS（Internet information Service）互联网信息服务，使用动态语言 <code>APS/ASPX</code></p><p>IIS除了提供HTTP协议的WEB浏览，还可以提供FTP&#x2F;FTPS、NNTP、HTTPS、SMTP等服务</p><p>在Linux中，常用的WEB器有多种，如</p><ul><li>APACHE,可以结合PHP</li><li>TOMCAT,以JAVA为主</li><li>NGINX,以静态页面为主</li></ul><p>除此以外,还有一些厂商的WEB服务器，比如：</p><ul><li>IBM公司的WebSphere，以JAVA为主</li><li>Oracle的WebLogic，以JAVA为主</li></ul><h1 id="使用IIS部署web服务器"><a href="#使用IIS部署web服务器" class="headerlink" title="使用IIS部署web服务器"></a>使用IIS部署web服务器</h1><p>和DNS，DHCP服务器类似，我们也是在管理工具中添加这个IIS服务，记得安装时勾选安全响应的功能，即把Web服务器下安全性的功能都勾选上</p><ol><li><p>winxp 客户机 win2012web服务器 连在同一个交换机在同一网段，相互ping通</p></li><li><p>安装IIS里的web插件，和安装DNS类似，不过这里选择的不是网络服务而是“应用程序服务器”，里面有IIS ，双击里面还有万维网服务，选中万维网服务，安装</p></li><li><p>安装完后我们netstat -an 来看一下<strong>80端口</strong>已经开了，说明服务器已经可以用了，只是网页没有发布。</p><p>这个时候我们再xp打开浏览器，访问这个服务器的IP就会看到“建设中”这三个字，这是IIS自带的默认网站，它的路径：C:\Inetpub\wwwroot   这个网站有很大的漏洞。我们去开始—管理工具，找到“Internet信息服务管理器” 里面有个网站，默认网站，右键停止它。</p><p><strong>注意：因为web服务器上唯一的网站停止了，所以80端口自动就关闭了</strong></p></li><li><p>发布网站：在网站那右键新建网站，输入个描述，选择IP，一路下一步。完成后设置<strong>默认文档</strong>，右键刚才建的网站，属性里有个文档，设置一下它的主页，把其他的都删了，自己添加一个。</p></li><li><p>我们重复第4 步，再次发布一个新的网站</p><p>我们发现它是停止的，右键点击启动报错，这是因为端口号冲突了，</p><p>方法一：同一IP，不同端口号<br>        我们把端口改为81，这样就可以同时发布了，但是访问的时候，没有写端口默认80,如果想要访问其他的，需要手动输入端口号。（适用于专业人士测试网站）<br>方法二：同一IP，同一端口，不同域名<br>        在属性里不改端口号，我们点击IP后面的高级，点击编辑，写一个主机头值，也就是完整的域名。这样同一个端口和IP，因为主机头值不同所以可以区别开，但是，我们只能通过域名来访问了。所以我们需要同时设置一下DNS服务器，给客户机配置好DNS，因为只有IP，端口，域名三个都相同才可以访问到该网站。通过IP已经不可以访问了。</p></li></ol><h2 id="IIS的安全配置"><a href="#IIS的安全配置" class="headerlink" title="IIS的安全配置"></a>IIS的安全配置</h2><p>默认状态下，所有的用户匿名连接IIS网站，如果对网站的安全性要求高，或网站中有机密信息，就需要对用户限制,禁止匿名访问，而只允许特殊的用户账户才能进行访问。可以通过IIS“身份验证”功能实现</p><p>点击刚才的网站，双击<strong>身份验证</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301424007.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>windows身份验证</strong>:集成Windows验证是一种安全的验证形式，用户名和密码在通过网络发送前会经过散列处理，因此可以确保安全性。如果是域环境，会自动读取用户身份验证。Windows身份验证优先于基本验证，但它并不提示用户输入用户名和密码，只有Windows验证失败后，浏览器才提示用户输入其用户名和密码。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301426370.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>摘要式身份验证</strong>:该验证只能在带有Windows域控制器的域中使用。域控制器必须具有所用密码的纯文本复件，因为必须执行散列操作并将结果与浏览器发送的散列值相比较。</p><p><strong>基本身份验证</strong>:该验证会“模仿”为一个本地用户(即实际登录到服务器的用户)，再访问Web服务器时登录。若以基本验证方式验证用户，则用户必须具有服务器“本地登录”的权限。使用基本身份验证方法将导致密码以未加密形式在网络上传输</p><p>我们需要先禁用 <code>匿名身份验证</code> 然后更具需要打开其他的身份验证</p><p>我们还可以通过 <strong>IP地址和域限制</strong> 设置允许哪些IP访问或者拒绝哪些IP访问</p><h2 id="网站类型"><a href="#网站类型" class="headerlink" title="网站类型"></a>网站类型</h2><p><strong>静态网站</strong>：不可以和用户互动，一般扩展名为.html或.htm</p><p>只有前台，没有后台数据库</p><p><strong>动态网站：</strong>可以与客户进行互动，在静态网页上内置的了动态语言（php，asp，jsp，java，python），一般扩展名为.php或.asp等，</p><p>asp是微软的，在window上发布，IIS+ASP+SQL Server</p><p>php不是微软的，推荐在linux里发布:Apache+php+mysql</p><p>发布动态的网页，开始和前面的都一样，不过新建网页时有相关权限勾线，我们要勾选“<strong>读取”，“运行脚本”，“执行”</strong>, 然后在网站下面还有一个web扩展，我们打开Active Server Page 选择允许，</p><hr><h1 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>File Transfor Protocol（文件传输服务器）</p><p>FTP服务器功能几乎登445文件共享服务器。</p><p>一般内部文件共享使用SMB服务器，对外文件共享使用FTP服务器。</p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><p>端口号：20&#x2F;21</p><p>21端口：控制端口</p><p>20端口：数据端口</p><p>FTP协议有两种模式：主动模式，被动模式</p><p>主被动模式的选择在客户机，但所谓主被动是站在服务器的角度说的，看服务器是主动连接还是被别人连接。</p><h2 id="使用IIS部署FTP服务器"><a href="#使用IIS部署FTP服务器" class="headerlink" title="使用IIS部署FTP服务器"></a>使用IIS部署FTP服务器</h2><ol><li><p>连接客户机，服务器，连接到同一交换机，配置IP，相互ping通</p></li><li><p>安装IIS里面的<strong>文件传输协议（FTP）服务</strong> 在万维网的下面。</p></li><li><p>打开cmd，netstat -an ，发现21端口已经开了，和web一样，它也有一个默认的共享文件，路径是： C:\Inetpub\ftproot</p></li><li><p>开始—管理工具—IIS （它还是IIS这个软件，但是里面有一个FTP服务）</p></li><li><p>我们只需要把共享的文件放在那个默认的文件夹里就可以共享了，</p></li><li><p>客户机在文件资源管理器（我的电脑），地址栏输入：<code>ftp://10.1.1.2</code>，10.1.1.2是服务器IP，就可以访问了。</p><p>当然这个站点也是有漏洞的，我们可以像web一样自己新建一个共享的文件夹。在FTP站点上右键—–新建—-起个名字—–一路下一步—最后权限都勾选上，因为是和文件夹权限取交集，那么我们只用关心文件夹的NTFS权限就可以了。</p></li><li><p>我们在默认的站点那里右键属性—安全账户，我们发现勾选了允许匿名访问，即不用输入账号密码就可以访问了。</p><p>那是因为我们在安装IIS的时候，自动创建了一个以 IUSR_+计算机名的用户，这是一个Internet来宾账户，当我们允许匿名访问的时候，服务器会把这个用户的账户密码发个客户机，客户机自动实现登录，所以看起来用户是没有输入密码和账户的，但是事实上，任何访问都需要一个身份。</p><p>我们不勾选允许匿名访问，那么我们就可以利用以前学的NTFS权限来设置可以访问的用户。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 文件服务器</title>
      <link href="/2022/04/29/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/29/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="文件服务器概述"><a href="#文件服务器概述" class="headerlink" title="文件服务器概述"></a>文件服务器概述</h1><p>在计算机应用场景中，我们经常需要在不同设备之间传输文件</p><p>通常我们可以使用IM工具、**文件传输服务器(FTP)**来传送文件</p><p>如果有windows域环境,我们可直接使用windows内置的文件共享功能，结合域用户来管理权限，简单便捷的完成文件传输任务。</p><p>文件服务器本质上是<strong>网络上的一个共享文件夹</strong>，通过windows的权限管理，管理员可以决定什么样的用户访问什么文件夹，管理员有权限配置用户的访问权限，我们可以使用活动目录管理和发布共享文件夹</p><h1 id="文件系统概述"><a href="#文件系统概述" class="headerlink" title="文件系统概述"></a>文件系统概述</h1><p>文件系统就是在外部存储设备上组织文件的方法</p><p>文件系统类型有</p><blockquote><p>NTFS  这个是微软目前比较新的 这个可以给文件夹设置权限</p><p>FAT   这个是微软原来的 这个不可以设置</p><p>EXT   这个是Linux 的</p></blockquote><h1 id="NTFS文件系统权限"><a href="#NTFS文件系统权限" class="headerlink" title="NTFS文件系统权限"></a>NTFS文件系统权限</h1><p>NTFS是windows操作系统格式化磁盘的一个选项，准确说是一种文件系统格式</p><p>NTFS有四个主要特性：<strong>压缩</strong>、<strong>加密</strong>、<strong>配额</strong>、<strong>安全</strong></p><p>NTFS给普通用户组users的默认权限是只读</p><h2 id="NTFS安全权限概述"><a href="#NTFS安全权限概述" class="headerlink" title="NTFS安全权限概述"></a>NTFS安全权限概述</h2><ol><li><p>通过设置NTFS权限，实现不同的用户访问的权限</p></li><li><p>分配了正确的访问权限，用户才能访问其资源</p></li><li><p>设置权限繁殖资源被篡改，侵删。</p></li></ol><h2 id="NTFS文件系统特点"><a href="#NTFS文件系统特点" class="headerlink" title="NTFS文件系统特点"></a>NTFS文件系统特点</h2><ol><li><p>提高磁盘读写性能</p></li><li><p><strong>可靠性</strong></p><p><strong>加密文件系统</strong></p><p><strong>访问控制列表（设置权限）</strong></p><p>这些是我们关心的</p></li><li><p>磁盘利用率</p><p>压缩</p><p>磁盘配额</p></li><li><p>支持单个文件大于4G</p></li></ol><h2 id="配置NTFS权限"><a href="#配置NTFS权限" class="headerlink" title="配置NTFS权限"></a>配置NTFS权限</h2><p>在文件夹–&gt;右键–&gt;属性–&gt;安全 中点击编辑，进行权限的配置</p><h3 id="取消权限继承"><a href="#取消权限继承" class="headerlink" title="取消权限继承"></a>取消权限继承</h3><p>作用：取消后，可以任意修改权限列表</p><p>方法：文件夹右键属性–安全–高级–去掉第一个对勾–选择复制</p><h3 id="文件机器及文件夹权限"><a href="#文件机器及文件夹权限" class="headerlink" title="文件机器及文件夹权限"></a>文件机器及文件夹权限</h3><table><thead><tr><th>文件和文件夹权限</th><th>权限内容</th></tr></thead><tbody><tr><td>完全控制</td><td>拥有读取，写入，修改，删除文件，及特殊权限</td></tr><tr><td>修改</td><td>可以删除以及读取写入，执行</td></tr><tr><td>读取和执行</td><td>读取文件夹文件，执行文件夹里的程序</td></tr><tr><td>读取</td><td>只能读取</td></tr><tr><td>写入</td><td>可以写入</td></tr><tr><td>特殊权限</td><td>修改所有权，默认administrator</td></tr><tr><td>读出文件夹目录</td><td>可以看到文件夹里有什么文件</td></tr></tbody></table><h3 id="权限累加"><a href="#权限累加" class="headerlink" title="权限累加"></a>权限累加</h3><p>NTFS安全在获取用户权限的时候，是一种累加策略，比如用户同时在三个组，那么用户的权限就是这三个组权限的累加</p><h3 id="取得所有权"><a href="#取得所有权" class="headerlink" title="取得所有权"></a>取得所有权</h3><p>默认只有administrator 有这个权限</p><p>作用：将任何文件的所有者改为administrator</p><p>方法：文件右键属性–安全–高级–所有者–选择administrator</p><h3 id="文件复制移动对权限的影响"><a href="#文件复制移动对权限的影响" class="headerlink" title="文件复制移动对权限的影响"></a>文件复制移动对权限的影响</h3><p>同分区复制–权限覆盖</p><p>同分区移动–权限不变</p><p>不同分区复制–权限覆盖</p><p>不同分区移动–权限覆盖</p><h2 id="windows-2012-R2-的-ABE-特性"><a href="#windows-2012-R2-的-ABE-特性" class="headerlink" title="windows 2012 R2 的 ABE 特性"></a>windows 2012 R2 的 ABE 特性</h2><p>ABE(Access-Based Enumeration) 基于访问的列举，windows 2012后，你打开文件夹时，仅仅会显示你有权限查看的文件夹，而你没有权限查看的文件夹，操作系统根本不会显示出来。</p><h1 id="文件服务器配置"><a href="#文件服务器配置" class="headerlink" title="文件服务器配置"></a>文件服务器配置</h1><p>在服务器中新建一个文件夹，右键–&gt;属性中选择<code>共享</code>，可以给文件夹添加访问权限，比如 <code>everyone</code> 。<strong>everyone</strong>是windows操作系统的默认组，代表所有用户，是从<code>系统共享的视角</code> 来分配权限。和NTFS不是同一个，注意区分</p><p>系统共享权限，是在共享文件夹时设置的权限，其权限只能设置在文件夹上，而不能设置在单独文件上，子文件夹可以从父文件夹集成权限，<strong>共享权限仅在用户远程访问共享数据时生效，而在服务器本机操作时不会生效</strong>，共享权限是一个加法运算，当用户有多种权限属性时，会将权限相加，但是<strong>拒绝权限会覆盖所有的允许权限</strong></p><p><strong>注意：</strong></p><ol><li>在本地登录时，只受NTFS权限的影响</li><li>远程登录时，将受到共享以及NTFS权限的共同影响，且取交集</li><li>所以共享的权限设置为 everyone 完全控制，具体的权限需求在NTFS中设置</li></ol><h2 id="共享访问"><a href="#共享访问" class="headerlink" title="共享访问"></a>共享访问</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法：</span><br><span class="line">win + R  输入 UNC地址：</span><br><span class="line">\\共享服务器IP</span><br><span class="line">\\共享服务器IP\共享文件名（不是文件夹名）</span><br><span class="line">然后使用该服务器提前创建好的账户来访问</span><br><span class="line"></span><br><span class="line">如果在域环境中，可以直接使用域用户登录电脑，在文件资源管理器中直接输入 \\共享服务器IP</span><br><span class="line"></span><br><span class="line">注意：一个 斜杠 \ 表示本地路径</span><br><span class="line"> 两个 斜杠 \ 表示网络路径</span><br></pre></td></tr></table></figure><h2 id="隐藏共享夹和访问隐藏共享文件夹"><a href="#隐藏共享夹和访问隐藏共享文件夹" class="headerlink" title="隐藏共享夹和访问隐藏共享文件夹"></a>隐藏共享夹和访问隐藏共享文件夹</h2><p>隐藏方法： 把共享名 后加一个$符号</p><p>访问方法：手动输入地址   <code>\\共享服务器IP\ 共享名$</code></p><h2 id="共享相关命令"><a href="#共享相关命令" class="headerlink" title="共享相关命令"></a>共享相关命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net share列出共享列表</span><br><span class="line">net share 共享名 /del    删除共享</span><br></pre></td></tr></table></figure><p>我们可以看到很多我们不知道的共享，比如 D盘，E盘等，都是系统默认共享出去的</p><h2 id="屏幕系统所有分区隐藏共享自动产"><a href="#屏幕系统所有分区隐藏共享自动产" class="headerlink" title="屏幕系统所有分区隐藏共享自动产"></a>屏幕系统所有分区隐藏共享自动产</h2><h3 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h3><p>注册表编辑器：regedit</p><p>注册表在电脑里的功能就相当与政府在城市的作用。</p><h3 id="定位共享注册表的位置"><a href="#定位共享注册表的位置" class="headerlink" title="定位共享注册表的位置"></a>定位共享注册表的位置</h3><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</p><p>新建一个REG_DWORD类型的AutoShareServer，值为0</p><h3 id="还有一个漏洞"><a href="#还有一个漏洞" class="headerlink" title="还有一个漏洞"></a>还有一个漏洞</h3><p>虽然我们把系统分区的隐藏共享屏蔽了，但是IPC$ 这个共享很难屏蔽，所以445端口还是开着。我们就可以利用445这个端口入侵，这个端口是个空端口，如果连接了它的IPC$ 就可以看它其他的东西。</p><h3 id="关闭445端口"><a href="#关闭445端口" class="headerlink" title="关闭445端口"></a>关闭445端口</h3><p>如果没有文件共享需求，可以通过关闭445端口来屏蔽病毒传入（如2017年勒索病毒）</p><p>方法一:打开services.msc(服务管理窗口) ，停止并禁用server服务</p><p>方法二：禁止被访问445，配置安全高级防火墙-入站规则（win7以上系统），打开控制面板–系统和安全–防火墙–左侧有高级设置–入站规则右键–新建规则–端口类型–445–阻止–起个名字就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 活动目录</title>
      <link href="/2022/04/29/%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/04/29/%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="活动目录概述"><a href="#活动目录概述" class="headerlink" title="活动目录概述"></a>活动目录概述</h1><p><strong>目录</strong>是存储有关网络上对象的信息的层次结构。<strong>目录服务</strong> 提供了存储 <strong>目录数据</strong> 和 网络用户和管理员使用<strong>目录数据</strong>的方法。</p><p><strong>活动目录</strong> (Active Directory，简称AD) 是微软Windows Server中,负责中大型网络环境架构的集中式目录管理服务(Directory Services)。从windows server 2000开始内置在操作系统中。</p><p><strong>活动目录</strong>处理在组织中的<strong>网络对象</strong>，<strong>对象</strong>可以是用户、组群、电脑、网域控制站、邮件、配置文件、组织单元、树系等等，只要是在活动目录结构定义档(schema)中定义的对象，就可以存储在活动目录资料档中，并利用活动目录 Service Interface来访问，实际上，许多活动目录的管理工具都是利用这个接口来调用并使用活动目录的资料。</p><p>通过登录身份验证和对目录中对象的访问控制，安全与Active Directory 集成。通过单一网络登录，管理员可用管理整个网络中的目录数据和组织，授权网络用户可用访问网络上任何位置的资源，基于策略的管理简化了最复杂的网络管理</p><p>AD还包括：</p><ol><li><strong>一组规则</strong>，即架构，<strong>定义</strong>目录中包含的<strong>对象和属性的类别</strong>、这些对象的<strong>实例的约束</strong>和限制及其名称的格式。</li><li>包含有关目录中每个对象的信息的<strong>全局编录</strong>。这允许用户和管理员查找目录信息，而不考虑目录中的哪个域实际包含数据。</li><li><strong>一种查询和索引机制</strong>，以便对象及其属性可由网络用户或应用程序发布和查找。</li><li><strong>跨网络</strong>分发目录数据的<strong>复制服务</strong>。域中的所有<strong>域控制器</strong>均参与复制，并包含其域的所有目录信息的<strong>完整副本</strong>。对目录数据的任何更改均复制到域中的所有域控制器。</li></ol><p>活动目录(AD)以树状的数据结构来组成网络服务的信息，在简单的网络环境中(小公司)，通常网域都只有一个，在中型或大型的网络中，网域可能会有很多个，或是和其他公司或组织的AD相互连接(此链接称为<strong>信任关系</strong>)</p><h1 id="活动目录组件"><a href="#活动目录组件" class="headerlink" title="活动目录组件"></a>活动目录组件</h1><p>AD DS (Active Directory Domain Services) 活动目录域服务器 简称 AD域 。安装了域控制器就生成了域环境，安装了活动目录就生成了域控制器</p><p>AD DS 组件可分为逻辑组件和物理组件</p><ol><li><p>逻辑组件</p><ul><li>Partitions (分区)</li><li>Schema     (架构)</li><li>Domains    (域)</li><li>Domain trees (域树)</li><li>Forests      (森林关系)</li><li>Sites   (站点，基于某个区域实现的逻辑结构)</li><li>OUs     (组织单元)</li><li>Containers  (容器)</li></ul></li><li><p>物理组件</p><ul><li>Domain controllers (域控制器)</li><li>Data stores (数据存储数据库)</li><li>Global catalog (全局编录服务器)</li><li>servers (物理服务器)</li><li>RODCS  (只读域控)</li></ul></li></ol><p><strong>域控制器 Domain controllers ：</strong>托管 AD DS的数据库和SYSVOL(域公共文件服务器，如GPOs)，Kerberos身份验证服务和KDC服务执行省份验证</p><p><strong>全局编录 Global catalog：</strong>为域林中的其它域承载一些属性以支持整个林中对象的查询</p><p><strong>组织单元 OU(Organization Unit)：</strong>通常用于配置OU下的组策略，委派OU给其他管理员<br>下图是一个活动目录的<strong>树形结构</strong>图，每个有个小书图标的小文件夹就是一个<strong>组织单元</strong>，没有小书图标的就是容器<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291435654.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>AD DS森林：</strong> 就是多个树域(上图就是域的树形结构简称域树)和子域组成的域林</p><p><strong>AD DS Schema：</strong> 定义了存储在AD DS 数据库中的对象<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291444851.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><h1 id="活动目录管理与应用"><a href="#活动目录管理与应用" class="headerlink" title="活动目录管理与应用"></a>活动目录管理与应用</h1><h2 id="安装活动目录"><a href="#安装活动目录" class="headerlink" title="安装活动目录"></a>安装活动目录</h2><p>类似于DNS服务器，windows server2012 我们可以直接在 服务器管理窗口进行安装。</p><h2 id="活动目录管理"><a href="#活动目录管理" class="headerlink" title="活动目录管理"></a>活动目录管理</h2><ol><li><p>OU：组织单位</p><p>作用：用于归类域资源（域用户，域计算机，域组）</p><p>OU下面可以包含 用户、用户组、计算机、联系人、打印机等，非常灵活，管理员依据OU来进行分层分组管理</p><p>开始–管理工具–Active Directory用户和计算机 点击我们的域，右键新建组织单位。还可以对组织单位右键新建组织单位，形成了一个组织架构，我们可以去uers里面把用户移动到不同的组织单位，也可以去computers里把电脑移动到不同的组织单位，对于用户，计算机，这属于两种资源，我们可以单独对用户实施组策略，这样不管它登录那个计算机都受到组策略的限制，也可以只对计算机做限制，只有这个计算机被限制，这个用户登录其他电脑不会被这个组策略限制。</p></li><li><p>组策略：Group Policy &#x3D; GPO</p><p>可以把windows的组策略对象挂在OU上，每个OU都有自己的组策略，可以达到不同的管理目的。<br>作用：通过组策略来限制，修改计算机的各种属性，如：开始菜单，桌面背景，网络参数等。</p><p>组策略在域中，是基于OU来下发的</p><p>组策略在域中下发后，用户的应用顺序是：LSDOU，在应用过程中如果出现冲突，后应用的生效。本地–林–域–离自己最近的OU</p></li><li><p>管理组策略<br>开始–管理工具–组策略管理，找到想要下发组策略的组织单位，右键选择“在这个域中创建GPO并……” 这样就建立好了，如果需要编辑，就找到要编辑的组策略，右键，编辑。他会有用户配置和计算机配置两个。选一个配置就可以，区别之前已经说过了。比如我们给用户配置，点击用户配制–策略–管理模板–桌面，点击桌面后，右边就会出来好多的设置以及它们的状态。我们设置一个桌面，在active desktop 里有壁纸设置，双击，选择启用，再在D盘建立一个共享文件夹，因为员工要去这里下载文件，所以下面壁纸名称我们要写共享路径，这之前讲过<code>\\10.1.1.1\share\aaa.jpg</code>  即要写好IP和共享的文件夹。这样就好了，我们重启注销，就会发现好了，或者自定义桌面发现而没法改变。</p><p>我们还可以在对应的组策略右键强制，这样就是执行完这个组策略就可以了如果后面和这个冲突，那么也用这个，如果没冲突就继续执行本来的</p><p>我们也可以对着那个组，右键，阻止继承，这样就只执行这个组的组策略，前面的都不管了。</p><p>如果同时上级点了强制，下面还阻止继承，那么强制生效，阻止没有用。</p><p>有的公司需要安全加固，在计算机配置，windows 设置里有安全设置，账户策略，我们可以规定密码的长度等等。</p><p>如果我们忘了都设置过哪些组策略，我们可以点击组策略，设置，那里会显示我们设置的策略，中途会弹出窗口，我们添加就可以了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 DHCP服务器</title>
      <link href="/2022/04/29/DHCP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/29/DHCP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP概述"><a href="#DHCP概述" class="headerlink" title="DHCP概述"></a>DHCP概述</h1><p>（Dynamic Host Configure Protocol）自动为客户机分配IP地址，位于<strong>OSI模型的应用层</strong></p><p><strong>应用场景：</strong> 公司里的员工每个人都手动输入IP地址很麻烦并且可能会出错，需要公司IT管理员去进行操作，在这个场景下，需要使用DHCP服务器去给客户端分发管理IP地址</p><p><strong>DHCP的两个作用</strong></p><ol><li>用于内部网或网络服务供应商自动分配IP地址给用户</li><li>用于内部网管理员对所有电脑作中央管理</li></ol><p><strong>DHCP优点：</strong> </p><ul><li>减少工作量，避免IP冲突，提高地址利用率</li><li>可用保留IP，分配给特殊客户端</li><li>特殊应用，如无IP场景，安装操作系统</li></ul><p><strong>DHCP缺点：</strong></p><ul><li>DHCP服务器单点故障</li><li>DHCP如果配置错误，全网不可用</li><li>多子网情况，需要配置路由器或交换机</li></ul><p><strong>DHCP相关概念</strong></p><ul><li>地址池&#x2F;作用域：（IP、子网掩码、网关、DNS、租期）</li><li>DHCP协议的端口号 <strong>67&#x2F;68</strong>  —netstat -an 来查看</li></ul><h2 id="DHCP原理"><a href="#DHCP原理" class="headerlink" title="DHCP原理"></a>DHCP原理</h2><p> 也称为租约过程，分为4个步骤DORA</p><ol><li><p><strong>客户机发送DHCP Discovery 广播包</strong></p><p>客户机开机启动时，发送一个广播请求IP地址（包含客户机的MAC地址，每个电脑的网卡都有一个固化在里面的MAC地址，不能改变）</p></li><li><p><strong>服务器响应DHCP Offer 广播包</strong></p><p>任何收到请求的DHCP服务器都会检查其内部数据库并进行响应，其中提供一个可用的 IP 地址 （但没有子网掩码，网关等参数）</p></li><li><p><strong>客户机发送DHCP Request 广播包</strong></p><p>客户机可能收到一个或者多个<code>DHCP Offer</code>(正常情况下都收到一个)，从中随机选择IP（也可以认为是确认使用那个IP），并发送<code>Request</code>给这个服务器，表示接收该<code>DHCP Offer</code></p></li><li><p><strong>服务器发动DHCP ACK 广播包</strong></p><p>ACK: acknowledge 确认</p><p>服务器收到了request后，就确定了租约，从数据库中标记该IP地址已经被使用，并给客户端发送<code>DHCP ACK</code>数据包，提供网卡详细参数，IP，子网掩码，DNS，租期等。</p></li></ol><p>如果客户端发送DISCOVER后，没有服务器响应，就会隔一段时间再次发送 DISCOVER，如果任然没有收到OFFER，客户端会使用备用配置(私有地址 169.xxx.xxx.xxx) 此后，客户端每隔5分钟，会继续发送DISCOVER</p><h2 id="DHCP续约"><a href="#DHCP续约" class="headerlink" title="DHCP续约"></a>DHCP续约</h2><p>租期是工程师自己设置的，当租期过50%后，客户机会再次发送DHCP Request 包进行续约，如果服务器响应<code>DHCP ACK</code>，客户端就可用进行租约更新，如果服务器没有响应，则将继续使用当前IP，并在87.5%再次发送DHCP Request 包，进行续约，如果任无响应，释放IP地址，并重新发送DHCP Discovery广播包来获取IP地址（如果有，那么原来的作废，用新的），当没有任何服务器响应时，自动给自己分配一个169.254.x.x&#x2F;16，属于全球统一无效地址，用于临时内网通信。</p><p>当客户机用了一会关机不用了，那么默认到了租期后IP才会返回，如果一会又开始用了，只要租期没到，那么和以前是同一个IP</p><p>我们也可用手动进行租约的更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /release    释放IP（取消租约，或者改为手动配置IP，也可以释放租约）</span><br><span class="line">ipconfig /renew      重新获取IP（有IP时发送Request，没有IP时发送Discovery</span><br></pre></td></tr></table></figure><h2 id="部署DHCP服务器"><a href="#部署DHCP服务器" class="headerlink" title="部署DHCP服务器"></a>部署DHCP服务器</h2><ol><li><p>IP地址固定（服务器必须固定IP地址，主要IP必须和将来分配给员工的IP在同一网段）</p></li><li><p>安装DHCP服务器插件&#x2F;软件</p><p> 这个插件微软以及内置好了，我们需要的就是去系统镜像的光盘里，选择安装可选的windows组件，然后找到网络服务，双击打开，找到里面的DHCP服务然后打对勾，安装。</p><p> cmd里 netstat -an 可以看到 67，68端口，这里其实工作的时候是为了兼容老机器，67为xp等一些老版本，68为win7等一些新机器来提供。</p></li><li><p>新建作用域以及作用域选项</p><p> 在开始菜单，管理工具里找到DHCP，然后我们打开，在我们服务器上右键选择新建作用域，配置好后就可以了。配置时有一个wins服务器这个不用管，是比较老的了</p></li><li><p>激活</p></li><li><p>客户机验证，图形界面禁用和启用网卡来刷新。或者使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /release    释放IP（取消租约，或者改为手动配置IP，也可以释放租约）</span><br><span class="line">ipconfig /renew      重新获取IP（有IP时发送Request，没有IP时发送Discovery</span><br></pre></td></tr></table></figure><p> 使用VMware时，如果获取的不是自己设置的IP 那是因为虚拟机 MVnet的交换机里内置了一个DHCP，所以我们需要把它关掉，在工具栏<strong>编辑</strong>里找到虚拟网络编辑器，在右下角选择更改设置，选中我们连接的交换机，勾掉“使用本地DHCP服务将IP分配给虚拟机”</p></li></ol><h2 id="地址保留"><a href="#地址保留" class="headerlink" title="地址保留"></a>地址保留</h2><p>在服务器DHCP里我们可以对指定的MAC地址固定动态分配的IP，右键新建保留，然后就可用把IP和MAC地址进行绑定保留</p><h2 id="DHCP服务器数据库维护"><a href="#DHCP服务器数据库维护" class="headerlink" title="DHCP服务器数据库维护"></a>DHCP服务器数据库维护</h2><p>windows server DHCP的数据库默认在 <code>c:\windows\system32\dhcp</code> 中，系统默认每60分钟备份存放于 backup文件夹中，我们以可以手动备份</p><h2 id="DHCP攻击防御"><a href="#DHCP攻击防御" class="headerlink" title="DHCP攻击防御"></a>DHCP攻击防御</h2><p>1.攻击DHCP服务器：频繁发送伪装的DHCP请求，知道将DHCP地址池资源耗尽<br>    防御：在交换机（管理型）的端口上做动态MAC地址绑定</p><p>2.伪装DHCP服务器攻击：通过将自己伪装成DHCP服务器，为客户机提供非法IP<br>    防御：在交换机（管理型），除合法的DHCP服务器所在接口外，全部设置为精致发送DHCP Offer 广播包</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 DNS服务</title>
      <link href="/2022/04/28/DNS%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/28/DNS%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-概述"><a href="#DNS-概述" class="headerlink" title="DNS 概述"></a>DNS 概述</h1><p>域名系统(英语:Domain Name System，缩写:DNS)是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库,能够使人更方便地访问互联网。</p><p>域名系统是一种允许您将域名解析为Internet协议(IP)地址。</p><p>如我们访问百度的的网站<a href="http://www.baidu.com是以域名形式进行访问,但计算机将www.baidu.com,通过域名服务器解释成ip/">www.baidu.com是以域名形式进行访问，但计算机将www.baidu.com，通过域名服务器解释成IP</a> 220.181.38.251来进行访问。计算机将<a href="http://www.baidu.com转换在220.181.38.251的过程,我们称为dns解析,这一过程是计算机自动进行,依赖于计算机的dns服务器/">www.baidu.com转换在220.181.38.251的过程，我们称为DNS解析，这一过程是计算机自动进行，依赖于计算机的DNS服务器</a></p><p>DNS通过允许一个名称服务器把它的一部分名称服务（众所周知的zone） 委托给子服务器而实现了一种层次结构的名称空间</p><p><strong>DNS 服务监听端口号为 53</strong></p><h2 id="DNS层次结构图"><a href="#DNS层次结构图" class="headerlink" title="DNS层次结构图"></a>DNS层次结构图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282051014.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>“<a href="http://www.sina.com”是一个域名,从严格意义上讲,从严格意义上“sina.com”才是域名,而“www”/">www.sina.com”是一个域名，从严格意义上讲，从严格意义上“sina.com”才是域名，而“www”</a> 是主机名。</p><p>“主机名.域名”称为完全限定域名（FQDN）。一个域名下可以有多个主机。</p><p>如“sina.com”域名，一般管理员在命名其主机的时候会根据其主机的功能而命名，比如：网站的是“www”,博客的是“blog”,论坛的是“bbs”那么就有“<a href="http://www.sina.com”,&quot;blog.sina.com&quot;,“bbs.sina.com”/">www.sina.com”,&quot;blog.sina.com&quot;,“bbs.sina.com”</a></p><p>买了域名，还要把“<a href="http://www.sina.com”/">www.sina.com”</a> 和它对应的IP 注册到DNS服务器上。</p><p>域名结束后要加个 <code>.</code>才可以访问，现在浏览器会帮我们加上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com.</span><br><span class="line">. 为根域</span><br><span class="line">.com为顶级域名</span><br><span class="line">baidu 为二级域名</span><br><span class="line">www 为主机名</span><br><span class="line"></span><br><span class="line">FQDN=主机名.DNS后缀</span><br><span class="line">FQDN(完全合格的域名)</span><br><span class="line">如：www.baidu.com</span><br><span class="line">www为主机名</span><br><span class="line">baidu.com为域名后缀</span><br><span class="line">www.baidu.com全称为FQDN</span><br></pre></td></tr></table></figure><h2 id="DNS中的几个角色"><a href="#DNS中的几个角色" class="headerlink" title="DNS中的几个角色"></a>DNS中的几个角色</h2><ol><li><p><strong>DNS客户端</strong>：向服务器发起查询，客户端和解析器的含义很类似。</p></li><li><p><strong>DNS服务器</strong>：接受客户端的查询，并返回查询结果</p></li><li><p><strong>解析器</strong>：解析器可以看作客户端试图代表客户端解析答案的程序，如浏览器</p></li><li><p><strong>查询</strong>：是对发送到DNS服务器的请求信息，DNS查询通常有三种:递归查询、迭代查询、反向查询</p></li></ol><h2 id="两种DNS服务器"><a href="#两种DNS服务器" class="headerlink" title="两种DNS服务器"></a>两种DNS服务器</h2><ol><li><p>动态DNS服务器:<br>起源于wins服务，在windowsNT 4.0以前，wins服务安装后，会动态的构建计算机名与IP地址的数据库并且当计算机的IP地址改变后，wins服务会更新相应数据。当时没有动态DNS服务器<br>rfc2136中描述的**动态DNS (DDNS)**标准允许DNS客户端更新DNS数据库文件中的信息。例如,Windows Server 2012 R2 DHCP服务器可以自动告诉DDNS服务器它已分配给哪些lIP地址什么机器。windows2000以后的客户端也可以这样做</p></li><li><p>非动态DNS服务器:<br>非动态DNS (NDDNS）不会自动填充DNS数据库。客户端系统无法更新到DNS，管理员需要手动填充DNS数据库。<br>手动将记录输入DNS的主要缺点是组织正在使用动态主机配置协议(DHCP)。在DHCP中，用户每天都有可能得到不同的TCP&#x2F;IP地址。这个意味着管理员必须每天手动更新DNS以保持其准确性。</p></li></ol><h2 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h2><ol><li><p>迭代查询<br>客户端向DNS服务器询问答案，服务器返回最佳答案，此信息可能来自服务器的缓存，如果服务器不知道答案，服务器会引导客户端去另一个服务器上查询</p></li><li><p>递归查询<br>客户机向名称服务器发送一个查询，要求他响应带有请求的答案或错误消息。错误消息是以下两种中的一种：</p><ol><li>服务器不能给出正确答案</li><li>域名不存在<br>在递归查询中，DNS服务器不允许将客户端引导到其他DNS服务器，而是由DNS服务器去其他DNS服务器上进行查询</li></ol></li><li><p>反向查询：<br>通过IP地址，查询名称，对应DNS服务器的PTR记录<br>反向接卸主要应用到邮件服务器中来阻拦垃圾邮件，多数邮件发送者使用动态分配或者没有注册域名的IP地址来发送垃圾邮件，使用反向查询，查询该IP对应的域名是否与发件域名一致</p></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282106983.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上图中 <code>1，8</code> 就是递归查询，而第一个DNS服务器做的就是迭代查询</p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>当DNS服务器处理递归查询时，可能需要发送几个查询才能找到最终答案</p><p>DNS服务器充当解析程序时，可以缓存在此过程中接收到的所有信息;每条记录都包含称为生存时间(TTL)的信息。</p><p>TTL记录反映了DNS记录在缓存中保留的时间，如果客户端查询命中了服务器的缓存，服务器返回的TTL则是当前TTL的剩余时间。</p><p>当权威服务器响应一个不存的查询记录时，会返回个负的TTL值,表示该项记录不存在</p><h2 id="DNS区域"><a href="#DNS区域" class="headerlink" title="DNS区域"></a>DNS区域</h2><p><strong>区域是在存储记录的数据库。</strong></p><p>DNS有多种区域类型，<strong>主区域</strong>、<strong>次要区域</strong>、<strong>子区域</strong>，我们需要根据不同需求设置不同区域</p><p><strong>主区域</strong>：主区域负责维护DNS区域的<strong>所有记录</strong>。它包含DNS数据库的主要数据。所有记录更新都发生在主服务器上区域。无论何时创建新的DNS记录，您都需要创建和添加主区域域名。主区域，所有数据都存在本地，如果服务器发生故障，则会所有记录丢失。所以我们需要次要区域,来提高可用性。</p><p><strong>次要区域</strong>：也叫辅助区域，从主区域复制数据，他所保存的DNS数据库是<strong>不可编辑的副本</strong>。<br>使用次要区域优势:</p><ul><li>提高主要区域服务器的容错</li><li>降低主要区域服务器的负载</li><li>可以放在不同的地方，以提高查询速度</li></ul><p><strong>存根区域</strong>：工作方式与辅助区域很像，数据库也是<strong>不可编辑的副本</strong>，不同之处是存根区域，并<strong>不会完整的复制所有主区域的DNS所有记录</strong>，他只是负责将查询<strong>转发</strong>给<strong>主要区域</strong>所在服务器。存根区域<strong>不能用来降低主区域服务器的负载</strong>，因为查询同样是转发到主区域；存根区域主要<strong>用于不能完全信任的场所</strong>，无法将全部DNS记录复制到对方DNS服务器。</p><p><strong>区域传送与复制</strong><br>辅助区域从主区域<strong>复制</strong>数据的过程，我们称为<strong>区域传送</strong>,首次创建辅助区域时，必须指定对区域有权威性的主服务器</p><p>区域传送有两种方式:</p><ol><li>full zone transfers (AXFR)全区域传输</li><li>incremental zone transfers (IXFR)增量区域传输</li></ol><h2 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h2><p>DNS服务器会创建很多种不同的记录，每种记录都有自己的独特的作用</p><ol><li><p>SOA记录<br>Start of Authority Records：SOA记录是DNS区域的第一条记录，定义了DNS区域的通常参数</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282125217.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>NS记录<br>Name server Records：NS记录表示一个域的名称服务器的主机。即负责解析当前域名的主机名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282137636.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>A记录<br>A recode for IPv4：最通用的记录，记录域名指向的IPv4地址，A记录可以在IN前面设置当前记录的TTL值</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282140389.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>AAAA记录<br>A record for IPv6：记录域名指向的IPv6地址</p></li><li><p>别名记录<br>Alias Record。也可简写为CNAME,将一个域名指向另一台主机，用于主机名已经记录了一个A记录，可以将www直接指向该A记录</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282150843.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>指针记录（PTR记录）<br>Pointer Record，与A记录和AAAA记录相反，将IP地址匹配到域名<br>IP地址是从特定的部分开始，比如都是192.168，到最不特定的部分结束，域名以最不特定部分开始，最特定部分结束，所以我们写PTR记录时IP地址会反着写</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282202437.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>MX记录<br>Mail Exchanger Record。用于指出当前域中接收邮件的服务器</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282203815.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>MX记录可以用一个数字表示优先级，**数字越小，优先级越高**<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282204292.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>SRV记录<br>Service Record：SRV记录什么计算机提供什么样的服务信息。SRV记录一般是Microsoft活动目录设置时的应用。DNS可以独立于活动目录，但是活动目录必须有DNS才能正常工作</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282205240.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>其中第一行 10 表示优先级 100 表示权重，当优先级相同时，选择权重高的，389是端口号</li></ol><h2 id="DNS服务器处理域名请求的顺序"><a href="#DNS服务器处理域名请求的顺序" class="headerlink" title="DNS服务器处理域名请求的顺序"></a>DNS服务器处理域名请求的顺序</h2><ol><li>DNS高速缓存</li><li>DNS区域配置文件</li><li>DNS转发器</li><li>根提示</li></ol><h2 id="客户机域名请求顺序"><a href="#客户机域名请求顺序" class="headerlink" title="客户机域名请求顺序"></a>客户机域名请求顺序</h2><p>DNS缓存—-本地hosts文件—–本地DNS服务器</p><p>hosts文件路径：c:\windows\system32\drivers\etc\hosts</p><p>当我们修改了hosts文件如在里面写入  4.4.4.4 <a href="http://www.qq.com/">www.qq.com</a> 那么，以后我们访问<a href="http://www.qq.com/">www.qq.com</a> 的时候，都会访问4.4.4.4 当然这个是一个没有的IP，当我们hosts文件被写满了垃圾IP，我们就被攻击了。当然，这需要管理员权限才可以写入。</p><h1 id="安装和配置DNS服务器"><a href="#安装和配置DNS服务器" class="headerlink" title="安装和配置DNS服务器"></a>安装和配置DNS服务器</h1><p>这个总体来说还是比较简单的</p><ol><li><p>要求网卡是静态IP（服务器和客户机在同一个交换机上）</p></li><li><p>安装DNS服务器插件（即安装并开启TCP以及UDP53端口）</p></li><li><p>在开始-管理工具-DNS这个程序里，打开正向查找区域，创建区域文件，（负责一域名后缀的解析，如baidu.com为域名后缀，一台DNS服务器可以存放多个区域文件），创建的时候就起个名字就好了，其他的都默认下一步。</p></li><li><p>新建A记录（主机类型是A），写一个主机，自己再去网上查找好对应的IP，当然这里虚拟机是没有网的所以我们要做的就是随便输入一个就行了，只要到时候客户机询问服务器的时候可以返回给它这个IP就可以了。</p></li></ol><p>还可以新建一个别名（CNAME），即为这个主机创建一个别名，查询别名的时候，其实就是查询它本身。</p><ol start="5"><li><p>去客户机里验证，这里需要把客户机的DNS设置成我们搭建的这个指定的DNS服务器。</p></li><li><p>cmd里  输入<code>nslookup www.qf.com</code> 或者 <code>ping www.qf.com</code> 可以看到服务器发来的 IP 但是，这两个有区别：<br>直接 ping 会先查找客户机的缓存，如果以前有过，那么就不需要去DNS服务器查找直接返回，但是如果此时这个域名的IP改了那么会造成得到错误的IP<br>但是 nslookup 会直接把域名发送给DNS服务器，然后去解析，这样拿到的一般都是新的。</p><p>清空客户机DNS缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></li><li><p>我们查找的时候，发现会出现Uknow，这是因为DNS服务器不知道自己的名字，我们在正向查找区域新建一个域，给自己起个名字，然后我们在里面建一个主机，IP是自己服务器的地址，并在反向查找的位置，新建一个自己所在网段的区域，并在其中右键新建“新建指针”，输入自己的IP，然后选择正向我们新建好的自己的主机名，这样我们DNS服务器就知道自己的名字了。</p></li></ol><h2 id="DNS转发器"><a href="#DNS转发器" class="headerlink" title="DNS转发器"></a>DNS转发器</h2><p>再开一个win2012虚拟机也部署为DNS服务器，写一个一号DNS服务器没有的域，当我们客户机向第一台DNS服务器发送查询时，一号DNS服务器不知道，那么它先通过转发器来询问二号DNS服务器。</p><p>方法：在一号DNS服务器上右键属性，找到转发器，把IP写成二号DNS服务器的就可以当然前提是他们三个在同一个交换机上连接，可以互相通信</p><p>在公司里一定要设置DNS转发器</p><h2 id="DNS服务器维护"><a href="#DNS服务器维护" class="headerlink" title="DNS服务器维护"></a>DNS服务器维护</h2><p>右键单击服务器名，选择属性可以进行DNS服务器的日常维护</p><p>接口:表示当前服务器工作的IP地址<br>转发器:列出DNS服务器,无法解析域名时转发给谁<br>高级:一些服务器选项，默认不用修改<br>根提示:整体DNS体系的默认根<br>调试日志:当服务器出现异常时，可以钩选DNS的记录数据包<br>事件日志:服务器日志<br>监视:自动检测服务器是否正常工作<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291009935.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows操作系统学习</title>
      <link href="/2022/04/27/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/27/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-简介"><a href="#Windows-简介" class="headerlink" title="Windows 简介"></a>Windows 简介</h1><p>Microsoft Windows是微软公司以<strong>图形用户界面为主</strong>推出的一系列专有商业软件操作系统。</p><p>问世时间为1985年，起初为运行于<strong>MS-DOS</strong>之下的桌面环境</p><p>其后续版本逐渐发展成为主要为个人电脑和服务器用户设计的操作系统，并最终获得了世界个人电脑操作系统的垄断地位</p><p>Windows之起源，可追溯到多年前<strong>美国施乐公司</strong>的研究，1970年,施乐公司成立了著名的研究机构帕罗奥多研究中心，主要从事局域网、激光打印机、图形用户界面和面向对象技术的研究。1981，施乐推出世界上第一个商用的图形用户界面系统。但技术并未得到大众的重视，也没有协助商业化的应用。</p><p>这时苹果电脑的创始人之一的史蒂夫·乔布斯在参观施乐公司的帕罗奥多研究中心后认识到图形用户界面的重要性以及广阔的市场前景，在1983推出第二个图形用户界面系统System Software(现称macOS)。苹果电脑在开发Macintosh时基于市场战略上的考虑，故意开发了只能在苹果电脑上作运作的图形用户界面系统。</p><p>但当时因为Intel x86微处理器芯片的IBM兼容电脑已渐露头角，因此就给了微软公司所开发的Windows生存空间和市场。</p><p>微软在1983年宣布研发windows,在1985年和1987年分别推出Windows 1.01和Windows 2.03。</p><p>在2004年，Windows拥有终端操作系统大约70%的市场份额</p><p>在2014年，微软承认其将整个操作系统市场的绝大部分输给Android。windos全球出货量不足android的25%</p><p>Windows客户端操作系统目前最新的稳定版是于2015年7月29日发布的Windows 10。</p><p>Windows Server目前最新的稳定版是于2018年10月2日发布的Windows Server 2019。</p><p>微软于1990年9月推出Windows 3.0并一炮而红。这个“干呼万唤始出来”的操作系统一面世便在商业上获取惊人的成功;推出后不到六个星期，微软已经卖出50万份Windows 3.0，打破了任何软件产品的六周内销售记录，从而开始了微软在操作系统上的垄断地位。</p><p>在1994年时被苹果公司控告侵权，展开了著名的“Look and Feel”诉讼官司。</p><p>盖茨还讥讽乔布斯说:“我们有一个富邻居——施乐，他家有一张电视。当我们想偷的时候，发现乔布斯早就偷走了，可他却说我们是小偷。</p><p>乔布斯也反唇相讥:“毕加索不是说过吗，‘好的艺术家只是照抄，伟大的艺术家则是窃取灵感’。而我们在窃取伟大的灵感的方面上一直都厚颜无耻。”</p><h1 id="windows-server-2012-r2"><a href="#windows-server-2012-r2" class="headerlink" title="windows server 2012 r2"></a>windows server 2012 r2</h1><p>Windows Server 2012，开发代号为Windows Server 8，是第五个Windows Server的版本。是Windows 8的服务器版本</p><p>原本Windows Server 2008R2包含企业版(enterprise)，但至Windows Server 2012企业版已消失,表示原先的企业版功能已由Datacenter版取代及加强</p><p><strong>win 2012 r2的一些新特性:</strong></p><ol><li>云计算</li><li>hyper-v(虚拟化):第二代虚拟机、跨版本迁移、管理旧版本hyper-v等</li><li>存储:存储解决方案、存储管理API、SMB3.0等</li><li>高可用特点改进</li><li>网络改进:虚拟化网络</li><li>AD、组策略改进</li></ol><h2 id="windows-server-2012-r2-的版本"><a href="#windows-server-2012-r2-的版本" class="headerlink" title="windows server 2012 r2 的版本"></a>windows server 2012 r2 的版本</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272030904.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><h2 id="虚拟机安装-windows-server-2012-r2"><a href="#虚拟机安装-windows-server-2012-r2" class="headerlink" title="虚拟机安装 windows server 2012 r2"></a>虚拟机安装 windows server 2012 r2</h2><p>镜像下载可以去 <a href="https://msdn.itellyou.cn/">MSDN</a></p><ol><li><p>通过 点击 WMware 的创建新的虚拟机的选项进入安装界面</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272204262.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>Windows 的系统我们一般都使用 <code>典型</code> 安装，选择之前下载的镜像</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272206182.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>设置密码，选择虚拟机存放位置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272206589.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>这里是否将虚拟磁盘拆分为多个文件可以根据自己来</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272208313.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>最后我们就可以开机等待安装了，安装好后我们在标签栏右键，安装 <code>VMware Tools</code> 方便后续与本机之间的交互</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272213551.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li></ol><h2 id="windows-server-2012-的一些简单配置"><a href="#windows-server-2012-的一些简单配置" class="headerlink" title="windows server 2012 的一些简单配置"></a>windows server 2012 的一些简单配置</h2><h3 id="计算机名设置"><a href="#计算机名设置" class="headerlink" title="计算机名设置"></a>计算机名设置</h3><ol><li><p>图形界面设置<br>作为个人用户，我们不怎么关注计算机名，但是当我们在企业特别是 <strong>域环境</strong> 中，计算机名对企业统一管理计算机有重要的作用</p><p>计算机名每次修改后需要重启</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272218704.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>命令行设置<br>使用管理员权限打开 cmd</p><p>使用<code>hostname</code> 命令可以查看当前计算机名</p><p>通过 <code>netdom renamecomputer  当前计算机名 /newname:新计算机名</code> 可以进行重命名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272221593.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li></ol><h3 id="IE增强安全配置"><a href="#IE增强安全配置" class="headerlink" title="IE增强安全配置"></a>IE增强安全配置</h3><p>Windows server 为了保护浏览器安全，给默认IE浏览器开启了增强安全配置，会导致打开网页时弹很多窗，让我们给域名添加信任，我们可以根据需求进行关闭</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272223683.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>关闭IE增强安全可能会导致一定的安全风险，通常我们是不建议在浏览器上浏览网页的，我们也可以通过安装其他浏览器来规避IE增强的问题</p><h3 id="IP地址的查看和配置"><a href="#IP地址的查看和配置" class="headerlink" title="IP地址的查看和配置"></a>IP地址的查看和配置</h3><ol><li><p>图形界面<br>打开控制面板-》网络和Internet-》网络和共享中心</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272226465.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>这样我们就可以看到现在的IP地址了</p><p>IP地址的获取通常有两个方式 1. 自动获取 2.手动配置</p><p>对于服务器，通常是需要固定IP的。所以我们选择进行手动配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272228748.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>命令行<br>同样使用 管理员打开 cmd</p><p>使用 <code>ipconfig</code> 可以看到我们的ip信息，如果想看到网关，DNS服务器等信息我们可以使用 <code>ipconfig /all</code> 命令</p><p>使用 <code>netsh interface ipv4 show interfaces</code> 命令 来查看网卡名称</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272233915.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>上图中 第一个 <code>Loopback Pseudo-Interface 1</code> 是<strong>回环网卡</strong> ， 下面是我们连接到网络的网卡</p><p>通过命令 <code>netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=dhcp</code> 来配置从DHCP服务自动获取IP</p><p>通过命令 <code>netsh interface ipv4 set dns name=&quot;Ethernet0&quot; source=dhcp</code> 来配置冲DHCP服务器自动获取DBS服务器</p><p>可以使用下面的命令来配置静态IP地址,其中 <code>addr</code> 是ip <code>mask</code>是子网掩码 <code>getway</code>是网关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=static addr=192.168.0.10 mask=255.255.255.0 geteway=192.168.0.1</span><br></pre></td></tr></table></figure><p>可以使用下面的命令来配置静态DNS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=static addr=114.114.114.114</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置远程桌面"><a href="#配置远程桌面" class="headerlink" title="配置远程桌面"></a>配置远程桌面</h3><p>使用服务器时，我们经常会使用远程桌面来操作远程的服务器</p><p>打开服务器的远程桌面服务，记得在防火墙中配置允许远程桌面服务通过，或者可以选择关闭防火墙（初学者可以选这个操作）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272245808.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272248511.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>在另一个Windows电脑上，使用windows 自带的远程桌面工具进行连接</p><p>win+R 打开运行窗口 输入 <code>mstsc</code> 在弹出的窗口中输入服务器IP地址</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272250891.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>连接到服务器后输入用户名和密码就好</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272252796.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全法</title>
      <link href="/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
      <url>/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全法背景概述"><a href="#网络安全法背景概述" class="headerlink" title="网络安全法背景概述"></a>网络安全法背景概述</h1><h2 id="国际国内网安法背景"><a href="#国际国内网安法背景" class="headerlink" title="国际国内网安法背景"></a>国际国内网安法背景</h2><h3 id="国际背景"><a href="#国际背景" class="headerlink" title="国际背景"></a>国际背景</h3><ol><li><p>合作共赢<br>2015年9月，习主席访美提出“打造中美合作亮点，让网络空间更好地造福两国人民和世界人民”<br>2015年12月，中美达成了《打击网络犯罪及相关事项指导原则》<br>2015年以来，中英、中俄、中德先后签署了合作协议。中英，中德之间开展高级别对话深化网络犯罪国际合作。<br>2016年11月，习主席在第二届世界互联网大会系统论述了“网络空间命运共同体”的理念，重点提出“四点原则”和“五个主张”的中国方案。</p></li><li><p>冲突对抗<br>网络冲突和攻击成为国家间对抗的主要形式。<br>网络空间战略和政策升级调整<br>注重安全保障与攻击能力双向提升<br>加强对数据资源跨境传输的管控<br>2015年以来，国家行为体实施的大规模网络监控和网络攻击造成了国家间的严重不信任情绪，对国际局势的稳定带来不良影响。</p></li></ol><h3 id="国内背景"><a href="#国内背景" class="headerlink" title="国内背景"></a>国内背景</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270918692.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="各国网络安全法重点制度"><a href="#各国网络安全法重点制度" class="headerlink" title="各国网络安全法重点制度"></a>各国网络安全法重点制度</h2><p>结合各国网络安全立法和战略，网络安全法重点保护的制度具体刻意分为两大类 <code>对传统的网络安全制度进行立法修正</code> 和 <code>对近几年涌现出来的新问题进行解决</code></p><h3 id="对传统的网络安全制度进行立法修正"><a href="#对传统的网络安全制度进行立法修正" class="headerlink" title="对传统的网络安全制度进行立法修正"></a>对传统的网络安全制度进行立法修正</h3><ol><li><p>机构职责和管理机制</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270948714.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>监测预警和应急处理制度</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270950677.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h3 id="对近几年涌现出来的新问题进行解决"><a href="#对近几年涌现出来的新问题进行解决" class="headerlink" title="对近几年涌现出来的新问题进行解决"></a>对近几年涌现出来的新问题进行解决</h3><ol><li><p>关键信息基础设施保护</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270951216.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>数据安全保护（跨境数据流动、数据泄露通知）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270951734.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>云计算等新型业务所引发的安全威胁等问题</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270953466.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="网络安全法发展历程"><a href="#网络安全法发展历程" class="headerlink" title="网络安全法发展历程"></a>网络安全法发展历程</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270954708.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270955040.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>我国网络安全法治建设的发展历程</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270956874.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="网络安全法特点和内容"><a href="#网络安全法特点和内容" class="headerlink" title="网络安全法特点和内容"></a>网络安全法特点和内容</h2><h3 id="我国网络安全法律体系的特点"><a href="#我国网络安全法律体系的特点" class="headerlink" title="我国网络安全法律体系的特点"></a>我国网络安全法律体系的特点</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271000270.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="我国网络安全法律的主要规范内容"><a href="#我国网络安全法律的主要规范内容" class="headerlink" title="我国网络安全法律的主要规范内容"></a>我国网络安全法律的主要规范内容</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271001916.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002990.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002166.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002297.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络安全法是我国第一部网络安全领域的法律，是<strong>保障网络安全的基本法</strong>。</p><ol><li>网络安全法不是网络安全立法的终点，相反，是网络安全立法的起点。</li><li>与《网络安全法》相关的法律有《国家安全法》，《保密法》，《反恐怖主义法》，《反间谍法》，《刑法修正案》(九)，《治安管理处罚法》，《电子签名法》等。这些法律与网络安全法不是上位法和下位法的关系，同属同一法律位阶。</li><li><strong>网络安全法</strong>是我国网络安全管理的<strong>基础法律</strong>，与其它相关法律在相关条款和规定上互相衔接，互为呼应，共同构成了我国<strong>网络安全管理的综合法律体系</strong>。</li><li>网络安全法也是在现行的一些制度的基础上，例如《关于加强网络信息保护的决定》、《计算机信息系统安全保护条例》、《互联网信息服务管理办法》等，上升和完善的成果，为更好的开展网络安全工作提供了法律保障。</li></ol><hr><h1 id="网络安全法解读"><a href="#网络安全法解读" class="headerlink" title="网络安全法解读"></a>网络安全法解读</h1><h2 id="网络安全法解决的重要基础性问题"><a href="#网络安全法解决的重要基础性问题" class="headerlink" title="网络安全法解决的重要基础性问题"></a>网络安全法解决的重要基础性问题</h2><ol><li>基本原则:网络空间主权原则、网络安全与信息化发展并重原则、共同治理原则;</li><li>明确了政府各部门的职责权限，完善了网络安全监管体制(第8条);</li><li>强化网络运行安全，重点保护关键信息基础设施;</li><li>完善网络安全义务和责任，加大了违法惩处力度;</li><li>将监测预警与应急处置措施制度化、法制化。</li></ol><h2 id="网络安全法内容解读"><a href="#网络安全法内容解读" class="headerlink" title="网络安全法内容解读"></a>网络安全法内容解读</h2><p><strong>总则：</strong> 明确网络空间主权原则</p><p><strong>作为我国网络安全治理的基本法，《网络安全法》在总则部分确立了网络主权原则，明确了网络安全管理体制和分工，以及域外的适应效力</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271023818.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="国家网络安全责任机构组织"><a href="#国家网络安全责任机构组织" class="headerlink" title="国家网络安全责任机构组织"></a>国家网络安全责任机构组织</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271024025.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="网络安全等级保护制度"><a href="#网络安全等级保护制度" class="headerlink" title="网络安全等级保护制度"></a>网络安全等级保护制度</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271028597.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>信息系统安全等级保护制度已实施多年，网络安全等级保护制度应当会与目前的信息系统安全等级保护制度相衔接和融合，而不会成为两个并行的制度体系。</p></li><li><p>网络安全≠信息安全<br>特别强调网络安全不等于信息安全，两者有大幅的交集，但网络安全有特殊的内涵，包括网络的使用、运营。国家对网络的主权，符合国际惯例和一般做法。</p></li></ol><h3 id="网络实名制"><a href="#网络实名制" class="headerlink" title="网络实名制"></a>网络实名制</h3><p>网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p><strong>已有法律法规对实名制进行规定:</strong></p><blockquote><p>2016年1月1日实施《中华人民共和国反恐怖主义法》<br>2015年实施的《互联网用户账号名称管理规定》<br>2016年实施的《移动互联网应用程序信息服务管理规定》</p></blockquote><h3 id="关键基础设施"><a href="#关键基础设施" class="headerlink" title="关键基础设施"></a>关键基础设施</h3><p><strong>关键信息基础设施定义:</strong></p><p>国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的<strong>关键信息基础设施</strong>，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由<strong>国务院制定</strong>。</p><p>下图为 关键信息基础设施安全保护条例（征求意见稿）<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271032759.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>关键信息基础设施保护：</strong></p><ol><li><p>关键信息基础设施内涵</p><p>公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务重要行业和领域的关键信息基础设施。</p><p>其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害<strong>国家安全</strong>、<strong>国计民生</strong>、<strong>公共利益</strong>的关键信息基础设施</p></li><li><p>关键信息基础设施外延</p><p>关键信息基础设施的具体范围由国务院制定</p><p>鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系</p></li><li><p>关键信息基础设施管理机制</p><p>按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门具体负责实施本行业、本领域的关键信息基础设施保护工作</p><p>国家网信部门统筹协调有关部门对关键信息基础设施采取安全保护措施</p></li><li><p>关键信息基础设施建设要求</p><p>确保具有支持业务稳定、持续运行的性能</p><p>安全技术措施同步规划、同步建设同步使用</p></li><li><p>关键信息基础设施运营者安全保护义务</p><p>**人员安全管理:**设置专门安全管理机构和安全管理负责人;对负责人和关键岗位的人员进行安全背景审查;定期对从业人员进行网络安全教育、培训和考核。</p><p>**数据境内留存:**在我国境内运营中收集和产生的个人信息和重要数据应当在境内存储。确需向境外提供的，需经国家安全评估;对重要系统和数据库进行容灾备份。</p><p>**应急预案机制:**制定网络安全事件应急预案，并定期进行演练。</p><p><strong>安全采购措施∶</strong>采购网络产品和服务可能影响国家安全的，应当通过国家安全审查。应与网络产品和服务提供者签订安全保密协议。</p><p><strong>风险评估机制︰</strong>自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关部门.</p></li></ol><h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3><p><strong>数据保护范围</strong>:个人信息保护、用户信息保护和商业秘密保护。</p><ol><li><p>**用户信息:**引入了“用户信息”的概念，可以理解为在用户使用产品或服务过程中收集的信息构成用户信息，包括IP地址、用户名和密码、上网时间、Cookie信息等。</p><p>**收集:**网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意;</p><p>**保护:**网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p></li><li><p>**个人信息:**个人信息是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><ol><li>应当遵守本法和有关法律、行政法规的规定。<strong>《电信和互联网用户个人信息保护规定》</strong></li><li>**收集、使用个人信息:**应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</li><li><strong>不得泄露、篡改、毁损其收集的个人信息:</strong> <ol><li>采取技术措施和其他必要措施保护;</li><li>若泄露，立即采取补救措施，告知用户并向有关主管部门报告。</li></ol></li><li><strong>未经被收集者同意,不得向他人提供个人信息。</strong>但是，经过处理无法识别特定个人且不能复原的除外。</li><li><strong>个人信息主体拥有删除权（保护使用不当)和更正权(有误)</strong></li><li><strong>不得非法获取、窃取，不得非法出售、非法向他人提供</strong></li><li><strong>管理部门不得泄露履行职责中知悉的个人信息</strong></li></ol></li><li><p>**商业秘密:**是指不为公众所知悉、能为权利人带来经济利益，具有实用性并经权利人采取保密措施的技术信息和经营信息。</p><p>依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p></li></ol><h3 id="数据本地化"><a href="#数据本地化" class="headerlink" title="数据本地化"></a>数据本地化</h3><p>关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在<strong>境内存储</strong>。</p><p>因业务需要，确需向境外提供的，应当进行<strong>安全评估</strong>;<strong>法律、行政法规另有规定</strong>的,依照其规定。</p><p><strong>下列数据在其它法律里有本地化要求</strong>:国家秘密和国家安全数据、征信数据、个人金融信息、地图数据、网络出版服务所需的必要的技术设备、网约车相关数据和信息。</p><h3 id="以数据为中心的安全"><a href="#以数据为中心的安全" class="headerlink" title="以数据为中心的安全"></a>以数据为中心的安全</h3><p><strong>《网络安全法》对数据安全和数据保护也给予了关注。</strong></p><p>第二十一条对数据安全作出明确说明:网络运营者应当按照网络安全等级保护制度的要求，防止网络数据泄露或者被窃取、篡改。采取数据分类、重要数据备份和加密等措施。</p><p>第四章40-45,大篇幅地强调个人信息(个人数据）安全，强调数据的脱敏。</p><p><strong>网络安全法近似等于等级保护加数据安全。</strong></p><p>第18条，鼓励数据安全行业发展。</p><h3 id="网络行为要求"><a href="#网络行为要求" class="headerlink" title="网络行为要求"></a>网络行为要求</h3><p>任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗、传授犯罪方法、制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><h3 id="网络运营者法律合规要求"><a href="#网络运营者法律合规要求" class="headerlink" title="网络运营者法律合规要求"></a>网络运营者法律合规要求</h3><p>需要网络运营者建立企业的管理制度和操作规程，以满足法律合规性的要求避免法律风险，主要包括如下:</p><ol><li>与实施网络安全等级保护制度相关的义务和制度建设，包括制定内部安全管理制度和<br>操作规程，确定网络安全负责人等（第二十一条);</li><li>健全用户信息保护制度（第二十二条和第四十条);</li><li>落实网络实名制(第二十四条);</li><li>网络安全事件应急预案(第二十五条);</li><li>关键信息基础设施的安全保护义务，包括:设置专门安全管理机构和安全管理负责人,并对该负责人和关键岗位的人员进行安全背景审查;定期对从业人员进行网络安全教育、技术培训和技能考核;对重要系统和数据库进行容灾备份;制定网络安全事件应急预案，并定期进行演练;法律、行政法规规定的其他义务（第三十四条）</li><li><strong>采购</strong>关键信息基础设施产品和服务的保密制度（第三十六条);</li><li>关键信息基础设施安全性的<strong>年度评估</strong>(第三十六条);</li><li><strong>个人信息</strong>的<strong>收集</strong>和<strong>利用</strong>规则及制度（第四十一条和第四十二条)</li><li>个人信息<strong>泄露</strong>事件的<strong>报告</strong>制度（第四十二条);</li><li>违法使用<strong>个人信息</strong>删除和错误个人信息更正制度（第四十三条）</li><li>网络运营者<strong>对用户非法信息传播的监管</strong>（第四十七条);</li><li>网络信息安全<strong>投诉</strong>、<strong>举报制度</strong>（第四十九条）。</li></ol><h3 id="网络运营者的安全义务"><a href="#网络运营者的安全义务" class="headerlink" title="网络运营者的安全义务"></a>网络运营者的安全义务</h3><ul><li><strong>内部安全管理∶</strong> 制定内部安全管理制度和操作规程，确定网络安全负责人</li><li><strong>安全技术措施∶</strong> 采取防范网络安全行为的技术措施;采取监测、记录网络运行状态、网络安全事件的技术措施，留存相关的网络日志不少于六个月</li><li><strong>数据安全管理∶</strong> 采取数据分类、重要数据备份和加密等措施，防止网络数据泄露或者被窃取、篡改</li><li><strong>网络身份管理︰</strong> 办理网络接入、域名注册服务，或固定电话、移动电话等入网手续，或为用户提供信息发布、即时通讯等服务，应要求用户提供真实身份信息</li><li><strong>应急预案机制∶</strong> 制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险;在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。</li><li><strong>安全协助义务︰</strong> 为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助</li></ul><h3 id="网络产品、服务提供者的安全义务"><a href="#网络产品、服务提供者的安全义务" class="headerlink" title="网络产品、服务提供者的安全义务"></a>网络产品、服务提供者的安全义务</h3><ul><li><strong>强制标准义务︰</strong> 网络产品、服务应当符合相关国家标准的强制性要求，不得设置恶意程序;网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供</li><li><strong>告知补救义务∶</strong> 网络产品、服务提供者发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，及时告知用户，向有关主管部门报告。</li><li><strong>安全维护义务︰</strong> 网络产品、服务提供者应为产品、服务持续提供安全维护，在规定或者当事人约定的期限内不得终止;</li><li><strong>个人信息保护∶</strong> 网络产品、服务具有收集用户信息功能的，网络产品、服务提供者应向用户明示并取得同意;涉及用户个人信息的，还应遵守相关法律、行政法规中有关个人信息保护的规定。</li></ul><h3 id="一般性安全保护义务"><a href="#一般性安全保护义务" class="headerlink" title="一般性安全保护义务"></a>一般性安全保护义务</h3><ul><li><strong>安全信息发布:</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</li><li><strong>禁止危害行为:</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动;不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具;明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等。</li><li><strong>信息使用规则︰</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</li></ul><h3 id="产品研发"><a href="#产品研发" class="headerlink" title="产品研发"></a>产品研发</h3><p>符合相关国家标准的强制性要求。不得设置恶意程序;发现存在安全缺陷、漏洞等风险时，应当立即采取补救措施，及时告知用户并向有关主管部门报告。</p><p>持续提供安全维护;在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络关键设备和网络安全专用产品安全认证合格或者安全检测符合要求后，方可销售</p><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p><strong>规范上网行为:</strong></p><ol><li>不得诈骗、传授诈骗方法、制售违禁物品;</li><li>不得危害网络安全(入侵、窃取等)、国家安全;</li><li>不得发布不良信息;</li><li>不得侵犯他人权益;</li><li>不为上述违法行为提供便利</li></ol><h3 id="网络信息安全-个人信息保护"><a href="#网络信息安全-个人信息保护" class="headerlink" title="网络信息安全-个人信息保护"></a>网络信息安全-个人信息保护</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271114441.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="网络安全审查制度"><a href="#网络安全审查制度" class="headerlink" title="网络安全审查制度"></a>网络安全审查制度</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271117403.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>2017年05月02日中央网信办正式发布《网络产品和服务安全审查办法（试行）》。其中就审查的目的、需要审查的网络产品和服务的范围、网络安全审查的管理部门(网络安全审查委员会)、审查的机构（国家统一认定网络安全审查第三方机构）和对党政机关和重点行业的审查工作提出要求。并于2017年6月1日同《网络安全法》一同实施。</p><h3 id="网络信息安全-违法犯罪信息管理"><a href="#网络信息安全-违法犯罪信息管理" class="headerlink" title="网络信息安全-违法犯罪信息管理"></a>网络信息安全-违法犯罪信息管理</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271120975.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271230500.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="法律责任"><a href="#法律责任" class="headerlink" title="法律责任"></a>法律责任</h1><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271231928.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全概述</title>
      <link href="/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全背景"><a href="#网络安全背景" class="headerlink" title="网络安全背景"></a>网络安全背景</h1><h2 id="网络空间定义"><a href="#网络空间定义" class="headerlink" title="网络空间定义"></a>网络空间定义</h2><p><strong>网络空间(Cyberspace</strong>) 的概念是伴随着互联网的成长逐步产生、发展、演变的</p><p>2003 美国 《保护网络空间的国家战略》 指出 Cyberspace的含义：<strong>一个由信息基础设施组成的相互依赖的网络</strong></p><p>2009 美国 《网络空间政策评估》 定义 Cyberspace： <strong>信息技术基础设施相互储存的网络，包括互联网，电信网，计算机系统以及重要工业中的处理器和控制器。常见的用法还指信息及人与人交互构成的虚拟环境</strong></p><p>网络空间<strong>不是虚拟空间</strong>，而是人类线上活动空间的认为、自然延伸，是人类崭新的存在方式和形态</p><p>我国官方文件指出： <strong>互联网，通信网，计算机系统，自动化控制系统，数字设备及其承载的应用、服务和数据构成了网络空间，其已经成为陆地、海洋、天空、太空同等重要的人类活动新领域</strong></p><h2 id="网络空间存在的安全威胁"><a href="#网络空间存在的安全威胁" class="headerlink" title="网络空间存在的安全威胁"></a>网络空间存在的安全威胁</h2><ol><li>政治安全： 相比传统媒体，网络空间对现实问题有极大的催化和放大作用</li><li>经济安全： 2016年乌克兰电网被攻击</li><li>文化安全： 幕后推手，网络大V</li><li>社会安全： 恐怖主义，分裂主义，极端主义等势力对网络的利用</li><li>国防安全： 网络空间已经成为国际战略博弈的新领域</li></ol><hr><h1 id="网络强国战略"><a href="#网络强国战略" class="headerlink" title="网络强国战略"></a>网络强国战略</h1><p>2014年2月27日，习总书记主持召开中央网络安全和信息化领导小组第一次会议并发表重要讲话。中央成立网络安全和信息化领导小组，习总书记亲自担任组长，再次体现了中国最高层全面深化改革、加强顶层设计的意志，显示出保障网络安全、维护国家利益、推动信息化发展的决心。</p><p>2018年3月，中央网络安全和信息化领导小组改为中央网络安全和信息化委员会。</p><p>从网民数量、网络设施发展速度、信息消费规模等角度看，中国已是名副其实的<strong>网络大国</strong>，但离<strong>网络强国</strong>还有差距。</p><h2 id="网络强国战略目标"><a href="#网络强国战略目标" class="headerlink" title="网络强国战略目标"></a>网络强国战略目标</h2><ol><li><p><strong>近期目标</strong>: 技术强，基础强，内容强，人才强，国际话语强</p></li><li><p><strong>中期目标</strong>: 建设网络强国的战略部署与“两个一百年”奋斗目标同步推进，向着网络基础设施基本普及、自主创新能力显著增强、信息经济全面发展、网络安全保障有力的目标不断前进。</p></li><li><p><strong>远期目标</strong>: 战略清晰，技术先进，产业依靠，制网权尽在掌握，网络安全坚不可摧。</p></li></ol><blockquote><p><strong>和平</strong>: 信息技术滥用得到有效遏制</p><p><strong>安全</strong>: 网络安全风险得到有效控制</p><p><strong>开放</strong>: 信息技术标准、政策和市场开放、透明</p><p><strong>合作</strong>: 世界各国在技术交易、打击网络恐怖和网络犯罪等领域的合作更加密切</p><p><strong>有序</strong>: 公众在网络空间的知情权、参与权、表达权、监督权等合法权益得到充分保障，网络空间个人隐私获得有效保护，人权受到充分尊重。</p></blockquote><h2 id="战略原则"><a href="#战略原则" class="headerlink" title="战略原则"></a>战略原则</h2><blockquote><p>尊重维护网络空间主权</p><p>和平利用网络空间</p><p>依法治理网络空间</p><p>统筹网络安全与发展</p></blockquote><h2 id="战略任务"><a href="#战略任务" class="headerlink" title="战略任务"></a>战略任务</h2><blockquote><p>坚定捍卫网络空间主权</p><p>坚决维护国家安全</p><p>保护关键信息基础设施</p><p>加强网络文化建设</p><p>打击网络恐怖和违法犯罪</p><p>完善网络治理体系</p><p>夯实网络安全基础</p><p>提升网络空间防护能力</p><p>强化网络空间国际合作</p></blockquote><h2 id="正确的网络安全观"><a href="#正确的网络安全观" class="headerlink" title="正确的网络安全观"></a>正确的网络安全观</h2><blockquote><p>网络安全是<strong>整体</strong>的而不是割裂的<br>网络安全是<strong>动态</strong>的而不是静态的<br>网络安全是<strong>开放</strong>的而不是封闭的<br>网络安全是<strong>相对</strong>的而不是绝对的<br>网络安全是<strong>共同</strong>的而不是孤立的</p></blockquote><hr><h1 id="网络安全要素"><a href="#网络安全要素" class="headerlink" title="网络安全要素"></a>网络安全要素</h1><p>从信息的安全获取、处理和使用这一本质触发，人们对于网络安全有三种最基本的要求 <strong>CIA</strong></p><ol><li><p>保密性（Confidentialty）<br>对<strong>信息内容</strong>的保密和对<strong>信息状态</strong>的保密<br>信息状态保密比如： 虽然无法破译信息，但是可以根据某个时间段信息流量的情况，推断出某些结论</p></li><li><p>完整性（Integrity）<br>指信息未经授权不能进行更改的特性，即信息在存储或传输过程中保持不被 <strong>偶然</strong> 或 <strong>蓄意</strong> 的 <strong>删除</strong>、<strong>修改</strong>、<strong>伪造</strong>、<strong>乱序</strong>、<strong>重放</strong>、<strong>插入</strong> 等破坏和丢失的特性</p></li><li><p>可用性（Availability）<br>信息可以被授权实体访问并按需求使用的特性<br>信息的可用性与硬件可用性、软件可用性、人员可用性、环境可用性密切相关</p></li></ol><hr><h1 id="网络安全的演变史"><a href="#网络安全的演变史" class="headerlink" title="网络安全的演变史"></a>网络安全的演变史</h1><h2 id="通信保密阶段"><a href="#通信保密阶段" class="headerlink" title="通信保密阶段"></a>通信保密阶段</h2><p>数千年的时间里,军事领域对信息安全的需求使古典密码学诞生和发展。</p><p>现代通信保密阶段普遍认为是从1949年香农Shannon发表的《保密系统的信息理论》，将密码学的研究纳入了科学的轨道上</p><p>主要安全问题是窃听和分析</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204261651336.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h2><p><strong>20世纪70年代，美国国家标准局公布了数据加密标准(DES)、美国国防部(DoD)工作面了《可信计算机系统评估准则》(TCSEC)</strong></p><ol><li><p>互联网出现,互联网早期发展阶段的思维方式遵守Postel法则:严于律己，宽以待人。为之后的各种网络安全事件埋下了伏笔</p></li><li><p>Morris蠕虫1988年11月2日Morris 蠕虫的发布极大的改变了互联网的开放性，据估计造成10%的节点下线(6000个节点，当时网络估计有60000个节点)。</p></li><li><p>网络防火墙的最早期形式开发于20世纪90年代末,包过滤在旦联网很小、只包含60000个节点的时候是理想的手段，但网络的快速增长使其很快就不再实用。</p></li></ol><h2 id="信息系统安全"><a href="#信息系统安全" class="headerlink" title="信息系统安全"></a>信息系统安全</h2><p>20世纪90年后，信息系统安全成为网络安全的核心内容。</p><p>通信和计算机技术相互依存，安全的需求不断的向社会的各个领域扩展，人们的关注对象从计算机转向更具本质性的信息本身,进而更关注信息系统的安全</p><p>这一阶段除了强调保密性、完整性、可用性，人们还关注<strong>不可否认性</strong></p><p>1993年6月，美国政府同加拿大及欧共体共同起草单一的通用准则(CC标准)并将其推到国际标准。<strong>制定CC标准的目的是建立一个各国都能接受的通用的信息安全产品和系统的安全性评估准则。</strong></p><p>在美国的TCSEC、欧洲的ITSEC、加拿大的CTCPEC、美国的FC等信息安全准则的基础上，由6个国家7方(美国国家安全局和国家技术标准研究所、加、英、法、德、荷)共同提出了“信息技术安全评价通用准则(The Common Criteriafor Information Technology security Evaluation,CC )，简称CC标准，它综合了已有的信息安全的准则和标准，形成了一个更全面的框架。</p><h2 id="网络空间安全"><a href="#网络空间安全" class="headerlink" title="网络空间安全"></a>网络空间安全</h2><p>进入21世纪，网络逐渐成为继海、陆、空、天之后的第五大人类生存空间。</p><p>网络空间安全引起各国的高度关注，发达国家普遍将其视为国家安全基础,上升到国家安全的高度去认识和对待。</p><p>仅从传统的保密性、完整性、可用性来理解显然不太够，更需要关注国家层面的政治、经济、文化、军事等影响。</p><hr><h1 id="网络安全体系结构"><a href="#网络安全体系结构" class="headerlink" title="网络安全体系结构"></a>网络安全体系结构</h1><p>参照开放系统互联安全体系结构,<strong>lSO 7498-2标准</strong>,其核心内容是:为保证异构计算机进程之间远距离交换信息的安全，定义了系统应当提供的<strong>5种安全服务</strong>和<strong>8种安全机制</strong>，确定了安全服务与安全机制之间的关系，以及在ISO参考模型中安全服务和安全机制的配置。</p><h2 id="安全服务"><a href="#安全服务" class="headerlink" title="安全服务"></a>安全服务</h2><p>安全服务可以理解为安全需求的一种表示</p><h3 id="鉴别"><a href="#鉴别" class="headerlink" title="鉴别"></a>鉴别</h3><p><strong>鉴别服务是对通信中的对等实体和数据来源的鉴别</strong></p><p>对待实体鉴别是确认通信中的对等实体是所需要的实体，这种服务在建立连接时或在数据传送阶段提供使用，以证实连接实体的身份，此类服务确保一个实体没有试图冒充其它实体</p><p>数据鉴别服务本质上是要对数据的来源进行确认</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>访问控制决定了什么实体可以访问什么资源，以防止未授权的实体访问系统内的资源。这里<strong>访问</strong>是一个广义的，包含对各类资源的不同访问，如通信资源，读、写、删信息资源等。</p><p>当我们打开文件夹，新建文件时，可能没有权限，这是一种典型的访问控制机制</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>数据完整性服务用来对付试图破坏、篡改信息资源的主动威胁，从而能够防止或检测信息资源受到篡改等破坏。</p><p>从技术手段而言，有的完整性服务可在数据被篡改后予以恢复，有些则只能检测到被自发的情况</p><h3 id="数据保密性"><a href="#数据保密性" class="headerlink" title="数据保密性"></a>数据保密性</h3><p>数据保密性服务是对数据提供保护、使之不被非授权地泄露。</p><p>具体包括对用户数据进行加密，或使用攻击者无法通过观察通信业务流量而推断出其中的保密信息</p><h3 id="抗抵赖"><a href="#抗抵赖" class="headerlink" title="抗抵赖"></a>抗抵赖</h3><p>抗抵赖也称<strong>不可否认性</strong>，主要表现以下两种形式:</p><ol><li><p>原发抗抵赖，即数据发送者无法否认其发送数据的事实。如A向发B发信事后，A不能否认该信是其发送的</p></li><li><p>接收抗抵赖，即数据接收者事后无法否认其收到过这些数据。如A向B发信，事后B不能否认其收到了该信</p></li></ol><h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>安全机制是能够提供一种或多种安全服务的、与具体的实现方式无关且一般不能再细分的安全技术的抽象表示。安全机制是一般是<strong>原子</strong>级，很少交叉</p><h3 id="加密机制"><a href="#加密机制" class="headerlink" title="加密机制"></a>加密机制</h3><p>加密即能为<strong>数据</strong>提供保密性，也能为<strong>通信业务流信息</strong>提供保密性</p><h3 id="数字签名机制"><a href="#数字签名机制" class="headerlink" title="数字签名机制"></a>数字签名机制</h3><p>数字签名机制分为两个过程：</p><ol><li><p>签名过程<br>签名过程是使用签名者所私有的信息，以保证签名的唯一性。</p></li><li><p>验证签名过程<br>验证签名过程所用的程序与信息是公之与众的，以便每个人都可以验证该签名，但无法从签名中推断出签名者的私有信息。</p></li></ol><h3 id="访问控制机制"><a href="#访问控制机制" class="headerlink" title="访问控制机制"></a>访问控制机制</h3><p>访问控制即是一种服务，也是一种具体的机制。为了判断一个实体是否具有访问权,访问控制机制可以使用该实体已经鉴别过的身份（如登录系统后的身份、或实体属于某个已知具有权限的组织）进行访问控制。</p><p>如果该实体试图访问非授权的资源,那么访问控制功能会拒绝其企图还会产生日志等告警</p><p>访问控制建立在以下几种手段之上:</p><ol><li>访问控制列表</li><li>试图访问的持续时间</li><li>鉴别信息</li><li>试图访问的地址</li><li>试图访问的时间</li></ol><h3 id="数据完整性机制"><a href="#数据完整性机制" class="headerlink" title="数据完整性机制"></a>数据完整性机制</h3><p>数据完整性分两个方面:</p><ol><li><p>数据单元的完整性<br>数据单元完整性涉及两个过程，一是发送实体，另一个是接收实体。发送实验给数据单元附加上一个量（通常是哈希值)，且这个量本身可以被加密;接收实体根据数据单元产生一个相应的量，且与发送方的量进行比较，以此确定发送的数据单元是否受到篡改。</p></li><li><p>是数据流的完整性<br>数据流完整性可以采取顺序号、时间标记或密码链等手段</p></li></ol><h3 id="鉴别交换机制"><a href="#鉴别交换机制" class="headerlink" title="鉴别交换机制"></a>鉴别交换机制</h3><p>鉴别交换是通信过程中一方鉴别另一方身份的过程。常见的实现方式有:口令鉴别、数据加密确认、通信中的“握手”协议、数字签名和公让机辩认，以及通过利用该实体特征鉴别(如语言、指纹)</p><h3 id="通信业务填充机制。"><a href="#通信业务填充机制。" class="headerlink" title="通信业务填充机制。"></a>通信业务填充机制。</h3><p>通信业务填充机制是指在正常通信流中增加冗余信息，能抵抗通信业务分析。这种机制往往提供通信业务的保密性服务</p><h3 id="路由选择控制机制"><a href="#路由选择控制机制" class="headerlink" title="路由选择控制机制"></a>路由选择控制机制</h3><p>路由能动态地设定，以便物理上安全的子网络、中继站或链路使用。在使用时可基于安全属性，禁止某些属性的数据通过某子网络、中继站或链路,以确保这些通信网络的安全</p><h3 id="公证机制"><a href="#公证机制" class="headerlink" title="公证机制"></a>公证机制</h3><p>公证机制是指由于第一方和第二方互不相信，于是寻找一个双万都信任的第三方，通过第三方背书在第一方和第二方之间建立信任。在网络中，数据完整性，发送方身份、时间和目的方身份都能通过公证机制得到确保。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204261717060.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="网络安全产品"><a href="#网络安全产品" class="headerlink" title="网络安全产品"></a>网络安全产品</h1><p>安全产品是一种或多种安全机制的具体实现</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>防火墙类似一道护栏隔在内部网络和不安全的外部网络之间，是一种保护机制，阻断来自外部的网络入侵，保护内部网络安全。</p><p>所有进入内部的通信，必须经过防火墙，所有经过防火墙的通信，必须经过安全策略，防火墙自身是安全可靠，不易攻破。</p><p><strong>防火墙的功能</strong></p><blockquote><p>访问控制功能，是防火墙最基本也是最重要的功能内容控制功能，如过滤垃圾邮件</p><p>安全日志功能，可以记录网络通信情况，包括什么用户在什么时间进行了什么操作</p><p>集中管理功能，在一个组织中可能有多台防火墙需要集中统一管理，避免出现配置上的安全漏洞。</p><p>其它功能:如VPN(虚拟专用网络)、NAT(网络地址转换)</p></blockquote><h2 id="入侵检测系统-Intrusion-Detection-System-IDS"><a href="#入侵检测系统-Intrusion-Detection-System-IDS" class="headerlink" title="入侵检测系统(Intrusion Detection System,IDS)"></a>入侵检测系统(Intrusion Detection System,IDS)</h2><p>IDS通过监视受保护系统或网络的状态，可发现正进行或已发生的网络攻击。</p><p><strong>IDS功能</strong></p><blockquote><p>监视用户和系统的活动，IDS通过获取进出某台主机的数据、或某网段的数据或某主机的日志等监视用户和系统的活动</p><p>发现入侵行为，包含两方面</p><ol><li><p>通过分析用户和系统的活动，判断是否存在对系统的入侵行为</p></li><li><p>评估系统关键资源和数据文件的完整性，判断系统是否遭到入侵</p></li></ol><p>记录和报警，IDS在检测到入侵行为后，记录入侵行为的基本情况，并采取相应措施发出报警，甚至<strong>实现防火墙的联动</strong></p></blockquote><p><strong>入侵检测系统分类</strong></p><blockquote><p>基于主机的IDS。基于主机的IDS用于保护运行关键应用的主机。它通过监视与分析主机的审计记录和日志文件来检测入侵。日志中包含发生在系统上的不寻常和不期望的活动证据</p><p>基于主机的IDS优点:能确定攻击是否成功、监视粒度更精细、配置灵活、适用于加密网络、不需要额外硬件</p></blockquote><blockquote><p>基于网络的IDS。基于网络的IDS主要用于实时监测网络关键路径的信息，通过侦听网络上的所有分组来分析入侵行为。</p><p>基于网络IDS优点:实时提供网络保护、可检测面向网络的攻击、不会影响现有网络的性能、更全面的监视企业网络、操作维护相对简单。</p><p>基于网络IDS的缺点:无法在加密环境中使用</p></blockquote><h2 id="恶意代码防护"><a href="#恶意代码防护" class="headerlink" title="恶意代码防护"></a>恶意代码防护</h2><p><strong>恶意代码就是一个计算机程序或一段程序代码，执行后完成特定的功能，但这些功能是恶意的，有破坏作用的，如计算机病毒。</strong></p><p><strong>恶意代码分类</strong></p><blockquote><p>病毒:一种靠修改其他程序来插入或进行自身复制，从而感染其他程序的一段程序，具有传染性、隐蔽性、潜伏性、多态性和破坏性等特征</p><p>蠕虫是利用操作系统漏洞进行传播，可以算是病毒的一种发展。</p><p>特洛伊木马，指一个隐藏在合法程序中的非法程序。该非法程序似用二仕个和情的情况下执行。隐身的木马程序能实现一些功能，如删除又件、反达消息.</p><p>逻辑炸弹，可以理解为特定逻辑条件满足时实施破坏的计算机程序，不具有类似病毒的传播性。</p></blockquote><hr><h1 id="网络安全事件"><a href="#网络安全事件" class="headerlink" title="网络安全事件"></a>网络安全事件</h1><h2 id="APT-攻击特征"><a href="#APT-攻击特征" class="headerlink" title="APT 攻击特征"></a>APT 攻击特征</h2><ol><li><p>潜伏性<br>可能在用户环境中存在一年以上或更久，他们不断收集各种信息，直到收集到重要情报</p></li><li><p>持续性<br>由于APT攻击具有持续性甚至长达数年的特征，这让企业的管理人员无从察觉</p></li><li><p>单点隐蔽性<br>为了躲避传统检测设备，APT更加注重动态行为和静态文件的隐蔽性。例如通过隐蔽通道、加密通道避免网络行为被检测</p></li><li><p>攻击渠道多样性<br>社交攻击、0day漏洞利用、物理摆渡等方式层出不穷</p></li><li><p>针对特定目标<br>针对特定政府或企业，长期进行有计划性、组织性的窃取情报及破坏行为</p></li></ol><h2 id="伊朗“震网”事件"><a href="#伊朗“震网”事件" class="headerlink" title="伊朗“震网”事件"></a>伊朗“震网”事件</h2><p><strong>“震网”的由来</strong></p><p>2010年6月，白俄罗斯的一家安全公司 VirusBlokAda 受邀为一些伊朗客户检查系统，调查他们电脑的死机和重启问题。技术人员在客户电脑中发现了一种新的蠕虫病毒。根据病毒代码中出现的特征字“stux”，新病毒被命名为“震网病毒( stuxnet) ”，并加入到公共病毒库，公布给业界人士研究</p><p><strong>“震网”病毒的特点</strong></p><ol><li><p>针对性<br>是世界上第一例针对工控系统的病毒,是专门针对伊朗纳坦兹核工厂量身定做的病毒武器</p></li><li><p>不经过互联网<br>震网病毒只凭借某个用户用U盘从一台计算机传播到另一台计算机或者通过局域网传播</p></li><li><p>4个win 0day<br>利用的漏洞是软件开发者和反病毒公司还没发现的，这意味着根本没有补丁。</p></li><li><p>有截止日期<br>震网给自己的行动设定了终止日期:2012年6月24日。当震网病毒进入一台新的计算机，都会检查日期，如果晚于这个日期，病毒就会停下来，放弃感染</p></li></ol><h2 id="WannaCry-勒索病毒事件"><a href="#WannaCry-勒索病毒事件" class="headerlink" title="WannaCry 勒索病毒事件"></a>WannaCry 勒索病毒事件</h2><p><strong>病毒爆发</strong><br>2017年5月12日，”WannaCry”勒索病毒在全球范围内爆发，本次事件波及150多个国家和地区。国内企事业单位以及教育网成为重灾区，该病毒利用NSA泄露“永恒之蓝”黑客武器攻击windows系统的445端口。</p><h3 id="“永恒之蓝”-EternalBlue"><a href="#“永恒之蓝”-EternalBlue" class="headerlink" title="“永恒之蓝”(EternalBlue)"></a>“永恒之蓝”(EternalBlue)</h3><p>美国国家安全局(NSA)研发的网络武器</p><p>用于攻击特定的政府企业目标(NSA曾通过该武器控制了几乎整个中东的银行和金融机构)</p><p>4月被黑客组织“影子经纪人”公开</p><p>利用微软Windows SMB协议漏洞，远程控制系统只要目标系统接入互联网&#x2F;局域网，就可能受到攻击。目前影响XP ~ Windows 8系统</p><h3 id="勒索病毒的传播和技术特点"><a href="#勒索病毒的传播和技术特点" class="headerlink" title="勒索病毒的传播和技术特点"></a>勒索病毒的传播和技术特点</h3><ol><li>2013年首次出现的新型病毒模式加密用户的文件后勒索赎金</li><li>通常3~7天内不支付赎金，作者将“撕票”</li><li>交易和勒索过程极难被追踪，FBI悬赏300万美元未果过去主要通过邮件、挂马传播</li><li>从15年开始进入爆发期，目前有超过100种家族仅CryptoWall家族的一个变种就收到23亿赎金</li><li>近几年苹果电脑、安卓和iPhone手机也出现勒索病毒</li></ol><h2 id="重大安全事件回顾"><a href="#重大安全事件回顾" class="headerlink" title="重大安全事件回顾"></a>重大安全事件回顾</h2><h3 id="丰收行动"><a href="#丰收行动" class="headerlink" title="丰收行动"></a>丰收行动</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262243704.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="摩诃草事件"><a href="#摩诃草事件" class="headerlink" title="摩诃草事件"></a>摩诃草事件</h3><p><strong>摩诃草组织（APT-C-09）</strong>是一个来自于南亚地区的境外APT组织，该组织已持续活跃了7年。摩诃草组织主要针对中国、巴基斯坦等亚洲地区国家进行网络间谍活动，其中以窃取敏感信息为主。相关攻击活动最早可以追溯到2009年11月，至今还非常活跃。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262245703.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><p>鱼叉攻击是针对特定组织的网络欺诈行为,目的是不通过授权来访问机密数据，最常见的方法是将木马程序作为电子邮件发送给特定目标，并诱使打开附件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262246256.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262247979.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><p>参考深信服产业教育平台</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax学习</title>
      <link href="/2022/04/24/ajax%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/24/ajax%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a><strong>AJAX</strong> <strong>简介</strong></h2><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。 </p><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 </p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a><strong>XML</strong> <strong>简介</strong></h2><p>XML 可扩展标记语言。 </p><p>XML 被设计用来传输和存储数据。 </p><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签， </p><p>全都是自定义标签，用来表示一些数据。</p><p>现在已经被JSON取代了 </p><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h4 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h4><ol><li><p>可以无需刷新页面而与服务器端进行通信。 </p></li><li><p>允许你根据用户事件来更新部分页面内容。</p></li></ol><h4 id="AJAX的缺点"><a href="#AJAX的缺点" class="headerlink" title="AJAX的缺点"></a>AJAX的缺点</h4><ol><li>没有浏览历史，不能回退 </li><li>存在跨域问题(同源) </li><li>SEO 不友好 (爬虫爬不到)</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。<br>约定, 规则</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p><strong>重点是格式与参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">行      POST  /s?ie=utf-8  HTTP/1.1 </span><br><span class="line">头      Host: atguigu.com</span><br><span class="line">        Cookie: name=guigu</span><br><span class="line">        Content-type: application/x-www-form-urlencoded</span><br><span class="line">        User-Agent: chrome 83</span><br><span class="line">空行</span><br><span class="line">体      username=admin&amp;password=admin</span><br></pre></td></tr></table></figure><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">行      HTTP/1.1  200  OK</span><br><span class="line">头      Content-Type: text/html;charset=utf-8</span><br><span class="line">        Content-length: 2048</span><br><span class="line">        Content-encoding: gzip</span><br><span class="line">空行    </span><br><span class="line">体      &lt;html&gt;</span><br><span class="line">            &lt;head&gt;</span><br><span class="line">            &lt;/head&gt;</span><br><span class="line">            &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;啦啦啦&lt;/h1&gt;</span><br><span class="line">            &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Node-js-express-框架"><a href="#Node-js-express-框架" class="headerlink" title="Node.js express 框架"></a>Node.js express 框架</h2><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>这里我推荐使用 nvm 来管理 node 的版本,因为在我做项目过程中，可能需要维护别人的老项目，所以node版本经常不匹配，使用 nvm 进行node 版本的管理，可用方便的切换不同版本的 node 。</p><p>windows的话，可以在<a href="https://github.com/coreybutler/nvm-windows/releases">github上下载nvm</a> 打开我们可以看到两个版本</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290935478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>nvm的具体安装和使用<a href="https://www.jianshu.com/p/96f9317db0b5">简书Do_Du</a>有详细的步骤，可以进行参考</p><h4 id="使用express框架"><a href="#使用express框架" class="headerlink" title="使用express框架"></a>使用express框架</h4><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供一系列强大特性帮助你创建各种Web应用</p><p>在文件夹路径下的cmd中，初始化项目<code> npm init --yes</code>  </p><p>安装 express ： <code> npm i express</code></p><p>使用express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express基本使用.js</span></span><br><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO EXPRESS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写好文件后，在文件所在路径的cmd中 使用 node 来启动服务器：<code>node express基本使用.js</code> 可以看到服务已经启动，cmd中打印出了 “<code>服务已经启动, 8000 端口监听中....</code>” 字样</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>在下文前端的代码中，发送请求要用的文件为 <code>server.js</code> 是使用 <code>express</code> 框架搭建的，全部代码在如下，跑起来 <code>node</code> 服务后就可以进行 <code>ajax</code> 请求的发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX - 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以接收任意类型的请求 </span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON 响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应一个数据</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//对对象进行字符串转换</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对 IE 缓存</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO IE - 5&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/delay&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;延时响应&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/axios-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/fetch-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonp服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;尚硅谷atguigu&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户名检测是否存在</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/check-username&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//接收 callback 参数</span></span><br><span class="line">    <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h2><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>启动写好的<code>server.js</code> : <code>node server.js</code></p><p>点击按钮 ，获取响应显示在div中</p><blockquote><p> 创建一个 XMLHttpRequest() 对象</p><p>使用 open方法，初始化请求方法和url （对于需要传参数的get请求，直接在url后面拼接参数）</p><p>使用send方法来发送请求</p><p>绑定onreadystatechange事件，处理返回的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取button元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1. 创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//2. 初始化 设置请求方法和 url</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">    <span class="comment">//3. 发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">//4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">    <span class="comment">//onreadystatechange事件：</span></span><br><span class="line">    <span class="comment">//      on              when 当....时候</span></span><br><span class="line">    <span class="comment">//      readystate      是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="comment">//      change          改变</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">//判断 (服务端返回了所有的结果 这个时候状态是 4 )</span></span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">            <span class="comment">// 2xx 成功</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                <span class="comment">//处理结果  行 头 空行 体</span></span><br><span class="line">                 <span class="comment">//响应 </span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);<span class="comment">//状态码</span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>);<span class="comment">//状态字符串</span></span><br><span class="line">                     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>());<span class="comment">//所有响应头</span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);<span class="comment">//响应体</span></span><br><span class="line">                   <span class="comment">//设置 result 的文本</span></span><br><span class="line">                    result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>过程和get请求差不多，</p><p>设置参数的时候，在send方法中设置，</p><p>不论get还是post 都可以设置请求头，不过post常用，通过 setRequestHeader来设置请求头</p><p>server.js 前端人员不用管其实。但是如果设置了自定义字段的请求头。server.js需要添加<code>response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//1. 创建对象</span></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            <span class="comment">//2. 初始化 设置类型与 URL</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置请求头</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;atguigu&#x27;</span>);</span><br><span class="line">            <span class="comment">//3. 发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">            <span class="comment">// xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);</span></span><br><span class="line">            <span class="comment">// xhr.send(&#x27;1233211234567&#x27;);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//4. 事件绑定</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        <span class="comment">//处理服务端返回的结果</span></span><br><span class="line">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="处理服务端返回的json数据"><a href="#处理服务端返回的json数据" class="headerlink" title="处理服务端返回的json数据"></a>处理服务端返回的json数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span><br><span class="line">        <span class="comment">//绑定键盘按下事件</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">//设置响应体数据的类型</span></span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">//事件绑定</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                  <span class="comment">//</span></span><br><span class="line">                  <span class="comment">// console.log(xhr.response);</span></span><br><span class="line">                  <span class="comment">// result.innerHTML = xhr.response;</span></span><br><span class="line">                  <span class="comment">// 1. 手动对数据转化</span></span><br><span class="line">                  <span class="comment">// let data = JSON.parse(xhr.response);</span></span><br><span class="line">                  <span class="comment">// console.log(data);</span></span><br><span class="line">                  <span class="comment">// result.innerHTML = data.name;</span></span><br><span class="line">                  <span class="comment">// 2. 自动转换</span></span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                  result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>.<span class="property">name</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对于处理服务端返回的json格式字符串，我们有两种方法来处理</p><ol><li><p>手动处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JSON parse 方法 把json格式字符串转换为json 实现字符串转json ，然后就可以操作json数据了</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">result.<span class="property">innerHTML</span> = data.<span class="property">name</span>;</span><br></pre></td></tr></table></figure></li><li><p>自动处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用XMLHttpRequest 对象自带的方法，设置接收的响应为json格式，那么response会自动转换为json格式，直接操作json格式的response就好了</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="IE-缓存问题"><a href="#IE-缓存问题" class="headerlink" title="IE 缓存问题"></a>IE 缓存问题</h4><p>ie 浏览器会把 ajax 请求缓存起来，下次再请求的话，就会请求本地的数据，对于时效性强的页面不好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#result&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">     xhr.<span class="title function_">send</span>();</span><br><span class="line">     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于缓存问题，只有请求的东西完全一样才会走缓存，所以我们给请求加上一个时间戳参数<code>Date.now()</code>，这样就每次都是去服务器请求数据。</p><h4 id="超时和网络异常问题"><a href="#超时和网络异常问题" class="headerlink" title="超时和网络异常问题"></a>超时和网络异常问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#result&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//超时设置 2s 设置</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">//超时回调</span></span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;网络异常, 请稍后重试!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//网络异常回调</span></span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;你的网络似乎出了一些问题!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt; <span class="number">300</span>)&#123;</span><br><span class="line">                result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这个案例中，server.js 中设置了延迟响应来模拟响应超时。</p><p>通过 XMLHttpRequest 的timeout 来设置超时的时间，即超过这个时间，就判定它是超时的。</p><p>通过 ontimeout 来设置超时的回调函数，即超时后怎么处理<br>通过 onerror 来设置断网的回调函数。</p><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abort</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 XMLHttpRequest 的abort方法来请求数据</p><h4 id="重复请求问题"><a href="#重复请求问题" class="headerlink" title="重复请求问题"></a>重复请求问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//标识变量</span></span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>; <span class="comment">// 是否正在发送AJAX请求</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//判断标识变量</span></span><br><span class="line"><span class="keyword">if</span>(isSending) x.<span class="title function_">abort</span>();<span class="comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//修改 标识变量的值</span></span><br><span class="line">    isSending = <span class="literal">true</span>;</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">    x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">              <span class="comment">//修改标识变量</span></span><br><span class="line">              isSending = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个标识变量，如果请求已经发送了，正在加载，就停止后面重复发送的请求。</p><h2 id="JQuery-中的ajax请求"><a href="#JQuery-中的ajax请求" class="headerlink" title="JQuery 中的ajax请求"></a>JQuery 中的ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送get 请求， 第四个参数是设置响应的数据类型</span></span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,<span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// post请求，只用把get换成post就好了</span></span><br><span class="line">     $.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的请求方法 ajax</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="comment">//url</span></span><br><span class="line">         <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line">         <span class="comment">//参数</span></span><br><span class="line">         <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">         <span class="comment">//请求类型</span></span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">         <span class="comment">//响应体结果</span></span><br><span class="line">         <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">         <span class="comment">//成功的回调</span></span><br><span class="line">         <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//超时时间</span></span><br><span class="line">         <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">         <span class="comment">//失败的回调</span></span><br><span class="line">         <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错啦!!&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//头信息</span></span><br><span class="line">           <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="attr">c</span>:<span class="number">300</span>,</span><br><span class="line">                <span class="attr">d</span>:<span class="number">400</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="axios-发送-ajax-请求"><a href="#axios-发送-ajax-请求" class="headerlink" title="axios 发送 ajax 请求"></a>axios 发送 ajax 请求</h2><p>axios 是目前发送ajax 请求比较热门的工具包</p><p>可以安装也可以直接通过链接引入<code>&lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置 baseURL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//GET 请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">//url中拼接的参数</span></span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">             <span class="attr">id</span>: <span class="number">100</span>,</span><br><span class="line">             <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//请求头信息</span></span><br><span class="line">         <span class="attr">headers</span>: &#123;</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span>,</span><br><span class="line">             <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发送post请求 请求体放在第二个参数的位置，</span></span><br><span class="line">     axios.<span class="title function_">post</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">          <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">                <span class="comment">//url 中拼接的参数</span></span><br><span class="line">                <span class="attr">params</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">200</span>,</span><br><span class="line">                    <span class="attr">vip</span>: <span class="number">9</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//请求头参数</span></span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">                    <span class="attr">weight</span>: <span class="number">180</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="comment">//请求方法</span></span><br><span class="line">                method : <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="comment">//url</span></span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/axios-server&#x27;</span>,</span><br><span class="line">                <span class="comment">//url参数</span></span><br><span class="line">                <span class="attr">params</span>: &#123;</span><br><span class="line">                    <span class="attr">vip</span>:<span class="number">10</span>,</span><br><span class="line">                    <span class="attr">level</span>:<span class="number">30</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//头信息</span></span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="attr">a</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">b</span>:<span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//请求体参数</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                    <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//响应状态码</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">                <span class="comment">//响应状态字符串</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">                <span class="comment">//响应头信息</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">                <span class="comment">//响应体</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Fetch函数发送请求"><a href="#Fetch函数发送请求" class="headerlink" title="Fetch函数发送请求"></a>Fetch函数发送请求</h2><p>fetch函数属于全局对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文档地址</span></span><br><span class="line"><span class="comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;</span><br><span class="line">         <span class="comment">//请求方法</span></span><br><span class="line">         <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">         <span class="comment">//请求头</span></span><br><span class="line">         <span class="attr">headers</span>: &#123;</span><br><span class="line">               <span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//请求体</span></span><br><span class="line">          <span class="attr">body</span>: <span class="string">&#x27;username=admin&amp;password=admin&#x27;</span></span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// return response.text();</span></span><br><span class="line">        <span class="comment">// 就看响应的是什么 可以用json直接解析出json字符串</span></span><br><span class="line">          <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h4><p>同源策略(Same-Origin Policy)最早由 Netscape 公司提出，是浏览器的一种安全策略</p><p><strong>同源</strong>： 协议、域名、端口号 必须完全相同。 </p><p>违背同源策略就是跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//响应一个页面</span></span><br><span class="line">    response.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;用户数据&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>lalal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击获取用户数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里因为是满足同源策略的, 所以 url 可以简写</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;/data&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">response</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="jsonp-解决跨域"><a href="#jsonp-解决跨域" class="headerlink" title="jsonp 解决跨域"></a>jsonp 解决跨域</h4><p>JSONP 是什么 </p><ul><li>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。</li></ul><p>JSONP 怎么工作的？ </p><ul><li>在网页有一些标签天生具有跨域能力，比如：img  link  iframe  script。 </li><li>JSONP 就是利用 script 标签的跨域能力来发送请求的</li></ul><p>JSONP 的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取 input 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明 handle 函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;solid 1px #f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//修改 p 标签的提示文本</span></span></span><br><span class="line"><span class="language-javascript">            p.<span class="property">innerHTML</span> = data.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取用户的输入值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//向服务器端发送请求 检测用户名是否存在</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1. 创建 script 标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2. 设置标签的 src 属性</span></span></span><br><span class="line"><span class="language-javascript">            script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8000/check-username&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3. 将 script 插入到文档中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过js 创建一个script 标签，在标签的src中写入需要跨域的路径，然后服务器返回一个js格式的数据实现跨域效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="comment">//用户名检测是否存在</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/check-username&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过jquery实现 jsonp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery-jsonp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#result</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#089</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送 jsonp 请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#result&#x27;</span>).<span class="title function_">html</span>(<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    名称: <span class="subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    校区: <span class="subst">$&#123;data.city&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                `</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送请求的时候，需要加一个callback参数，返回的时候，获取到该参数，改参数就是getjson里面的回调函数的意思，返回对回调函数的调用，就可以实现对数据的渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//接收 callback 参数</span></span><br><span class="line">    <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><p>CORS 是什么？ </p><ul><li>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源</li></ul><p>CORS 怎么工作的？ </p><ul><li>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</li></ul><p>CORS 的使用 </p><p>前端就按照ajax 的方法写就好了，cors 是在后端的处理。在后端设置一个响应头，允许跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite的使用</title>
      <link href="/2022/04/23/vite%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/23/vite%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<img src="https://vitejs.cn/logo.svg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="vite-与-vue-cli"><a href="#vite-与-vue-cli" class="headerlink" title="vite 与 vue-cli"></a>vite 与 vue-cli</h1><p>相比于 <code>vue-cli</code> ,<code>vite</code> 只支持 <code>Vue3.x</code> 的项目的创建，不是基于 <code>webpack</code> 的打包工具 运行速度比较快，比较小巧，实际开发中还是 <code>vue-cli</code> 使用比较多</p><h1 id="vite的基本使用"><a href="#vite的基本使用" class="headerlink" title="vite的基本使用"></a>vite的基本使用</h1><p>下面使用vite来创建vue3的项目</p><ol><li><p>初始化项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app 项目名称</span><br></pre></td></tr></table></figure></li><li><p>运行vue3的项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名称</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h1 id="vite-构建的项目结构"><a href="#vite-构建的项目结构" class="headerlink" title="vite 构建的项目结构"></a>vite 构建的项目结构</h1><h2 id="整体结构图"><a href="#整体结构图" class="headerlink" title="整体结构图"></a>整体结构图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204231648325.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="src目录结构"><a href="#src目录结构" class="headerlink" title="src目录结构"></a>src目录结构</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204231650269.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="vite项目的运行流程"><a href="#vite项目的运行流程" class="headerlink" title="vite项目的运行流程"></a>vite项目的运行流程</h1><p>在工程化的项目中，vue要做的就是通过<code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 的指定取域中</p><p>其中：</p><ol><li><code>App.vue</code> 用来编写待渲染的模板结构</li><li><code>index.html</code> 中需要预留一个el区域</li><li><code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 所预留的区域中</li></ol><p>看一下main.js 中进行渲染的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 从vue中按需导入 createApp函数</span></span><br><span class="line"><span class="comment">// createApp函数的作用，是创建 Vue 的单页面应用程序实例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 导入待渲染的 App 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 createApp() 函数，返回值是“单页面应用程序的实例”，用常量 spa_app 进行接收，同时把App组件座位参数传给 createApp 函数，表示把App渲染 index.html 页面上</span></span><br><span class="line"><span class="keyword">const</span> spa_app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用spa_app 实例的mount 方法，用来指定 vue实际要控制的区域</span></span><br><span class="line">spa_app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/2022/04/10/vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/04/10/vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="路由的概念和原理"><a href="#路由的概念和原理" class="headerlink" title="路由的概念和原理"></a>路由的概念和原理</h1><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><p><strong>路由（英文：router）就是对应关系</strong></p><h2 id="SPA和路由"><a href="#SPA和路由" class="headerlink" title="SPA和路由"></a>SPA和路由</h2><p>SPA（单页面应用程序） 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。此时，不同组件之间的切换需要通过前端路由来实现。</p><p>在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！</p><h2 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h2><ol><li>用户点击了页面上的路由链接</li><li>导致了 URL 地址栏中的 Hash 值发生了变化</li><li>前端路由监听了到 Hash 地址的变化</li><li>前端路由把当前 Hash 地址对应的组件渲染都浏览器中</li></ol><hr><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="什么是-vue-router"><a href="#什么是-vue-router" class="headerlink" title="什么是 vue-router"></a>什么是 vue-router</h2><p>vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目中组件的切换。</p><p><a href="https://router.vuejs.org/zh/">vue-router 的官方文档地址</a></p><h2 id="vue-router-安装和配置"><a href="#vue-router-安装和配置" class="headerlink" title="vue-router 安装和配置"></a>vue-router 安装和配置</h2><ol><li>安装 vue-router 包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.2 -S</span><br></pre></td></tr></table></figure></li><li>创建路由模块<br>在 src 源代码目录下，新建 router&#x2F;index.js 路由模块，并初始化如下的代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 vue 和 vuerouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用 Vue.use()函数, 把 VueRouter 安装为 Vue的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外共享router实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li>导入并挂载路由模块<br>在<code> src/main.js</code> 入口文件中，导入并挂载路由模块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App2.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由模块，目的：拿到路由的实例对象</span></span><br><span class="line"><span class="comment">// 在进行模块化导入的时候，如果给定的是文件夹，则默认导入这个文件夹下，名字叫做 index.js 的文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 在 Vue 项目中，要想把路由用起来，必须把路由实例对象，通过下面的方式进行挂载</span></span><br><span class="line">  <span class="comment">// router: 路由的实例对象</span></span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>声明路由链接和占位符 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;App2 组件&lt;/h1&gt;</span><br><span class="line">    &lt;!--路由链接---&gt;</span><br><span class="line">    &lt;!-- 当安装和配置了 vue-router 后，就可以使用 router-link 来替代普通的 a 链接了 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!-- 只要在项目中安装和配置了 vue-router，就可以使用 router-view 这个组件了 --&gt;</span><br><span class="line">    &lt;!-- 它的作用很单纯：路由的占位符 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li>定义路由规则<br> 在 <code>src/router/index.js</code> 路由模块中，通过 <code>routes</code> 数组声明路由的匹配规则 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入需要展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Movie.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例的时候，写入路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/movie&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Movie</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure> 这样以后，通过路由连接就可以显示对应的组件了</li></ol><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由实例的时候，写入路由规则</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="attr">routes</span>:[</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/movie&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Movie</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>通过路由实现组件的嵌套展示，叫做嵌套路由。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204102331681.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>下面我们来实现嵌套路由</p><h3 id="声明子路由链接和子路由占位符"><a href="#声明子路由链接和子路由占位符" class="headerlink" title="声明子路由链接和子路由占位符"></a>声明子路由链接和子路由占位符</h3><p>想要使用嵌套路由，那么子组件中就需要有路由链接和路由占位符，下面在 <code>About.vue</code> 中声明子路由链接和子路由占位符</p><blockquote><p>注意在声明路由链接时，前面需要加上<strong>该组件的路由</strong>然后再跟<strong>子路由</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>About 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子级路由链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子级路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明子路由规则"><a href="#声明子路由规则" class="headerlink" title="声明子路由规则"></a>声明子路由规则</h3><p>在 <code>src/router/index.js</code> 路由模块中，导入需要的组件，并使用 <code>children</code> 属性声明子路由规则</p><blockquote><p>注意子路由写的时候，path习惯不写前面的<code>/</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="默认子路由"><a href="#默认子路由" class="headerlink" title="默认子路由"></a>默认子路由</h3><p>在上面的子路由规则写好后，我们直接点击定位到<code>about</code>发现子路由的组件没有显示，我们可以通过设置重定向来让它显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/about/tab1&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除了重定向我们可以使用<strong>默认子路由</strong>来实现,如果 <code>childre</code> 数组中，某个路由规则 path 值为空字符串，则这条路由规则叫做“<strong>默认子路由</strong>”</p><blockquote><p>注意，使用默认子路由后，在写组件的子路由链接时，默认的子路由不要再加后边的路径，直接<code>&lt;router-link to=&quot;/about&quot;&gt;tab1&lt;/router-link&gt;</code> 就好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>如果我们需要根据不同的电影id来访问电影详情，写下如下的路由链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/1&quot;</span>&gt;</span>洛基<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/2&quot;</span>&gt;</span>雷神<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/3&quot;</span>&gt;</span>复联<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了不给每个连接都定义一个路由规则，提高路由规则的复用性，我们就需要使用动态路由匹配</p><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。</p><p>在 vue-router 中使用英文的冒号<code>:</code>来定义路由的参数项。通过<code>props</code>属性开启 props 传参，方便拿到动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 重定向的路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    <span class="comment">// 需求：在 Movie 组件中，希望根据 id 的值，展示对应电影的详情信息</span></span><br><span class="line">    <span class="comment">// 可以为路由规则开启 props 传参，从而方便的拿到动态参数的值</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/:mid&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>既然需要根据不同的id来显示<code>Movie</code>组件的内容，那么我们就需要在movie组件中得到id的动态值</p><p>我们通过打印 Movie组件的 <code>this</code> 来看路由相关的信息,并且使用 <code>props</code> 来接收传来的动态的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this.$route 是路由的“参数对象” --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this.$router 是路由的“导航对象” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Movie 组件 --- &#123;&#123; $route.params.mid &#125;&#125; --- &#123;&#123; mid &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Movie&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接收 props 数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;mid&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由的两种参数"><a href="#路由的两种参数" class="headerlink" title="路由的两种参数"></a>路由的两种参数</h2><p>路径参数: 在 hash 地址中， &#x2F; 后面的参数项 比如 <code>/movie/1</code></p><p>查询参数: 在 hash 地址中，? 后面的参数项 比如 <code>/movie/2?name=zs&amp;age=20</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意1：在 hash 地址中， / 后面的参数项，叫做“路径参数” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在路由“参数对象”中，需要使用 this.$route.params 来访问路径参数 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意2：在 hash 地址中，? 后面的参数项，叫做“查询参数” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在路由“参数对象”中，需要使用 this.$route.query 来访问查询参数 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意3：在 this.$route 中，path 只是路径部分；fullPath 是完整的地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /movie/2?name=zs&amp;age=20 是 fullPath 的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /movie/2 是 path 的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/1&quot;</span>&gt;</span>洛基<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/2?name=zs&amp;age=20&quot;</span>&gt;</span>雷神<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/3&quot;</span>&gt;</span>复联<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h2><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航。例如：<br>⚫ 普通网页中点击 <code>&lt;a&gt;</code> 链接、vue 项目中点击 <code>&lt;router-link&gt;</code> 都属于<strong>声明式导航</strong></p><p>在浏览器中，调用 API 方法实现导航的方式，叫做编程式导航。例如：<br>⚫ 普通网页中调用 location.href 跳转到新页面的方式，属于<strong>编程式导航</strong></p><h3 id="vue-router-中编程式导航API"><a href="#vue-router-中编程式导航API" class="headerlink" title="vue-router 中编程式导航API"></a>vue-router 中编程式导航API</h3><p>vue-router 提供了许多编程式导航的 API，其中最常用的导航 API 分别是：</p><blockquote><p>this.$router.push(‘hash 地址’)<br>⚫ 跳转到指定 hash 地址，展示对应组件，并增加一条历史记录</p></blockquote><blockquote><p>this.$router.replace(‘hash 地址’)<br>⚫ 跳转到指定的 hash 地址，展示对应组件，并替换掉当前的历史记录</p></blockquote><blockquote><p>this.$router.go(数值 n)<br>⚫ 可以在浏览历史中前进和后退 n 个页面</p></blockquote><blockquote><p>$router.back()<br>⚫ 在历史记录中，后退到上一个页面</p></blockquote><blockquote><p>$router.forward()<br>⚫ 在历史记录中，前进到下一个页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoLk&quot;</span>&gt;</span>通过 push 跳转到“洛基”页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoLk2&quot;</span>&gt;</span>通过 replace 跳转到“洛基”页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在行内使用编程式导航跳转的时候，this 必须要省略，否则会报错！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.back()&quot;</span>&gt;</span>back 后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.forward()&quot;</span>&gt;</span>forward 前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">gotoLk</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过编程式导航 API，导航跳转到指定的页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/movie/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">gotoLk2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/movie/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">goback</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// go(-1) 表示后退一层</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果后退的层数超过上限，则原地不动</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p><strong>导航守卫可以控制路由的访问权限</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111331215.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>在 <code>src/router/index.js</code> 中使用 <code>router.beforeEach(fn)</code> 给路由对象设置全局前置守卫,其中 fn 为全局前置守卫的回调函数</p><blockquote><p>fn回调函数有三个形参 to\from\next:</p><ol><li>to 表示将要访问的路由的信息对象</li><li>from 表示将要离开的路由的信息对象</li><li>next() 函数表示放行的意思</li></ol></blockquote><blockquote><p>我们通过操作 to &#x2F; from 就可以进行路由守卫的工作，下面例子中实现必须登录后才可以进入主页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js 就是当前项目的路由模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入需要的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Main.vue&#x27;</span></span><br><span class="line"><span class="comment">// 把 VueRouter 安装为 Vue 项目的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Main</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 为 router 实例对象，声明全局前置导航守卫</span></span><br><span class="line"><span class="comment">// 只要发生了路由的跳转，必然会触发 beforeEach 指定的 function 回调函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="comment">// to 表示将要访问的路由的信息对象</span></span><br><span class="line">  <span class="comment">// from 表示将要离开的路由的信息对象</span></span><br><span class="line">  <span class="comment">// next() 函数表示放行的意思</span></span><br><span class="line">  <span class="comment">// 分析：</span></span><br><span class="line">  <span class="comment">// 1. 要拿到用户将要访问的 hash 地址</span></span><br><span class="line">  <span class="comment">// 2. 判断 hash 地址是否等于 /main。</span></span><br><span class="line">  <span class="comment">// 2.1 如果等于 /main，证明需要登录之后，才能访问成功</span></span><br><span class="line">  <span class="comment">// 2.2 如果不等于 /main，则不需要登录，直接放行  next()</span></span><br><span class="line">  <span class="comment">// 3. 如果访问的地址是 /main。则需要读取 localStorage 中的 token 值</span></span><br><span class="line">  <span class="comment">// 3.1 如果有 token，则放行</span></span><br><span class="line">  <span class="comment">// 3.2 如果没有 token，则强制跳转到 /login 登录页</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/main&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 要访问后台主页，需要判断是否有 token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有登录，强制跳转到登录页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">      <span class="comment">// 没有的登录，强制停留在当前页面</span></span><br><span class="line">      <span class="comment">// next(false)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><hr><h1 id="使用vue-cil创建有路由的项目"><a href="#使用vue-cil创建有路由的项目" class="headerlink" title="使用vue-cil创建有路由的项目"></a>使用vue-cil创建有路由的项目</h1><p>创建的主要步骤和之前大致相同，详细可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/">vue-cil的使用</a></p><p>这里主要说两点和路由相关的不同的地方</p><ol><li>创建时选择路由</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111639109.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol start="2"><li>使用哈希路径的路由</li></ol><p>下面是询问你是否使用 <code>history</code> 形式的路由模式，我们选择 <code>NO</code>，我们用的是hash的（即使用 <code>#</code> 开头的）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111641180.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>创建完后，会发现项目结构和之前有一点不同 <code>src</code> 目录下除了 <code>components</code> 还多了一个 <code>views</code>文件夹</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111646180.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><code>views</code> 文件夹也是放组件的，通过路由切换的组件一般都放在这里</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件推荐</title>
      <link href="/2022/04/10/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2022/04/10/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h2 id="ESLint插件"><a href="#ESLint插件" class="headerlink" title="ESLint插件"></a>ESLint插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101627459.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESLint插件配置</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Prettier-Code-formatter-插件"><a href="#Prettier-Code-formatter-插件" class="headerlink" title="Prettier - Code formatter 插件"></a>Prettier - Code formatter 插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101630476.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prettier配置</span></span><br><span class="line"><span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span><span class="comment">//每行文字数超过此限制会被迫换行</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span><span class="comment">//单引号替换双引号</span></span><br><span class="line"><span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span><span class="comment">//当箭头函数只有一个参数时加上括号</span></span><br></pre></td></tr></table></figure><p>我们也可以直接创建一个 <code>.perttierrc</code>文件，将下面的内容放进去,并在 <code>settings.json</code>中加入<code>&quot;prettier.configPath&quot;: &quot;C:\\Users\\YJR\\.prettierrc&quot;,</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint使用</title>
      <link href="/2022/04/10/Eslint%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/10/Eslint%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是ESLint"><a href="#什么是ESLint" class="headerlink" title="什么是ESLint"></a>什么是ESLint</h1><p><a href="https://eslint.org/">官网传送门</a></p><p><a href="https://eslint.bootcss.com/">中文传送门</a></p><p><strong>ESLint 是用来规范代码风格的，特别是团队开发时，一般都会使用ESLint</strong></p><h2 id="在项目中使用ESLint"><a href="#在项目中使用ESLint" class="headerlink" title="在项目中使用ESLint"></a>在项目中使用ESLint</h2><p>下面通过使用 vue-cil 来创建包含 ESLint 的项目，不清楚 vue-cil 可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/">vue-cil的使用</a></p><ol><li><p>创建新项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure></li><li><p>选择最后的一项进行项目定义</p><p>前面的三个一个是之前创建vue2的时候用的，另外两个是自带的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101510063.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择需要的包，记得把css预处理器加上</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101514782.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p> 回车后，选择vue的版本 我还是创建 vue2项目</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021901698.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p> 在选择CSS预处理时，我使用的是 less</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021903613.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>下面就是选择ESLint规范了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101518296.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们选择倒数第二项，标准规范</p><p>回车后会询问我们是在保存的时候触发 <code>Lint</code> 还是提交时触发</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101522904.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>一般我们就保存时触发代码规划的检查就好了</p></li><li><p>剩下的操作和之前的就一样了</p><p> 选择将配置文件独立开，以及选择是否保存预设，是否保存这个无所为，看需求</p></li></ol><p>在项目根目录下，我们会看到 <code>。eslintrc.js</code> 这个文件，可以用来配置规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>rules</code> 节点下有两个规则 <code>no-console</code> 和 <code>no-debugger</code></p><h2 id="ESLint-报错"><a href="#ESLint-报错" class="headerlink" title="ESLint 报错"></a>ESLint 报错</h2><p>当我们语法格式不规范时，就会触发ESLint的报错</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101554722.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>此时我们可以通过看后边提示的错误信息 比如 ： <code>no-trailing-spaces</code> 和 <code>no-multiple-empty-lines</code> 我们可以去官网的<a href="https://eslint.org/docs/rules/">规则</a>中查找改错误是对应的哪条规则 </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101556218.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>并且根据行号来进行修改</p><h2 id="常见的ESLint规则"><a href="#常见的ESLint规则" class="headerlink" title="常见的ESLint规则"></a>常见的ESLint规则</h2><table><thead><tr><th>规则名称</th><th>规则约束</th></tr></thead><tbody><tr><td>quotes</td><td>强制使用一致的反勾号、双引号或单引号</td></tr><tr><td>key-spacing</td><td>强制在对象字面量的属性中键和值之间使用一致的间距</td></tr><tr><td>comma-dangle</td><td>要求或禁止末尾逗号</td></tr><tr><td>no-multiple-empty-lines</td><td>禁止出现多行空行</td></tr><tr><td>no-trailing-spaces</td><td>禁用行尾空格</td></tr><tr><td>eol-last</td><td>要求或禁止文件末尾存在空行</td></tr><tr><td>spaced-comment</td><td>强制在注释中 &#x2F;&#x2F; 或 &#x2F;* 使用一致的空格</td></tr><tr><td>indent</td><td>强制使用一致的缩进</td></tr><tr><td>space-before-function-paren</td><td>强制在 function的左括号之前使用一致的空格</td></tr><tr><td>space-infix-ops</td><td>要求操作符周围有空格</td></tr><tr><td>import&#x2F;first</td><td>import必须在顶部</td></tr></tbody></table><h2 id="修改ESLint规则"><a href="#修改ESLint规则" class="headerlink" title="修改ESLint规则"></a>修改ESLint规则</h2><p>如果我们不想遵守默认的规则，我们可以在<code>.eslintrc.js</code> 中进行修改</p><p>修改方式我们参考官网的文档进行</p><blockquote><p>比如我不想遵守 <code>space-before-function-paren</code> 这个规则，我们可以在<a href="https://eslint.bootcss.com/docs/rules/">规则文档</a>中找到它并进入详情页面查看如何修改</p></blockquote><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101621833.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在<code>.eslintrc.js</code> 中按照文档提示进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vscode相关插件和配置"><a href="#vscode相关插件和配置" class="headerlink" title="vscode相关插件和配置"></a>vscode相关插件和配置</h1><h2 id="ESLint插件"><a href="#ESLint插件" class="headerlink" title="ESLint插件"></a>ESLint插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101627459.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESLint插件配置</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Prettier-Code-formatter-插件"><a href="#Prettier-Code-formatter-插件" class="headerlink" title="Prettier - Code formatter 插件"></a>Prettier - Code formatter 插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101630476.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prettier配置</span></span><br><span class="line"><span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span><span class="comment">//每行文字数超过此限制会被迫换行</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span><span class="comment">//单引号替换双引号</span></span><br><span class="line"><span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span><span class="comment">//当箭头函数只有一个参数时加上括号</span></span><br></pre></td></tr></table></figure><p>我们也可以直接创建一个 <code>.perttierrc</code>文件，将下面的内容放进去,并在 <code>settings.json</code>中加入<code>&quot;prettier.configPath&quot;: &quot;C:\\Users\\YJR\\.prettierrc&quot;,</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态组件 &amp; 插槽 &amp; 自定义指令</title>
      <link href="/2022/04/06/%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6-%E6%8F%92%E6%A7%BD-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/04/06/%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6-%E6%8F%92%E6%A7%BD-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><h2 id="什么是动态组件"><a href="#什么是动态组件" class="headerlink" title="什么是动态组件"></a>什么是动态组件</h2><p>动态组件指的是动态切换组件的显示与隐藏</p><h2 id="动态组件的渲染"><a href="#动态组件的渲染" class="headerlink" title="动态组件的渲染"></a>动态组件的渲染</h2><p>vue 提供了一个内置的 <code>&lt;component&gt;</code> 组件，专门用来实现动态组件的渲染，它就相当于组件的占位符，提供一个 <code>is</code> 属性用来指定该位置实际需要渲染的组件，通过控制 <code>is</code> 属性的值可以实现组件的切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Left&#x27;&quot;</span>&gt;</span>展示 Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Right&#x27;&quot;</span>&gt;</span>展示 Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件和 Right 组件 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1. component 标签是 vue 内置的，作用：组件的占位符 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2. is 属性的值，表示要渲染的组件的名字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// comName 表示要展示的组件的名字</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">comName</span>: <span class="string">&#x27;Left&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Right</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-keep-alive-保持动态组件状态"><a href="#使用-keep-alive-保持动态组件状态" class="headerlink" title="使用 keep-alive 保持动态组件状态"></a>使用 keep-alive 保持动态组件状态</h2><p>在上面使用<code>&lt;component&gt;</code> 标签来切换组件时，默认情况下，被切换的组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组<br>件的状态,在使用时，我们只需要使用<code>&lt;keep-alive&gt;</code>将<code>&lt;component&gt;</code> 组件包裹起来就好了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- keep-alive 会把内部的组件进行缓存，而不是销毁组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span>   </span><br></pre></td></tr></table></figure><h3 id="keep-alive-的生命周期"><a href="#keep-alive-的生命周期" class="headerlink" title="keep-alive 的生命周期"></a>keep-alive 的生命周期</h3><p>当组件被keep-alive包裹时，会多两个生命周期函数 <code>deactivated</code> 和 <code>activated</code></p><blockquote><p>当组件被缓存时，会自动触发组件的 deactivated 生命周期函数。<br>当组件被激活时，会自动触发组件的 activated 生命周期函数。</p></blockquote><p>我们只需要给<strong>被包含的组件</strong>定义这两个函数就可以进行使用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Left 组件被创建了！&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Left 组件被销毁了~~~&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当组件第一次被创建的时候，既会执行 created 生命周期，也会执行 activated 生命周期</span></span><br><span class="line">  <span class="comment">// 当时，当组件被激活的时候，只会触发 activated 生命周期，不再触发 created。因为组件没有被重新创建</span></span><br><span class="line">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被激活了，activated&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被缓存了，deactivated&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="keep-alive-的include和exclude属性"><a href="#keep-alive-的include和exclude属性" class="headerlink" title="keep-alive 的include和exclude属性"></a>keep-alive 的include和exclude属性</h3><p><code>include</code> 属性用来指定：只有<strong>名称匹配的组件</strong>会被缓存。多个组件名之间使用<code>英文的逗号</code>分隔<br><code>exclude</code> 属性用来指定：<strong>名称匹配的组件</strong>不会被缓存。多个组件名之间使用<code>英文的逗号</code>分隔</p><blockquote><p>不要同时使用 include 和 exclude 这两个属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在使用 keep-alive 的时候，可以通过 include 指定哪些组件需要被缓存； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者，通过 exclude 属性指定哪些组件不需要被缓存；但是：不要同时使用 include 和 exclude 这两个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;MyRight&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的声明和注册名称"><a href="#组件的声明和注册名称" class="headerlink" title="组件的声明和注册名称"></a>组件的声明和注册名称</h3><p>注册名称：就是我们在<strong>使用该组件</strong>时，父组件的 <code>components</code> 节点中写的名称</p><p>声明名称：我们可以在组件声明（即编写封装组件的<code>.vue</code>文件时）通过 <code>name</code> 节点来给组件指定的名称，我们建议每个封装的组件都有自己的<strong>声明的名称</strong></p><p>如果在<strong>声明组件</strong>的时候，没有为组件指定 name 名称，则<strong>组件的名称</strong>默认就是<strong>注册时候的名称</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 在App这个根组件中使用其他组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// comName 表示要展示的组件的名字</span></span><br><span class="line">      <span class="attr">comName</span>: <span class="string">&#x27;Left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// 如果在“声明组件”的时候，没有为组件指定 name 名称，则组件的名称默认就是“注册时候的名称”</span></span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 声明组件时通过name来给组件声明名称</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 当提供了 name 属性之后，组件的名称，就是 name 属性的值</span></span><br><span class="line">  <span class="comment">// 对比：</span></span><br><span class="line">  <span class="comment">// 1. 组件的 “注册名称” 的主要应用场景是：以标签的形式，把注册好的组件，渲染和使用到页面结构之中</span></span><br><span class="line">  <span class="comment">// 2. 组件声明时候的 “name” 名称的主要应用场景：结合 &lt;keep-alive&gt; 标签实现组件缓存功能；以及在调试工具中看到组件的 name 名称</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MyRight&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽（Slot）是 vue 为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。</p><p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><h2 id="插槽快速使用"><a href="#插槽快速使用" class="headerlink" title="插槽快速使用"></a>插槽快速使用</h2><p>在封装组件时，可以通过 <slot> 元素定义插槽，从而为用户预留内容占位符</p><blockquote><p>在声明<code>left.vue</code>组件时，通过 <code>&lt;slot&gt;</code> 来定义插槽</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明一个插槽区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>app.vue</code> 组件中使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;left&gt;</span><br><span class="line">&lt;p&gt;这是在left组件的内容区域生命的p标签&lt;/p&gt;</span><br><span class="line">&lt;/left&gt;</span><br></pre></td></tr></table></figure><h2 id="v-slot-指令"><a href="#v-slot-指令" class="headerlink" title="v-slot 指令"></a>v-slot 指令</h2><p>我们定义插槽时，官方规定每个插槽都要有一个 <code>name</code> 名称,如果省略了 slot 的 <code>name</code> 属性，则有一个默认名称叫做 <code>default</code>,默认情况下，在使用组件的时候，提供的内容都会被填充到名字为 <code>default</code> 的插槽之中，当我们有很多插槽时，我们应该给每个插槽一个不同的 <code>name</code> ，这样有自己名字的插槽叫做 <strong>具名插槽</strong></p><p>在定义插槽时，可以通过在<code>slot</code>标签内部写入信息，指定该插槽的后备内容，当使用了该插槽但没有指定插入内容时，会显示后备内容</p><blockquote><p>比如在声明<code>left.vue</code>组件时，通过 <code>name</code> 来定义插槽名称</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明一个插槽区域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 官方规定：每一个 slot 插槽，都要有一个 name 名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果省略了 slot 的 name 属性，则有一个默认名称叫做 default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是 default 插槽的后备内容<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们有很多插槽时，我们可以通过v-slot指令来指定需要进行操作的插槽</p><blockquote><p>v-slot: 指令不能直接用在元素身上，必须用在 template 标签上</p><p>v-slot: 指令的简写形式是 # </p></blockquote><p>在<code>app.vue</code> 组件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件和 Right 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 如果要把内容填充到指定名称的插槽中，需要使用 v-slot: 这个指令 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. v-slot: 后面要跟上插槽的名字 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3. v-slot: 指令不能直接用在元素身上，必须用在 template 标签上 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4. template 这个标签，它是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的 html 元素 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5. v-slot: 指令的简写形式是 # --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是在 Left 组件的内容区域，声明的 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>在封装组件时，为预留的<code>slot</code>提供属性对应的值，这种用法叫做<strong>作用域插槽</strong></p><blockquote><p>在下方实例中，给<code>slot</code>提供了msg这个属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在封装组件时，为预留的 &lt;slot&gt; 提供属性对应的值，这种用法，叫做 “作用域插槽” --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello vue.js&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 首字母要大写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Article&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们使用时，可以通过 <code>=</code> 来接收该属性值和其数据,<code>scope</code>就是个形参变量，想写什么都好，习惯使用 <code>scope</code> </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; scope.msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>同样，也可以使用解构赋值的方法来使用该数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #content=&quot;&#123; msg, user &#125;&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="什么是自定义指令"><a href="#什么是自定义指令" class="headerlink" title="什么是自定义指令"></a>什么是自定义指令</h2><p>vue 官方提供了 v-text、v-for、v-model、v-if 等常用的指令。除此之外 vue 还允许开发者自定义指令。</p><h2 id="自定义指令的分类"><a href="#自定义指令的分类" class="headerlink" title="自定义指令的分类"></a>自定义指令的分类</h2><p>vue 中的自定义指令分为两类，分别是：</p><ol><li><p><strong>私有</strong>自定义指令</p></li><li><p><strong>全局</strong>自定义指令</p></li></ol><h2 id="私有自定义指令"><a href="#私有自定义指令" class="headerlink" title="私有自定义指令"></a>私有自定义指令</h2><p>在每个vue组件之中，可以在 <code>directives</code> 节点下声明私有自定义指令</p><blockquote><p>在下面代码中，自定义一个 <code>v-color</code> 指令来改变标签颜色</p><p>当指令第一次被绑定到元素上的时候，会立即触发 <code>bind</code> 函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="为自定义指令动态绑定参数值"><a href="#为自定义指令动态绑定参数值" class="headerlink" title="为自定义指令动态绑定参数值"></a>为自定义指令动态绑定参数值</h2><p>在 template 结构中使用自定义指令时，可以通过等号（&#x3D;）的方式，为当前指令动态绑定参数值</p><p>并且在声明自定义指令时，可以通过形参中的第二个参数，来接收指令的参数值,习惯性的第二个参数我们叫做 <code>binding</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令的update函数"><a href="#指令的update函数" class="headerlink" title="指令的update函数"></a>指令的update函数</h2><p>bind 函数只调用 1 次：当指令第一次绑定到元素时调用，当 DOM 更新时 <code>bind</code> 函数不会被触发。 <code>update</code> 函数会在每次 DOM 更新时被调用。</p><blockquote><p>下面实现点击按钮后，颜色数据改变，同时页面标签颜色渲染改变,指令的 <code>update</code>函数，当元素变化时，所有使用该指令的组件都会触发update函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color = &#x27;green&#x27;&quot;</span>&gt;</span>改变 color 的颜色值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在 DOM 更新的时候，会触发 update 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 update 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义指令的简写"><a href="#自定义指令的简写" class="headerlink" title="自定义指令的简写"></a>自定义指令的简写</h2><p>我们会发现 <code>bind</code> 和 <code>update</code> 这两个函数，除了函数名不同，其他都相同，写两遍比较麻烦，所以vue提供了自定义指令的简写方式</p><p>如果 <code>bind</code> 和 <code>update</code> 函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color = &#x27;green&#x27;&quot;</span>&gt;</span>改变 color 的颜色值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">color</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h2><p>上面在组件的<code>.vue</code> 文件中定义的指令只能在自己的组件中使用，我们可以像定义全局过滤器一样在<code>main.js</code>中定义全局自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局自定义指令</span></span><br><span class="line"><span class="comment">/* Vue.directive(&#x27;color&#x27;, &#123;</span></span><br><span class="line"><span class="comment">  bind(el, binding) &#123;</span></span><br><span class="line"><span class="comment">    el.style.color = binding.value</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  update(el, binding) &#123;</span></span><br><span class="line"><span class="comment">    el.style.color = binding.value</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件的生命周期和数据共享</title>
      <link href="/2022/04/03/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
      <url>/2022/04/03/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><h2 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h2><p>生命周期（Life Cycle）是指一个组件从<strong>创建 -&gt; 运行 -&gt; 销毁</strong>的整个阶段，强调的是一个时间段。</p><p>当我们想要在组件的生命周期过程中进行一些操作时，我们就需要使用<code>生命周期函数</code>来进行操作</p><p><code>生命周期函数</code>：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。</p><p>注意：生命周期强调的是时间段，生命周期函数强调的是时间点。</p><h2 id="生命周期函数的分类"><a href="#生命周期函数的分类" class="headerlink" title="生命周期函数的分类"></a>生命周期函数的分类</h2><ol><li><p>创建阶段</p><ol><li>beforeCreate</li><li><strong>created</strong><br> 发起 Ajax 最早的时机，请求数据，还不可以操作DOM元素</li><li>beforeMount</li><li><strong>mounted</strong><br> 组件第一次被渲染到浏览器中<br> 操作 DOM 的最早的时机</li></ol><blockquote><p>创建阶段的生命周期函数只执行一次</p></blockquote></li><li><p>运行阶段</p><ol><li>beforeUpdate</li><li><strong>updated</strong><br> 能够操作到最新的 DOM 元素</li></ol><blockquote><p>运行阶段的生命周期函数可以执行多次</p></blockquote></li><li><p>销毁阶段</p><ol><li>beforeDestroy</li><li>destroyed</li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/vuelifecycle.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="组件的数据共享"><a href="#组件的数据共享" class="headerlink" title="组件的数据共享"></a>组件的数据共享</h1><p>在开发中，组件之间的关系一般分为 <code>父子关系</code> 和 <code>兄弟关系</code></p><h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><p>通过在子组件中定义自定义属性，在父组件中绑定数据后将值传给子组件</p><table><tr><th> 父组件</th><th> 子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; userinfo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">:msg</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;hello yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userinfo</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;yjr1100&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>msg 的值是：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>user 的值是：&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;user&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><blockquote><p>在这个过程中，对于基本数据类型，就是复制了一份真的值传了过来，但是对于<code>对象类型数据</code>，传的是对数据的引用，如果直接对子组件中的对象数据赋值，那么该对象就指向了新的对象，如果是修改子组件中的对象的属性，那么父组件中对象的属性也会改变。</p><p>当然我们之前就说了，不建议直接修改props中的数据，如果我们需要使用，建议复制一份进行操作</p></blockquote><h2 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h2><p>子组件向父组件传递值，需要使用自定义事件</p><ol><li>在子组件中使用 <code>$emit()</code> 来触发<strong>自定义事件</strong>，<code>$emit()</code>接收两个参数，第一个参数是一个<strong>字符串</strong>代表<strong>事件名称</strong>，第二个参数是要传递的数据</li><li>父组件中给子组件标签绑定其<strong>自定义事件</strong>，并定义事件处理函数（<em>这里可以把子组件的<strong>自定义事件</strong>名称看作类似于 <code>click</code> 这样的，我们也可以像 <code>@click=&quot;btnclick&quot;</code> 一样使用<code>@</code>绑定<strong>自定义事件</strong>，并且定义一个事件处理函数</em>）</li></ol><table><tr><th> 父组件</th><th> 子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App 根组件 --- &#123;&#123; countFromSon &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染  Right 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Right</span> @<span class="attr">numchange</span>=<span class="string">&quot;getNewCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义 countFromSon 来接收子组件传递过来的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">countFromSon</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取子组件传递过来的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getNewCount</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numchange 事件被触发了！&#x27;</span>, val)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">countFromSon</span> = val</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Right</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Right 组件 --- &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 子组件自己的数据，将来希望把 count 值传给父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 让子组件的 count 值自增 +1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 把自增的结果，传给父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;numchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">count</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><h2 id="兄弟组件之间的数据共享"><a href="#兄弟组件之间的数据共享" class="headerlink" title="兄弟组件之间的数据共享"></a>兄弟组件之间的数据共享</h2><p>在vue2.x中兄弟组件之间数据共享的方案是 <code>EventBus</code> </p><p><code>EventBus</code> 是我们自己定义的一个<strong>js模块</strong>，用来向外共享一个<strong>Vue实例对象</strong></p><p><code>EventBus</code> 的使用步骤</p><ol><li><p>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象</p></li><li><p>在数据发送方，调用 bus.$emit(‘事件名称’, 要发送的数据) 方法触发<strong>自定义事件</strong></p></li><li><p>在数据接收方，调用 bus.$on(‘事件名称’, 事件处理函数) 方法注册一个<strong>自定义事件</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventBus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><tr><th> Legt发送子组件</th><th> Right接收子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>把好诗发给 Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 导入 eventBus.js 模块</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">str</span>: <span class="string">`这是Left子组件发给Right子组件的数据`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 通过 eventBus 来发送数据</span></span></span><br><span class="line"><span class="language-javascript">      bus.$emit(<span class="string">&#x27;share&#x27;</span>, <span class="variable language_">this</span>.<span class="property">str</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgFromLeft &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 1. 导入 eventBus.js 模块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msgFromLeft</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 为 bus 绑定自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bus.$on(<span class="string">&#x27;share&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在 Right 组件中定义的 share 被触发了！&#x27;</span>, val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">msgFromLeft</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="ref-引用"><a href="#ref-引用" class="headerlink" title="ref 引用"></a>ref 引用</h1><p>在vue中，程序员本意是不需要操作DOM，只需要把数据维护好就可以了，在<strong>vue项目</strong>中，不建议安装和使用 <code>jQuery</code> ，假设我们需要在<strong>vue项目</strong>之中操作DOM，我们可以使用ref引用。</p><h2 id="什么是ref引用"><a href="#什么是ref引用" class="headerlink" title="什么是ref引用"></a>什么是ref引用</h2><p>ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。</p><p>每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下，组件的 $refs 指向一个空对象</p><h2 id="ref获取DOM"><a href="#ref获取DOM" class="headerlink" title="ref获取DOM"></a>ref获取DOM</h2><p>我们只需要在标签中添加<code>ref属性</code>，就可以通过 Vue 的 <code>$refs</code> 得到该DOM元素，注意<code>ref</code>的名字不要冲突了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;myh12&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this,颜色改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* updated() &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    this.$refs.iptRef.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  &#125;, */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this 是当前 App 组件的实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myh12</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref获取组件"><a href="#ref获取组件" class="headerlink" title="ref获取组件"></a>ref获取组件</h2><p>同样的，我们只需要在页面对应组件中写入 <code>ref</code> 属性，就可以使用该属性得到组件，并且访问组件内的数据和函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onReset&quot;</span>&gt;</span>重置 Left 组件的 count 值为 0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">ref</span>=<span class="string">&quot;comLeft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，重置 Left 组件的 count 值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onReset</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">comLeft</span>.<span class="title function_">resetCount</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.$refs.comLeft.count = 0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="利用-this-nextTick-cb-和-ref-实现切换"><a href="#利用-this-nextTick-cb-和-ref-实现切换" class="headerlink" title="利用 this.nextTick(cb) 和 ref  实现切换"></a>利用 <code>this.nextTick(cb)</code> 和 <code>ref</code>  实现切换</h2><blockquote><p>下面的案例实现点击按钮，显示文本框，并且文本框自动获取焦点，当文本框失去焦点的时候，显示按钮</p></blockquote><p>组件的 <code>$nextTick(cb)</code> 方法，会把 callback 回调推迟到下一个 DOM 更新周期之后执行。通俗的理解是：等组件的<br>DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;inputVisible&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;showButton&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;iptRef&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">&quot;showInput&quot;</span>&gt;</span>展示输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">ref</span>=<span class="string">&quot;comLeft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 控制输入框和按钮的按需切换；</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 默认值为 false，表示默认展示按钮，隐藏输入框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">inputVisible</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，展示输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showInput</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 切换布尔值，把文本框展示出来</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">inputVisible</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 让展示出来的文本框，自动获取焦点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   如果直接这样写，是不可以获得该组件的，因为这个函数执行结束前</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   页面并没有渲染，还没有这个组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.$refs.iptRef.focus()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">iptRef</span>.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showButton</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">inputVisible</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不使用 <code>updated()</code> 生命周期函数是因为每次数据变化都会调用 <code>updated</code> ,当该元素被隐藏不存在时也会执行，此时就会报错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件入门</title>
      <link href="/2022/04/03/vue%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/03/vue%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h2 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h2><p>组件化开发指的是：根据封装的思想，把页面上可重用的UI 结构封装为组件，从而方便项目的开发和维护。</p><h2 id="vue-中的组件化开发"><a href="#vue-中的组件化开发" class="headerlink" title="vue 中的组件化开发"></a>vue 中的组件化开发</h2><p>vue 是一个支持组件化开发的前端框架。</p><p>vue 中规定：组件的后缀名是.vue。之前接触到的App.vue 文件本质上就是一个 vue 的组件。</p><h2 id="vue-组件的三个组成部分"><a href="#vue-组件的三个组成部分" class="headerlink" title="vue 组件的三个组成部分"></a>vue 组件的三个组成部分</h2><p>每个.vue 组件都由3 部分构成，分别是：</p><ol><li><code>template</code> -&gt; 组件的模板结构 </li><li><code>script</code>-&gt; 组件的JavaScript 行为</li><li><code>style</code> -&gt; 组件的样式</li></ol><p>其中每个组件中必须包含 <code>template</code> 模板结构，而 <code>script</code> 行为和 <code>style</code> 样式是可选的组成部分。</p><blockquote><p>三个完整部分组成的组件如下</p><p>注意：<code>.vue </code>组件中的 <code>data</code> 不能指向对象，组件中的 <code>data</code> 必须是一个函数，在函数中 <code>return</code> 一个对象用来定义数据</p><p>在组件中 <code>this</code> 指向的是当前组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;d1&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是我定义的test.vue模板结构 --- &#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;change&quot;&gt;点击用户名会变&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 默认导出</span><br><span class="line">export default&#123;</span><br><span class="line">    //data</span><br><span class="line">    // 注意.vue 组件中的data不能指向对象，</span><br><span class="line">    /* data:&#123;</span><br><span class="line">        username:&quot;heiheih&quot;</span><br><span class="line">    &#125; */</span><br><span class="line">    // 组件中的data 必须是一个函数</span><br><span class="line">    data()&#123;</span><br><span class="line">        // return一个对象，用来定义数据</span><br><span class="line">        return &#123;username:&quot;yjr1100&quot;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change()&#123;</span><br><span class="line">            // 在vue 组件中this就表示当前组件的实例对象</span><br><span class="line">            this.username=&quot;yjr-1100&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 当前组件的侦听器</span><br><span class="line">    watch:&#123;&#125;,</span><br><span class="line">    // 当前组件中的计算属性</span><br><span class="line">    computd:&#123;&#125;,</span><br><span class="line">    // 当前组件中的过滤器 注意这个只有vue2中有</span><br><span class="line">    filter:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .d1&#123;</span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 组件必须要有唯一的根源素(即我们组件对外只能有一个div，其他的标签都应该被它包裹)</p></blockquote><h2 id="在组件中使用less"><a href="#在组件中使用less" class="headerlink" title="在组件中使用less"></a>在组件中使用less</h2><p>我们只需要在<code>style</code> 标签上添加 <code>lang</code> 属性,值为 <code>less</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="组件的关系"><a href="#组件的关系" class="headerlink" title="组件的关系"></a>组件的关系</h1><p>当我们封装好几个组件后（一般<code>App.vue</code>放在src根目录中，其他组件放在<code>components</code>文件夹下），组件之间并没有关系，我们只是默认把 <code>App.vue</code> 渲染到了<code>index.html</code> 中，其他组件都没有使用，想要将组件都利用起来，我们必须合理<strong>使用组件</strong>，让他们之间形成嵌套关系，比如：父子关系或兄弟关系</p><h2 id="组件使用的三个步骤"><a href="#组件使用的三个步骤" class="headerlink" title="组件使用的三个步骤"></a>组件使用的三个步骤</h2><ol><li><p>在 <code>App.vue</code> 根组件中使用import语法导入其他组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入需要使用的 .vue 组件</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Test.vue&quot;</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>components</code> 节点中注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">flag</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 2. 注册组件</span></span><br><span class="line">  <span class="comment">// 当建和值相同的时候，可以简写</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span>,</span><br><span class="line">    <span class="title class_">Test</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以标签形式使用组件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Left</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Right</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="components节点"><a href="#components节点" class="headerlink" title="components节点"></a>components节点</h2><p>使用<code>components</code>节点注册的是私有组件，比如在 <code>组件A</code> 中注册了 <code>组件F</code>，那么<code>组件F</code>只能在<code>组件A</code>中使用，而在<code>组件B</code>中不能使用</p><h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>当某个节点需要频繁经常被使用的时候，如果我们每次都使用 <code>components</code> 来注册私有组件比较麻烦</p><p>我们通过 <code>vue</code> 项目的 <code>main.js</code> 入口文件中，使用 <code>Vue.component()</code> 方法，注册全局组件，注意不要在组件自己里面使用自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要被全局注册的那个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Count.vue&#x27;</span></span><br><span class="line"><span class="comment">// 第一个参数是字符串组件的名字</span></span><br><span class="line"><span class="comment">// 第二个参数就是组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyCount&#x27;</span>, <span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h1><p><code>props</code> 是组件的自定义属性，在封装通用组件的时候，合理地使用 <code>props</code> 可以极大的提高组件的复用性</p><p>在我们封装的组件中，添加 <code>props</code> 节点，该节点是一个数组&#x2F;对象，可以自定义组件的属性</p><p>props 中的数据，可以直接在模板结构中被使用</p><p><strong>注意</strong>：props 是只读的，不要直接修改 <code>props</code> 的值，否则终端会报错</p><p>使用的时候，我们需要在组件的标签中给自定义属性动态传入值<code>&lt;MyCount init=&quot;9&quot;&gt;&lt;/MyCount&gt;</code>,直接在标签里这样写传给组件的是一个字符串9，所以我们利用 <code>v-bind</code> 绑定属性时写入的是js表达式这一特性，让 9 变为数字9.所以我们这样写 <code>&lt;MyCount :init=&quot;9&quot;&gt;&lt;/MyCount&gt;</code></p><p>当我们需要给自定义属性一个初始值时，<code>props</code> 就需要定义为对象,并在其中定义<code>自定义属性</code>，对于<code>自定义属性</code>我们可以定义它的配置选项， 比如 <code>default</code>，<code>type</code> ， <code>required</code> 等</p><table><tr><th> 数组形式的props</th><th> 对象形式的props </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// props 是&quot;自定义属性&quot;，允许使用者通过自定义属性，为当前组件指定初始值</span></span><br><span class="line">  <span class="comment">// 自定义属性的名字，是封装者自定义的（只要名称合法即可）</span></span><br><span class="line">  <span class="comment">// props 中的数据，可以直接在模板结构中被使用</span></span><br><span class="line">  <span class="comment">// 注意：props 是只读的，不要直接修改 props 的值，否则终端会报错！</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;init&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 把 props 中的 init 值，转存到 count 上</span></span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">init</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义属性A : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="comment">// 自定义属性B : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="comment">// 自定义属性C : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="attr">init</span>: &#123;</span><br><span class="line">      <span class="comment">// 如果外界使用 Count 组件的时候，没有传递 init 属性，则默认值生效</span></span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// init 的值类型必须是 Number 数字</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="comment">// 必填项校验，代表使用组件时必须传入该属性</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 把 props 中的 init 值，转存到 count 上</span></span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">init</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></td></tr></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCount</span> <span class="attr">:init</span>=<span class="string">&quot;9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCount</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件的样式冲突"><a href="#组件的样式冲突" class="headerlink" title="组件的样式冲突"></a>组件的样式冲突</h1><h2 id="使用-scoped-属性"><a href="#使用-scoped-属性" class="headerlink" title="使用 scoped 属性"></a>使用 scoped 属性</h2><p>默认情况下，写在 <code>.vue</code> 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p><p>导致组件之间样式冲突的根本原因是：</p><ol><li><p>单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的</p></li><li><p>每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素</p></li></ol><p>解决思路，使用属性选择器给当前组件里的标签都添加同一个自定义属性，每个不同的组件都使用不同的自定义属性，这样就会把样式限制在当前组件中了</p><p>事实上，如果让我们每次写标签的时候手动添加一个自定义属性会非常麻烦，只要我们在<code>.vue</code> 组件中的<code>style</code> 标签上添加一个 <code>scoped</code> 属性，在编译生成时，vue就会自动实现上面的功能,为我们的标签添加一个 <code>data-v-xxxx</code> 这样的自定义属性来避免组件之间的样式冲突</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-x2F-deep-x2F-样式穿透"><a href="#使用-x2F-deep-x2F-样式穿透" class="headerlink" title="使用 &#x2F;deep&#x2F; 样式穿透"></a>使用 &#x2F;deep&#x2F; 样式穿透</h2><p>当我们在父组件中想要修改子组件的样式时，如果我们的父组件添加了 <code>scoped</code> 属性，那么修改的样式并不能在子组件中生效，但如果我们不加 <code>scoped</code> 属性 那么样式又会在全局生效，影响布局，因此我们需要使用 <code>/deep/</code> 来达到 <strong>在父组件中修改子组件样式的目的</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">// <span class="selector-tag">h5</span><span class="selector-attr">[data-v-3c83f0b7]</span></span></span><br><span class="line"><span class="language-css">// <span class="selector-attr">[data-v-3c83f0b7]</span> <span class="selector-tag">h5</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">// 当使用第三方组件库的时候，如果有修改第三方组件默认样式的需求，需要用到 /deep/</span></span><br><span class="line"><span class="language-css">/deep/ <span class="selector-tag">h5</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>/deep/ </code> 的原理是：在选择器前面添加一个属性选择器，代表该属性选择器包裹下的对应选择器使用该样式。当然添加的这个属性选择器，就是我们每个组件的自定义属性 <code>data-v-xxx</code> </p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cil的使用</title>
      <link href="/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h1><p>单页面应用程序(Single Page Application) 简称 SPA，指一个Web网站中只有唯一的一个HTML页面，所有的功能与交互都在这个唯一的一个页面完成</p><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><p><code>vue-cli</code> 是Vue.js 开发的标准工具。它简化了程序员基于webpack 创建工程化的Vue 项目的过程</p><p><a href="https://cli.vuejs.org/zh/">官网传送</a></p><h2 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h2><p><code>vue-cli</code> 是 <code>npm</code> 上的一个全局包，使用 <code>npm install</code> 命令，即可方便的把它安装到自己的电脑上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>在命令行输入<code>vue -V</code> 如果回显 <code>@vue/cli 版本号</code> 就说明安装成功了</p><p>如果之前安装过低版本的可以通过下面两个命令来卸载重装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g vue-cli</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="vue-cli-的使用"><a href="#vue-cli-的使用" class="headerlink" title="vue-cli 的使用"></a>vue-cli 的使用</h2><ol><li><p>在终端下运行如下的命令，创建指定名称的项目,注意我们项目名称最好是英文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue cerate 项目的名称</span><br></pre></td></tr></table></figure><p>输入后我们会看到控制台有一些提示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021851371.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们可以通过控制方向键来选择创建项目使用的vue版本，其中前两个就是创建vue2 和 vue3 的项目，项目里默认安装 <code>babel</code> 和 <code>eslint</code> ，最后一项就是我们可以自己选择创建的版本和需要安装的包</p><p>我们选择最后一项并且更具自己需要选择要安装的包，选择最后一项后可以看到如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021855310.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>如果项目中使用 <code>less</code> 我们需要选则 <code>CSS Pre-processors</code> css 预处理器,至于 <code>Linter / Formatter</code> 是用来规范代码风格的，如果我们现在安装上可能就不会写代码了，最下面两个 <code>Unit Testing</code> 和 <code>E2E Testing</code> 是进行组件测试单元测试的，目前还不需要，先不勾选</p><p>确认无误按下回车后，就会进入选择vue版本的界面，目前学习 vue2 ，就选择 vue2 就好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021901698.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>对于使用的css预处理器，我们也需要进行一次选择，这里我选择 <code>less</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021903613.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们还需要选择 <code>bable</code> <code>，ESLint</code> <code>，webpack</code> 等插件的配置文件的位置，第一个是指每个单独一个配置文件，下面是指都放在 <code>package.json</code> 中,选择第一个让他们独立开</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021907579.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>最后一个是询问要不要把刚才的配置存为一个预设，如果存的话就输入 <code>y</code> ，我们存一下，防止以后每次都选比较麻烦,这里我们还需要给预设起名字，这个自己知道就好</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021909142.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面都做完回车后，就开始下载相关依赖和创建项目了，这个时候我们不要动这个窗口，如果我们用鼠标点了一下，会阻断运行，如果不小心阻断了运行，可以通过 <code>Ctrl+c</code> 来恢复.</p><p>全部创建结束后，会提示我们怎么把项目跑起来如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021915218.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们看一下项目目录结构是什么样子的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021927132.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p><code>node_modules</code>是一些包，我们不用在意<br>public 中放的就是我们的单页面，里面的<code>favicon.ico</code>浏览器标签栏要显示的小图标<br>除了一些配置文件和包文件，其他值得我们注意的就是 <code>src</code> 目录</p></blockquote></li><li><p>vue 项目中 src 目录的构成：</p><blockquote><p>assets 文件夹：存放项目中用到的静态资源文件，例如：css 样式表、图片资源<br>components 文件夹：程序员封装的、可复用的组件，都要放到 components 目录下<br>main.js 是项目的入口文件。整个项目的运行，要先执行 main.js<br>App.vue 是项目的根组件。</p></blockquote></li></ol><h2 id="vue-项目的执行流程"><a href="#vue-项目的执行流程" class="headerlink" title="vue 项目的执行流程"></a>vue 项目的执行流程</h2><p>在工程化项目中，vue 要做的事情很单纯：通过 <code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 的指定区域</p><blockquote><p>比如在下面的例子中，我自己写一个vue模板结构渲染到 <code>index.html</code> 中去</p><ol><li>首先创建自己的 <code>Test.vue</code> 文件 ，随便写两行</li><li>在 <code>main.js</code> 中引入自己写的 <code>Test.vue</code> </li><li>在 <code>main.js</code> 的 Vue 构造函数中，把<code>render</code>属性指向我们的文件</li></ol></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >main.js</li>        <li class="yjr_menuItem" >Test.vue</li>    </ul>    <div class="yjr_code">        <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue 包，得到Vue的构造函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入 App.vue 根组件，将来把 App.vue 中的模板结构渲染到 HTML页面中</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;./Test.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 创建vue的实例对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// el:&#x27;#app&#x27;,</span></span><br><span class="line">    <span class="comment">// 把render函数指定的组件，渲染到HTML页面中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">Test</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 这里没有使用 `el` 而是用了 &#x27;$mount()&#x27; 方法来指定替换的控件</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;这是我定义的test.vue模板结构&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>        </div>    </div></div>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise 、async、await 的学习</title>
      <link href="/2022/04/02/async%E5%92%8Cawait/"/>
      <url>/2022/04/02/async%E5%92%8Cawait/</url>
      
        <content type="html"><![CDATA[<h1 id="js的同步和异步"><a href="#js的同步和异步" class="headerlink" title="js的同步和异步"></a>js的同步和异步</h1><p>首先我们需要复习一下 js 的同步和异步</p><p>JavaScript是一门单线程的语言，因此，JavaScript在同一个时间只能做一件事，单线程意味着，如果在同个时间有多个任务的话，这些任务就需要进行排队，前一个任务执行完，才会执行下一个任务，为了防止 ajax 这类任务执行等待时间过长，javascrpit 就设计了同步和异步任务</p><blockquote><p>同步任务</p><p>同步任务是指在主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务，当我们打开网站时，网站的渲染过程，比如元素的渲染，其实就是一个同步任务</p></blockquote><blockquote><p>异步任务</p><p>异步任务是指不进入主线程，而进入任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程，当我们打开网站时，像图片的加载，音乐的加载，其实就是一个异步任务</p></blockquote><hr><h1 id="Es6的Promise异步规范"><a href="#Es6的Promise异步规范" class="headerlink" title="Es6的Promise异步规范"></a>Es6的Promise异步规范</h1><p>在 Es6 的 Promise 出来之前，我们一般都是使用回调函数来处理异步任务 ，在Promise规范提出后，异步编程就变的相对简单一些</p><p>Promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</p><p>Promise并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</p><p>Promise包括以下几个规范</p><blockquote><ol><li>一个promise可能有三种状态：等待<code>pending</code> 、已完成<code>fulfilled</code> 、已拒绝<code>rejected</code></li><li>一个promise的状态只可能从 <code>等待</code> 转到 <code>完成</code> 态或者 <code>拒绝</code> 态，不能逆向转换，同时 <code>完成</code> 态和 <code>拒绝</code> 态不能相互转换</li><li>promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致(即链式的then方法调用)</li><li>then方法接受两个参数，(一般我们叫第一个回调参数为<code>res</code>、第二个为 <code>err</code>) ，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由 <code>等待</code> 态转换到 <code>拒绝</code> 态时调用，同时，<code>then</code> 可以接受另一个 <code>promise</code> 传入，也接受一个“类then”的对象或方法，即thenable对象</li></ol></blockquote><p>我们可以通过 <code>if(typeof(Promise)===&quot;function&quot;)</code> 来测试浏览器是否支持<code>promise</code></p><p>通过 <code>new Promise</code> 来进行 <code>Promise</code> 对象的创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 一段耗时的异步操作</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>) <span class="comment">// 数据处理完成</span></span><br><span class="line">    <span class="comment">// reject(&#x27;失败&#x27;) // 数据处理出错</span></span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;,  <span class="comment">// 成功</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125; <span class="comment">// 失败</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Promise.then()</code>的链式调用示例，<code>then</code> 被按照顺序组织起来，一个一个的执行，每个执行完后就会变成 <code>完成</code> 状态并进行下一个</p><p>前面也提到了，then方法其实是接受两个参数，虽然大部分时候我们都比较关注成功时的回调，但第二个参数失败的回调可以帮我们处理一些异常，除此之外，我们还可以使用<code>catch</code>来捕获错误，<code>reject</code> 的东西一定进入 <code>then</code> 的第二个回调,当没有写第二个回调的时候，会进入<code>catch</code>,如果没有<code>then</code>， 也可以直接进入<code>catch</code>。</p><p><code>err处理异常</code>和<code>catch</code>都会返回一个promise实例，并且是resolved状态所以不会影响后续的<code>then</code>的执行,否则将会把后续的<code>then</code>的状态变为<code>rejected</code> 并且不会执行他们所登记的异步函数</p><table><tr><th> then的链式调用 </th><th> 出错的then的链式调用 </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  参数val = &#x27;hello&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数val = &#x27;world&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res+<span class="string">&quot;这是第一个then&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第一个then return 了&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;如果第一个出错，执行这个&quot;</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="comment">// 假装第二个then输出第一个then的值后出错了</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;这是第二个then抛出的错误&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第三个then&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第三个then的第二个回调&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//上一个then第二个回调处理完异常后，不影响这个的执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第四个then执行了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第四个then的return&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第四个then的err&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第五个then执行了&quot;</span>)</span><br><span class="line">    <span class="comment">// 假装第五个then出错了</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;这是第五个then抛出的错误&quot;</span>)</span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第五个then的err&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后的catch执行了&quot;</span>+err)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch不影响下一个then的状态&quot;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><blockquote><p><code>async</code> 是作为函数的修饰符放在函数的前面 ， 它的调用会返回一个 <code>promise</code> 对象,并且 <code>Promise</code> 还有 <code>PromiseStatus</code> 和 <code>promiseValue</code>，如果 <code>async</code> 函数本身返回值，当调用该函数成功时内部会调用 <code>Promise.solve()</code> 方法把它转化成一个 <code>promise</code> 对象作为返回，如果  函数内部抛出错误，就会调用 <code>Promise.reject()</code> 返回一个 <code>promise</code> 对象,<code>想要获取到async</code> 函数的执行结果，就要调用promise的 <code>then</code> 或 <code>catch</code> 来给它注册回调函数</p><p>总结一下，<code>async</code> 函数的执行会返回一个 <code>promise</code> 对象，并且把内部的值进行 <code>promise</code> 的封装。如果 <code>promise</code> 对象通过 <code>then</code> 或 <code>catch</code> 方法又注册了回调函数，<code>async</code> 函数执行完以后，注册的回调函数就会放到异步队列中，等待执行</p></blockquote><blockquote><p><code>await</code> 关键字只能放到 <code>async</code> 函数里面，<code>await</code> 是等待的意思,等待直到<code>Promise</code>对象<code>resolve</code>，得到<code>resolve</code>的值作为<code>await</code>表达式的运算结果,我们一般在需要拿到请求数据后再操作的情况下使用。</p></blockquote><p>执行下面的代码我们可以看到每等2秒会输出一个值，6秒后 三个数的和 和 第三个数几乎一起输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 2s 之后返回双倍的值</span><br><span class="line">function doubleAfter2seconds(num) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(2 * num)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line">async function testResult() &#123;</span><br><span class="line">    let first = await doubleAfter2seconds(30);</span><br><span class="line">    console.log(first);</span><br><span class="line">    let second = await doubleAfter2seconds(50);</span><br><span class="line">    console.log(second);</span><br><span class="line">    let third = await doubleAfter2seconds(30);</span><br><span class="line">    console.log(third);</span><br><span class="line">    console.log(first + second + third);</span><br><span class="line">&#125;</span><br><span class="line">testResult()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> Es7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门学习</title>
      <link href="/2022/04/01/vue%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/01/vue%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Watch侦听器"><a href="#Watch侦听器" class="headerlink" title="Watch侦听器"></a>Watch侦听器</h1><p>watch侦听器允许开发者监视数据的变化，从而对数据的变化做出特定的操作</p><p>所有的侦听器，都应该被定义到 <code>watch</code> 节点下,侦听器本质上是一个函数</p><blockquote><p>一个常用的场景是输入用户名后发送ajax请求判断用户名是否重复，下面的案例在控制台看代码输出</p></blockquote><h2 id="方法格式的侦听器"><a href="#方法格式的侦听器" class="headerlink" title="方法格式的侦听器"></a>方法格式的侦听器</h2><blockquote><p>要监视哪个数据的变化，就把数据名作为方法名</p><p>侦听器接受两个参数，旧的数据值和新的数据值，其中新的数据值是第一个参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 侦听器本质上是一个函数，要监视哪个数据的变化，就把数据名作为方法名即可</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 新值在前，旧值在后</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">username</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (newVal === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 调用 jQuery 中的 Ajax 发起请求，判断 newVal 是否被占用！！！</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法格式的侦听器无法在刚进入页面的时候就自动触发，并且当data是对象格式的数据时，监听数据对象本身无法监听到对象属性的变化</strong></p><h2 id="对象格式的侦听器"><a href="#对象格式的侦听器" class="headerlink" title="对象格式的侦听器"></a>对象格式的侦听器</h2><h3 id="进入页面就触发"><a href="#进入页面就触发" class="headerlink" title="进入页面就触发"></a>进入页面就触发</h3><blockquote><p><code>handler</code> 作为对象格式侦听器的处理函数,同样接受两个参数</p><p>通过控制对象的 <code>immediate</code> 属性来控制侦听器是否自动触发一次</p><p>immediate 属性的默认值是 false</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义对象格式的侦听器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 侦听器的处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// immediate 选项的默认值是 false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// immediate 的作用是：控制侦听器是否自动触发一次！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="深度侦听器对象格式的数据"><a href="#深度侦听器对象格式的数据" class="headerlink" title="深度侦听器对象格式的数据"></a>深度侦听器对象格式的数据</h3><blockquote><p>当我们的数据 <code>data</code> 是一个对象的时候，我们需要监听的是对象的属性变化，通过对象格式监听器的 <code>deep</code> 属性来控制对 <code>对象形式数据</code> 属性的深度监听</p><p>只要<code>数据对象</code>中任何一个属性变化了，就会触发对<code>对象的侦听器</code></p><p>这样的写法每次需要操作还需要在方法内部使用 <code>.</code> 来访问对象属性</p><p>如果我们想直接侦听对象中的属性，我们可以直接写一个表达式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.address.city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户的信息对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal.<span class="property">address</span>.<span class="property">city</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(newVal.username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 开启深度监听，只要对象中任何一个属性变化了，都会触发“对象的侦听器”</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果要侦听的是对象的子属性的变化，则必须包裹一层单引号</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 函数格式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#x27;info.username&#x27;(newVal) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(newVal)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对象格式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;info.username&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性就是指通过一些系列计算后，最终得到一个<code>属性值</code>,这个动态计算出来的属性值可以被模板结构或 <code>methodes</code> 方法使用</p><blockquote><p>比如实现修改rgb的值让盒子的背景色达到自动变色的效果</p><p>当不使用计算属性时，我们对于<code>backgroundcolor</code>属性需要每次动态计算我们对 <code>style</code> 绑定的就是一个{ }样式对象，每次使用模板字符串动态计算其值，把计算结果给 <code>style</code> 属性，<strong>注意在vue中 v-bind 还有插值语法中可以写js表达式</strong></p></blockquote><table><tr><th> 没使用计算属性的代码 </th><th> 使用计算属性的代码 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>R：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;r&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>G：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;g&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>B：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 专门用户呈现颜色的 div 盒子 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在属性身上，: 代表  v-bind: 属性绑定 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- :style 代表动态绑定一个样式对象，它的值是一个 &#123;  &#125; 样式对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)` &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)` &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 红色 绿色 蓝色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">g</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 点击按钮，在终端显示最新的颜色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>R：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;r&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>G：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;g&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>B：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- :style 代表动态绑定一个样式对象，它的值是一个 &#123;  &#125; 样式对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当前的样式对象中，只包含 backgroundColor 背景颜色 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: rgb &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; rgb &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 红色 绿色 蓝色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">g</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 点击按钮，在终端显示最新的颜色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rgb</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的计算属性，都要定义到 computed 节点之下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 计算属性在定义的时候，要定义成“方法格式”</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// rgb 作为一个计算属性，被定义成了方法格式，</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 最终，在这个方法中，要返回一个生成好的 rgb(x,x,x) 的字符串</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">rgb</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在控制台看打印出来的vue对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td></tr></table><blockquote><p>特点：</p><ol><li>定义的时候，要被定义为“方法”</li><li>在使用计算属性的时候，当普通的属性使用即可,就类似于该vue对象多了一个叫 <code>rgb</code> 的数据</li></ol><p>好处：</p><ol><li>实现了代码的复用</li><li>只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值</li></ol></blockquote><hr><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>axios 是一个专注于网络请求的库！</p></blockquote><p><a href="https://www.npmjs.com/package/axios">axios传送门</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般我们在vue中使用 <code>axios</code> 时都会使用下面的命令来安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure><p>并且使用前通过 <code>import axios from &#39;axios&#39;</code> 来导入</p><h2 id="axios的GET请求"><a href="#axios的GET请求" class="headerlink" title="axios的GET请求"></a>axios的GET请求</h2><blockquote><p>直接使用 axios 发送 Get 请求 在控制台查看输出</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// http://www.liulongbin.top:3006/api/getbooks</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 请求的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// GET 请求参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios的POST请求"><a href="#axios的POST请求" class="headerlink" title="axios的POST请求"></a>axios的POST请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPost&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios-配合-async-和-await-使用"><a href="#axios-配合-async-和-await-使用" class="headerlink" title="axios 配合 async 和 await 使用"></a>axios 配合 async 和 await 使用</h2><p>对于<strong>Es7</strong>的 <code>async</code> 和 <code>await</code> 可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/async%E5%92%8Cawait/">Promise 、async、await 的学习</a></p><p>在下面的例子中，通过 <code>async/await</code> 和 解构赋值 来使 <code>axios</code> 的操作更加方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPost&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果调用某个方法的返回值是 Promise 实例，则前面可以添加 await</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await 只能用在被 async “修饰”的方法中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解构赋值的时候，使用 : 进行重命名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 调用 axios 之后，使用 async/await 进行简化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用解构赋值，从 axios 封装的大对象中，把 data 属性解构出来</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 把解构出来的 data 属性，使用 冒号 进行重命名，一般都重命名为 &#123; data: res &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们还可以直接通过 <code>axios.get()</code> 和 <code>axios.post()</code> 来进行 get 和 post 请求的发送</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="axios挂载在vue原型下"><a href="#axios挂载在vue原型下" class="headerlink" title="axios挂载在vue原型下"></a>axios挂载在vue原型下</h2><p>不论是通过<code>import axios from &#39;axios&#39;</code> 还是通过 <code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code> 每个组件都需要单独引入并且使用，这样太麻烦了</p><p>我们可以在 <code>main.js</code> 中导入 axios 并且挂载在vue原型中，并且在挂载前设置请求根路径，这样我们就使用或修改服务器地址后进行维护都比较方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span>=<span class="string">&#x27;请求根路径&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br></pre></td></tr></table></figure><p>在这之后我们在每个组件中使用时，只需要通过 <code>this.$http</code> 就可以使用了,这里 <code>$http</code> 是一个习惯，也可以写成别的名字</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20文件桌面启动</title>
      <link href="/2022/04/01/Ubuntu20%E6%96%87%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/04/01/Ubuntu20%E6%96%87%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打开终端（ctrl+alt+t）键入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/.local/share/applications</span><br></pre></td></tr></table></figure><blockquote><p>usr 是我们自己的用户名</p></blockquote></li><li><p>新建<code>.desktop</code>文件, sudo gedit XXX.desktop,启动文件一般包含下面几项</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=           #程序名字</span><br><span class="line">Comment=           #程序注释</span><br><span class="line">Exec=               #可执行文件的路径</span><br><span class="line">Terminal=           #是否打开终端</span><br><span class="line">Type=               #应用类型，常用有Application等</span><br><span class="line">Icon=                   #图标，支持png 格式图片</span><br><span class="line">Categories=               #分类</span><br><span class="line">Path=                          # 设置当前工作目录</span><br><span class="line">X-GNOME-Autostart-enabled=true # 设置开机自启动</span><br></pre></td></tr></table></figure><blockquote><p>默认当前工作目录是&#x2F;home&#x2F;用户名</p></blockquote></li><li><p>给文件权限 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x xxx.desktop</span><br></pre></td></tr></table></figure></li><li><p>将新建.desktop文件复制到桌面文件夹， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> xxx.desktop ~/Desktop/</span><br></pre></td></tr></table></figure></li><li><p>将新建.desktop文件复制到开机自启动， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> xxx.desktop /home/用户名/.config/autostart</span><br></pre></td></tr></table></figure></li><li><p>桌面找到启动快捷方式，右键允许启动。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu20 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2过滤器的学习</title>
      <link href="/2022/03/31/Vue2%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/31/Vue2%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>过滤器（Filters） 是vue为开发者提供的功能，用于文本的格式化，过滤器可以在 <code>插值表达式</code> 和 <code>v-bind</code> 属性绑定使用</p><p>过滤器应该被卸载 JavaScript 表达式的尾部，由<code>|</code> 符号来调用</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>message 的值是：&#123;&#123; message | capi &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>message 的值是：&#123;&#123; message | capi &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用 Vue.filter() 定义全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capi&#x27;</span>, <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> first = str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> other = str.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> first + other + <span class="string">&#x27;~~~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;hello vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 过滤器函数，必须被定义到 filters 节点之下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 过滤器本质上是函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 注意：过滤器函数形参中的 val，永远都是“管道符”前面的那个值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">capi</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串有 charAt 方法，这个方法接收索引值，表示从字符串中把索引对应的字符，获取出来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// val.charAt(0)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> first = val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串的 slice 方法，可以截取字符串，从指定索引往后截取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> other = val.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 强调：过滤器中，一定要有一个返回值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> first + other</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;heima&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <p>message 的值是：Hello vue.js</p>        <p>message 的值是：Heima~~~</p>    </div></div><p><strong>过滤器的注意点</strong></p><blockquote><ol><li>要定义到 <code>filters</code> 节点下，<strong>本质是一个函数</strong></li><li>在过滤器函数中，<strong>一定要有 return 值</strong></li><li>在过滤器的形参中，可以获取到“管道符”前面待处理的那个值</li><li>如果全局过滤器和私有过滤器名字一致，此时按照“<strong>就近原则</strong>”，调用的是”私有过滤器“</li></ol></blockquote><h2 id="品牌列表案例优化"><a href="#品牌列表案例优化" class="headerlink" title="品牌列表案例优化"></a>品牌列表案例优化</h2><p>我们可以写一个过滤器把《品牌列表案例》中的时间进行格式化</p><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.time | dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明格式化时间的全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;dateFormat&#x27;</span>, <span class="keyword">function</span> (<span class="params">time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 对 time 进行格式化处理，得到 YYYY-MM-DD HH:mm:ss</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 把 格式化的结果，return 出去</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接调用 dayjs() 得到的是当前时间</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// dayjs(给定的日期时间) 得到指定的日期</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> dtStr = <span class="title function_">dayjs</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> dtStr</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203312039448.png"  style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>        </div>    </div></div><h2 id="过滤器的一些其他事项"><a href="#过滤器的一些其他事项" class="headerlink" title="过滤器的一些其他事项"></a>过滤器的一些其他事项</h2><h3 id="连续调用过滤器"><a href="#连续调用过滤器" class="headerlink" title="连续调用过滤器"></a>连续调用过滤器</h3><p>过滤器可以串联起来进行调用，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把 message 的值交给 filterA 处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把 filterA处理后的值交给 filterB 处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把 filterB处理后的值渲染在页面中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; message | filterA | filterB &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器调用传参"><a href="#过滤器调用传参" class="headerlink" title="过滤器调用传参"></a>过滤器调用传参</h3><p>过滤器本质是一个Javascript的函数，因此可以接受参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- arg1和arg2 是传递给 filterA的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message | filterA(arg1,arg2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//过滤器处理函数的形参列表中：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一个参数：永远都是 &quot;|&quot; 前面待处理的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从第二个参数开始，才是通过管道过滤器传递过来的 arg1 和 arg2 参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="function">(<span class="params">msg,arg1,arg2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//代码处理</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基本用法</title>
      <link href="/2022/03/30/vue%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2022/03/30/vue%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Chrome-vue-调试工具"><a href="#安装-Chrome-vue-调试工具" class="headerlink" title="安装 Chrome vue 调试工具"></a>安装 Chrome vue 调试工具</h1><p>打开谷歌应用商店搜索 <code>Vue.js devtools</code> 并添加至 Chrome</p><p>在谷歌浏览器扩展程序页面找到刚才添加的扩展程序，点击详情</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302022419.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>在下面找到 <code>允许访问文件网址</code> 打开这个设置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302024071.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>在渲染vue页面的时候，打开控制台，可以看到vue选项，就可以开始使用 <code>Vue.js devtools</code> 了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302141121.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><hr><h1 id="什么是Vue？"><a href="#什么是Vue？" class="headerlink" title="什么是Vue？"></a>什么是Vue？</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vue是构建用户界面的框架</p><p>学习vue，就是在学习vue框架中规定的用法，框架是一套现成的解决方案，程序员只能遵守框架的规范去编写自己的功能。我们需要学习vue的指令，组件，路由，Vuex，vue组件库等</p><h2 id="Vue特性"><a href="#Vue特性" class="headerlink" title="Vue特性"></a>Vue特性</h2><ol><li><p>数据驱动视图</p><p>vue会监听数据的变化，从而自动重新渲染页面的结构</p><p>数据驱动视图是单向的数据绑定</p></li><li><p>双向数据绑定</p><p>js数据的变换会被自动渲染到页面</p><p>页面表单变化后不需要手动操作DOM，就可以获取表单的值</p></li><li><p>MVVM</p><p>Model：表示当前页面渲染所依赖的数据源</p><p>View：表示当前页面所渲染的DOM结构</p><p>ViewModel：表示vue的实例，他是MVVM的核心</p><p>data中的所有属性，最后都出现在了vm上</p><p>vm上所有属性，以及Vue原型上的所有属性在Vue模板中都可以直接使用。</p></li></ol><hr><h1 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们可以去vue官网下载vue.js 文件，并在 <code>script</code> 标签中导入使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        1.想让vue工作，就必须创建一个vue实例，传入一个配置对象</span></span><br><span class="line"><span class="comment">        2.root 容器里的代码依然符合html规范，只不过混入了一些特殊的vue语法</span></span><br><span class="line"><span class="comment">        3.root容器里的代码称为 【vue 模板】</span></span><br><span class="line"><span class="comment">        4.vue实例和容器是一一对应的</span></span><br><span class="line"><span class="comment">        5.真实开发中只有一个vue实例，并且会配合组件一起使用</span></span><br><span class="line"><span class="comment">        6.&#123;&#123;xxx&#125;&#125; 中的xxxx 要写js表达式且xxx可以自动读取到data中的所有属性</span></span><br><span class="line"><span class="comment">        7.一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1+2的结果是&#123;&#123;1+2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125; 反转后是：&#123;&#123;name.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  导入vue的库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止Vue的生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例，传入配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//el 用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data中存储数据，数据供el所指定的容器去使用，值可以是对象也可以是函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;张三是我呀&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><p>指令是vue为开发者提供的<strong>模板语法</strong>，用于辅助开发者渲染页面的基本结构u</p><h3 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h3><p>常见的内容渲染指令有</p><blockquote><p><code>v-text</code>：指令会覆盖元素内部的原有内容</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ptext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用v-text, 属性值为要渲染的数据的键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text会把原来的内容覆盖掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ptext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;.ptext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p v-text="username">yjr1100</p>            <p v-text="gender">你猜</p>        </div>    </div></div><blockquote><p><code>&#123;&#123;&#125;&#125;</code> 插值表达式：只是内容的占位符，不会覆盖原有内容 </p><p>只能用在内容节点，不可以用在属性节点，在插值表达式中还可以进行javascript的操作，如调用函数，加减运算，字符串拼接等</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chazhitext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 插值语法： Mustache</span></span><br><span class="line"><span class="comment">    功能：用于解析标签体内容</span></span><br><span class="line"><span class="comment">    写法：&#123;&#123;xxxx&#125;&#125; xxxx是js表达式，可以直接读取到data中的所有属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> chazhitext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#chazhitext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p>姓名：yjr1100</p>            <p>性别：你猜</p>        </div>    </div></div><blockquote><p><code>v-html</code>：把带有标签的字符串，渲染为html标签</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;htmltext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    使用v-html 可以将标签渲染成html标签，上面两个只能渲染成文本内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> htmltext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#htmltext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">info</span>:<span class="string">&#x27;&lt;h4 style=&quot;color:red;font-weight:bold;&quot;&gt;我是yjr1100&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">&lt;/scrip&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p style="color:red;font-weight:bold;">我是yjr1100</p>        </div>    </div></div><h3 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h3><blockquote><p>功能：用于解析标签(包括：标签属性，标签体内容，绑定事件。。。)</p><p>例子：<code>v-bind:placeholder=&quot;xxx&quot;</code> 或简写 <code>:placeholder=&quot;xxx&quot;</code>,xxx同样js表达式， 可以读取到data中的数据</p><p>备注：Vue中有很多的指令，且形式都是v-？？？，此处拿<code>v-bind</code>举例子</p><p>如果绑定的内容需要动态拼接，则字符串外面需要用单引号包裹，比如：<br><code>&lt;div :title=&quot;&#39;box&#39;+index&quot;&gt;我的title动态计算出是 box3&lt;/div&gt;</code></p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    功能：用于解析标签(包括：标签属性，标签体内容，绑定事件。。。)</span></span><br><span class="line"><span class="comment">    例子：v-bind:placeholder=&quot;xxx&quot; 或简写 :placeholder=&quot;xxx&quot;,xxx同样js表达式， 可以读取到data中的数据</span></span><br><span class="line"><span class="comment">    备注：Vue中有很多的指令，且形式都是v-？？？，此处我们只是拿v-bind举例子</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;tips&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;poto&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27;+index&quot;</span>&gt;</span>我的title动态计算出是 box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">index</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tips</span>:<span class="string">&quot;请输入用户名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">poto</span>:<span class="string">&quot;https://cn.vuejs.org/images/logo.svg&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <input type="text" placeholder="请输入用户名">        <img src="https://cn.vuejs.org/images/logo.svg" alt="" style="width:80px">        <div title="box3">我的title动态计算出是 box3</div>    </div></div><h3 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h3><blockquote><p>v-on 事件绑定</p><p>辅助DOM元素的绑定事件监听</p><p>v-on:click &#x3D; “xxxx” xxxx是事件处理函数的名字 ,可以<code>v-on:</code>简写为 <code>@</code></p><p>下面实现给按钮绑定一个事件，点击后 count+1</p><p>在绑定事件后，可以在小括号中进行传参</p></blockquote><div class="yjr_wrap" >    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件绑定 </span></span><br><span class="line"><span class="comment">    v-on 事件绑定</span></span><br><span class="line"><span class="comment">    辅助DOM元素的绑定事件监听</span></span><br><span class="line"><span class="comment">    v-on:click = &quot;xxxx&quot; xxxx是事件处理函数的名字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值是：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;add(2)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#fff&quot;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;sub&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#fff&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> +=a;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> -=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true" >        <p id="resultp">count的值是：1</p>        <button id="addbtn" style="background-color:#fff">+2</button>        <button id="subbtn" style="background-color:#fff">-1</button>    </div></div><script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script><script>    var count = 1;    let resultp = document.querySelector;    $("#addbtn").click(function(){        count = count +2;        $('#resultp').text("count的值是："+count);    })    $("#subbtn").click(function(){        count = count -1;        $('#resultp').text("count的值是："+count);    })</script><p><strong>事件绑定对象</strong></p><blockquote><p>在我们没有给绑定函数传参时，默认有一个事件对象e,如果事件传参了，那么事件对象e就会被覆盖</p><p>想要再次获取到事件对象e，vue 提供了内置变量，名字叫做<code>$event</code>，就是原生对象</p><p>我们如果传参后还想拿到事件对象，那么我们需要把 <code>$event</code> 传入函数中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件对象$event</span></span><br><span class="line"><span class="comment">    vue 提供了内置变量，名字叫做$event，就是原生对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值是：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;add(1,$event)&quot;</span>&gt;</span>+N<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params">n,e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> +=n;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 判断count是奇数还是偶数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">count</span>%<span class="number">2</span>===<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27; &#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>事件修饰符</strong></p><blockquote><p>当我们点击a链接的时候，默认会发生网页的跳转</p><p>如果我们想要阻止默认行为，除了使用 <code>event.stopPropagation()</code> 和 <code>event.preventDefault()</code> 我们就可以使用 <code>vue</code> 的事件修饰符，把修饰符通过 <code>.</code> 夹在绑定事件的后面，方便对事件出发的控制</p><p>常用事件修饰符：<br>  <code>.prevent</code> 阻止默认行为<br>  <code>.stop</code> 阻止事件冒泡<br>  <code>.capture</code> 以捕获模式触发当前的事件处理函数<br>  <code>.once</code> 绑定的事件只触发1次<br>  <code>.self</code> 只有当 event.target 是当前元素自身时出发事件处理函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;show&quot;</span>&gt;</span>跳转到百度首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;点击了a连接&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h3><blockquote><p>vue 中有2种数据绑定的方式：</p><ol><li><p>单向绑定（<code>v-bind</code>）：数据只能从data流向页面。</p></li><li><p>双向绑定（<code>v-model</code>）：数据不仅能从data流向页面，还可以从页面流向data<br> <code>v-model</code> 只能用于表单类元素的数据双向绑定，<code>v-model</code> 默认收集的就是value值。可以简写</p></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 双向数据绑定</span></span><br><span class="line"><span class="comment">        vue 中有2种数据绑定的方式：</span></span><br><span class="line"><span class="comment">            1.单向绑定（v-bind）：数据只能从data流向页面。</span></span><br><span class="line"><span class="comment">            2.双向绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data</span></span><br><span class="line"><span class="comment">                v-model 只能用于表单类元素的数据双向绑定，v-model 默认收集的就是value值。可以直接简写为v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    单向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    双向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>= <span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>长沙<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-model</code> 有一些特定的修饰符，来方便对用户输入的内容进行处理</p><p><code>.number</code> 将用户输入的值转为数值类型</p><p><code>.trim</code> 将用户输入的首位空白字符过滤掉</p><p><code>.lazy</code> 在“change”时而不是“input”的时候进行数据更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>+<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n2&quot;</span>&gt;</span> = <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;n1+n2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy.trim</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>控制台显示用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n1</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n2</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`用户名是：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h3><p>条件渲染用来帮助开发者按照控制需求来控制DOM元素的隐藏和显示</p><blockquote><p><code>v-if</code> :每次会动态的移除和添加元素</p><p><code>v-show</code> :通过display属性来控制元素隐藏和显示</p><p>如果要频繁的显示和隐藏，<code>v-show</code> 的性能好一些，如果刚进入页面某些元素不需要展示并且后期也可能不需要展示使用 <code>v-if</code> </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果flag为true就显示为false就隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果flag为false就显示为true就隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;!flag&quot;</span>&gt;</span>v-show的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果flag为true就显示为false就隐藏</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>和 <code>v-if</code> 配套使用的还有 <code>v-else-if</code> 和 <code>v-else</code></p></blockquote><h3 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h3><p>对于数字和对象这样的数据,需要创建重复的页面结构，我们一般使用列表渲染指令来减少代码的书写</p><blockquote><p>列表数据需要在什么标签进行渲染，就把 <code>v-for</code> 写在哪个标签上</p><p>官方建议，只要使用到了<code>v-for</code>命令，那么一定绑定一个 <code>:key</code> 属性</p><p>而且尽量把 <code>id</code> 作为 <code>key</code> 的值,使用 <code>index</code> 的值当作 <code>key</code> 没有意义</p><p>官方对 <code>key</code> 的值的类型要求只能是：字符串或者数字</p><p><code>key</code> 的值必须是唯一的，不可重复</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>索引<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&quot;yjr1100&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;1234566&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&quot;yjrfirst&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;178984566&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&quot;yjrblog&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;1756789566&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><blockquote><p>按键修饰符在触发特定的按键时使用,下面使用<code>esc</code>，<code>enter</code>，<code>a</code> 的按键修饰符进行演示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clearinput&quot;</span> @<span class="attr">keyup.enter</span> = <span class="string">&quot;commitAjax&quot;</span> @<span class="attr">keyup.a</span>=<span class="string">&quot;aisin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clearinput</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">commitAjax</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了ajax方法&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aisin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aisin&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一个小案例"><a href="#一个小案例" class="headerlink" title="一个小案例"></a>一个小案例</h1><p>案例来自黑马程序员《品牌列表案例》</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203311944675.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>品牌列表案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    user-select: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -ms-flexbox;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-clip</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.125</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">0.25rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card-body</span> &#123;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">1.25rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card-header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0.75rem</span> <span class="number">1.25rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.125</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mb-2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-row</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -ms-flexbox;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.col-auto</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 卡片区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">        添加品牌</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加品牌的表单区域 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- form 表单元素有 submit 事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-row align-items-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌名称&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary mb-2&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-control custom-switch&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 使用 v-model 实现双向数据绑定 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-input&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.status&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 使用 v-if 结合 v-else 实现按需渲染 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.status&quot;</span>&gt;</span>已启用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-else</span>&gt;</span>已禁用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用户输入的品牌名称</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">brand</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// nextId 是下一个，可用的 id</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">nextId</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 品牌的列表数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;宝马&#x27;</span>, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;奥迪&#x27;</span>, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击链接，删除对应的品牌信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">remove</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止表单的默认提交行为之后，触发 add 方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果判断到 brand 的值为空字符串，则 return 出去</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">brand</span> === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;必须填写品牌名称！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果没有被 return 出去，应该执行添加的逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1. 先把要添加的品牌对象，整理出来</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">nextId</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">brand</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">status</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2. 往 this.list 数组中 push 步骤 1 中得到的对象</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(obj)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 3. 清空 this.brand；让 this.nextId 自增 +1</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">nextId</span>++</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客折腾记录</title>
      <link href="/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><hr><p>在一开始我是在CSDN上写博客，记录一些学习过程，由于每次写完 markdown 再发布的过程比较麻烦，又不想花大价钱租服务器，所以暂时想到了是使用 github page 来做个人博客，进行学习过程的记录</p><h1 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h1><hr><h2 id="有一个github账号"><a href="#有一个github账号" class="headerlink" title="有一个github账号"></a>有一个github账号</h2><p>这方面的相关博客和教程比较多，这里就不再过多赘述了，其实一步一步来就可以</p><p>放一个官网链接 <a href="https://github.com/">github传送门</a></p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290838195.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290839586.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>上面两种方式都可以进入仓库创建界面，进入后显示如下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290846639.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>这里需要注意，仓库的名字必须是 XXX.github.io , 其中XXX 要和你前面的用户名相同，仓库的discription 自己想写什么就写什么，就的对仓库的一个描述，最后点击 Create repository 就可以了</p><hr><h2 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h2><div style="display:flex;"><img style="margin:0 5px 0 25px;" alt="os " src="https://img.shields.io/badge/System-windows10-orange"/><img style="margin-right:5px;" alt="node version" src="https://img.shields.io/badge/node-v14.18.1-green"/><img style="margin-right:5px;" alt="npm version" src="https://img.shields.io/badge/npm-v6.14.15-green"/><img style="margin-right:5px;" alt="hexo version" src="https://img.shields.io/badge/hexo-v6.1.0-blue"/></div><h3 id="安装git工具"><a href="#安装git工具" class="headerlink" title="安装git工具"></a>安装git工具</h3><p><a href="https://git-scm.com/"><img src="https://git-scm.com/images/logo@2x.png" alt="git官网"></a></p><p>点击上方 logol 传送去git官网，选择和系统相符的git版本进行下载安装，安装过程中想改安装位置的可以改一下，其他的一直下一步就好了</p><p>如果</p><p>安装好后，我们右键可以看到 git bash 和 git gui 就已经安装好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290944249.png" style="box-shadow: 5px 5px 10px #9da0de;margin:15px auto;"/><p>对于git的使用和安装可以看 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师的官网</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>这里我推荐使用 nvm 来管理 node 的版本,因为在我做项目过程中，可能需要维护别人的老项目，所以node版本经常不匹配，使用 nvm 进行node 版本的管理，可用方便的切换不同版本的 node 。</p><p>windows的话，可以在<a href="https://github.com/coreybutler/nvm-windows/releases">github上下载nvm</a> 打开我们可以看到两个版本</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290935478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>nvm的具体安装和使用<a href="https://www.jianshu.com/p/96f9317db0b5">简书Do_Du</a>有详细的步骤，可以进行参考</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><a href="https://hexo.io/zh-cn/"><img src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg#small" style="heigth:100px;width:100px;margin:15px auto;"/></a></p><p>点击上方 logo 可以去官网了解更多Hexo的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>复制上面这句代码，在一个没有中文的路径下新建一个文件夹做为博客的目录</p><p>进入文件夹中，右键 git bash here,并粘贴代码回车运行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291502604.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到updated 1 package 就安装好了</p><hr><h2 id="初始化和本地博客的搭建"><a href="#初始化和本地博客的搭建" class="headerlink" title="初始化和本地博客的搭建"></a>初始化和本地博客的搭建</h2><h3 id="初始化本地博客"><a href="#初始化本地博客" class="headerlink" title="初始化本地博客"></a>初始化本地博客</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>在刚才初始化的窗口分别键入上面两句代码，对本地博客进行初始化</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291512237.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>当看到图中的信息后，你的本地博客就初始化完成了，可以进入刚才博客的文件夹（这里我的文件夹名字是blog），发现多了很多文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog/</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>使用上面第一条命令进入文件夹内，<code>blog</code>需要替换为自己的文件夹名称</p><p>进入后使用第二条命令进行依赖的安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291518460.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到如上图信息就安装成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在博客的根目录下（即刚才博客的文件夹下）输入上面的命令，启动博客</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291523547.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>可以看到如图的输出信息，我们可以在 localhost:4000去看一下我们博客现在的样子,大概就是下面这样</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291524034.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>停止运行我们只需要输入 Ctrl+C 就可以了</p><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p><strong>如果不是第一次使用git可以跳过这一步</strong></p><p>在刚才的git bash 中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示 <code>No such file or directory </code> 说明你是第一次使用git</p><p>先配置使用git人的身份，在git bash 中分别输入下面两个命令，<code>用户名</code> 用github的用户名就好 <code>邮箱</code> 也使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;这里换上你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>再进行git的ssh配置,同样 <code>邮箱</code> 使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>命令执行后需要进行三次确认，按回车就完了</p><p>命令执行完成后，在用户目录(就的c盘下User里你用户名的目录)的 <code>.ssh目录</code> 下会生成2个名为id_rsa和id_rsa.pub的文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291539979.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>打开github 点击右上角你的头像，进入settings</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543730.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>选择 SSH and GPG keys</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543087.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>点击<code>New SSH key</code>，并把之前生成的<code>id_rsa.pub</code>文件，用记事本打开，将内容复制到<code>key</code>下的文本框,title的话自己随便写一个自己明白的就好，最后点击 <code>Add SSH key</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291546856.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>回到git bash 输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291548466.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到 access 就成功了，如果是第一次，可能需要确认一下，输入yes后回车，就会提示成功</p><h3 id="安装deployer插件"><a href="#安装deployer插件" class="headerlink" title="安装deployer插件"></a>安装deployer插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在博客文件夹目录下，的git bash中输入上面的命令进行安装</p><h3 id="发布博客到-github-io"><a href="#发布博客到-github-io" class="headerlink" title="发布博客到 github.io"></a>发布博客到 github.io</h3><p>想要发布博客到XXX.github.io 首先要让hexo 知道你的github位置，进入本地博客根目录修改一些配置，在博客的文件夹下打开<code>_config.yml</code> 开始编辑</p><ol><li><p>修改url:</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291556245.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>修改deploy,注意红标的地方写自己的github名称，branch默认的话现在是<code>main</code>，之前好多博客中写的是<code>master</code>这是之前的分支名称，如果没有改过，那么就是<code>main</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291559182.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><p>修改配置后，在git bash 中分别输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待命令执行完成，就发布成功了，可以打开你的地址进行查看<code>https://XXX.github.io</code> 这里XXX 就是你的用户名，比如我的 <a href="https://yjr-1100.github.io/">https://yjr-1100.github.io</a></p><hr><h2 id="配置好看的主题，并写博客"><a href="#配置好看的主题，并写博客" class="headerlink" title="配置好看的主题，并写博客"></a>配置好看的主题，并写博客</h2><p>又到了最麻烦和最开心的时刻，配置好看的主题让你的博客变的独一无二吧</p><h3 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h3><p>你可以在 <a href="https://hexo.io/themes/">hexo的主题库</a> 中找到自己喜欢的主题，这里我用的是 <a href="https://butterfly.js.org/"><code>butterfly</code> 主题 </a></p><p>打开主题的主页，里面其实有很多详细的教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>在你的博客根目录下执行上面的代码，下载主题</p><p>为了使这个主题可用，我们还需要安装几个插件，再博客的根目录下运行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="配置butterfly主题"><a href="#配置butterfly主题" class="headerlink" title="配置butterfly主题"></a>配置butterfly主题</h3><p><strong>注意在进行下面配置过程中随时执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 来确保没有出错，并且注意<code>:</code> 后面都会有空格，如果报错即时检查</strong></p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><p>我们需要继续配置 <code>_config.yml</code> 文件来应用我们的主题，在<code>_config.yml</code> 文件中找到 <code>theme</code> 填写我们主题的名字</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291613160.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>并且在博客文件夹根目录下新建一个<code>_config.butterfly.yml</code> 的文件，将主题的配置文件复制进去，目前这个版本的主题配置文件在 <code>/themes/butterfly/_config.yml</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291620320.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><h4 id="创建几个页面"><a href="#创建几个页面" class="headerlink" title="创建几个页面"></a>创建几个页面</h4><p>这里我只创建了几个目前我需要的，可以根据主题官方的说明进行其他的配置</p><ol><li><p>标签页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;tags&#x2F;index.md 的头部添加 <code>type: &quot;tags&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291657267.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code> 就是页面中间显示的内容，自己根据喜好写就好</p><p> <code>top_img</code> 就是页面顶部的背景图片</p></li><li><p>分类页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;categories&#x2F;index.md 的头部添加 <code>type: &quot;categories&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700318.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> <p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>友情链接页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;link&#x2F;index.md 的头部添加 <code>type: &quot;link&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700366.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p><p> 对于友情链接的设置我们需要在 <code>source</code> 目录下新建一个<code>_data</code> 文件夹，并创建一个 <code>link.yml</code> ，按照下面的内容进行修改</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">没问题，就是学习</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery之家</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">http://www.htmleaf.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/jqueryhome.jpg</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">自由分享jQuery、html5和css3的插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery插件库</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.jq22.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://www.jq22.com/img/logo.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">jquery插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AcWing</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.acwing.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.acwing.com/media/activity/surface/logo100x100.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">算法刷题</span></span><br></pre></td></tr></table></figure></li><li><p>关于我页面</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;about&#x2F;index.md 的头部添加 <code>type: &quot;about&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291705857.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>404页面</p><p> 主题内部内置了一个404，我们只需要打开就好，进入<code>_config.butterfly.yml</code> 找到下面的设置，把 <code>enable</code> 改为 <code>true</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291719404.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><h4 id="修改浏览器标签栏Icon"><a href="#修改浏览器标签栏Icon" class="headerlink" title="修改浏览器标签栏Icon"></a>修改浏览器标签栏Icon</h4><p>在themes&#x2F;butterfly&#x2F;source&#x2F;img&#x2F; 文件夹下，放一个自己的icon ，在 <code>_config.butterfly.yml</code> 文件中，找到 <code>favicon</code> 进行编辑，改为自己图片的路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br></pre></td></tr></table></figure><h4 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>menu</code> 进行编辑</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">链接||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h4 id="设置主页的头部图片和背景图片"><a href="#设置主页的头部图片和背景图片" class="headerlink" title="设置主页的头部图片和背景图片"></a>设置主页的头部图片和背景图片</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>index_img</code> 和 archive_img ，在后面写上图片的url,其他的有兴趣也可以设置,找到<code>background</code> 在后面写上背景图片的url</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291726233.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/bizhi3.jpg)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置页脚开启页脚背景"><a href="#设置页脚开启页脚背景" class="headerlink" title="设置页脚开启页脚背景"></a>设置页脚开启页脚背景</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>footer</code> 修改 <code>enable</code> 为 <code>true</code>，找到 <code>footer_bg</code> 修改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">这里可以加一些自己的话</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="开启页面美化"><a href="#开启页面美化" class="headerlink" title="开启页面美化"></a>开启页面美化</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>beautify</code> 修改 <code>enable</code> 为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="comment"># &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="comment"># &#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置首页动态打字效果"><a href="#设置首页动态打字效果" class="headerlink" title="设置首页动态打字效果"></a>设置首页动态打字效果</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>subtitle</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>sub</code> 下写自己的想打的句子</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">人生没有白走的路，弯路也算数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">总有一天，你会渐渐活出写满答案的人生</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">今天不想跑，所以才去跑，这才是长距离跑者的思维方式</span></span><br></pre></td></tr></table></figure><h4 id="修改侧边栏"><a href="#修改侧边栏" class="headerlink" title="修改侧边栏"></a>修改侧边栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>aside</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>card_announcement</code> 下修改公告内容，在 <code>card_author</code> 下修改自己的Github链接，找到 <code>busuanzi</code> 打开访问人数 ，找到 <code>runtimeshow</code> 打开网页运行时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Follow Me</span><br><span class="line">      link: https://github.com/yjr-1100</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 总要记些什么证明我来过</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    # sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"></span><br><span class="line"># busuanzi count for PV / UV in site</span><br><span class="line"># 訪問人數</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (網頁運行時間)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 3/28/2022 00:00:00</span><br></pre></td></tr></table></figure><h4 id="设置社交账号"><a href="#设置社交账号" class="headerlink" title="设置社交账号"></a>设置社交账号</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>social</code> 修改,冒号前面的是图标，使用的图标库是  <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>,冒号后边是网址和名称</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/yjr-1100</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:jiaruiyang221@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h4 id="开启繁简体切换和阅读模式"><a href="#开启繁简体切换和阅读模式" class="headerlink" title="开启繁简体切换和阅读模式"></a>开启繁简体切换和阅读模式</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>translate</code> 修改 <code>enable</code> 为 <code>true</code> ，找到 <code>readmode</code> 修改为 <code>true</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Mode (阅读模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="写文章和发布博客"><a href="#写文章和发布博客" class="headerlink" title="写文章和发布博客"></a>写文章和发布博客</h3><p>配置好后，再运行下面三个命令，打开本地博客看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>当我们需要写博客的时候，我们可以使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文章名</span><br></pre></td></tr></table></figure><p>来创建一个文件，改文件的位置就在 <code>/source/_posts</code> 下，我们可以打开新建好的 <code>.md</code> 文件进行编辑。</p><p><code>hexo new post</code> 命令使用的就是post模板，可以在<code>/scaffolds</code> 文件夹下找到改模板，我们可以编辑模板的头部，方便以后生成。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/background_</span>4k.jpg</span><br><span class="line"><span class="section">cover:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><p><code>tags</code> 用来写新增文章的标签</p></blockquote><blockquote><p><code>categories</code> 指明文章的分类，这个指明后会自动在分类页面被归类</p></blockquote><blockquote><p><code>description</code> 描述本篇文章，类似摘要</p></blockquote><blockquote><p><code>top_img</code> 指定文章头部的图片</p></blockquote><blockquote><p><code>cover</code> 指定文章在首页展示时的缩略图</p></blockquote><blockquote><p><code>keywords</code> 就是页面关键字</p></blockquote><p>我们写好后，就可以在本地博客看到新写的博客了，再次执行下面的命令，就可以发布到github.io 中了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="一些其他的设置"><a href="#一些其他的设置" class="headerlink" title="一些其他的设置"></a>一些其他的设置</h2><h3 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h3><ol><li><p>购买一个域名 可以去<a href="https://wanwang.aliyun.com/domain/tld?spm=5176.22941746.J_2447957890.22.4989a5f6oZeH4j#.com">阿里云</a> 进行域名注册</p></li><li><p>为域名设置解析 拿阿里云为例，进入控制台，选择域名解析</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292049998.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>添加CNMA解析，我这里添加的是二级域名，</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292053416.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> </li><li><p>在xxx.github.io的仓库中新建文件名为<code>CNAME</code>，写入你刚才解析的域名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292101397.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>在仓库的 <code>settings</code> 里找到 <code>pages</code> 进行设置，下面的那个对勾需要等一会才能勾选</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292104475.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>等一会就可以使用这个域名进行访问了，比如我可以通过 <code>https://yjr1100blog.jerryfirst.top/</code> 进行博客的访问</p></li><li><p>使用<code>hexo d</code> 的时候一般会把这个CNAME文件覆盖掉，所以我们可以在本地的<code>source</code>文件夹下创建一个<code>CNAME</code>文件把刚才的内容写进去，这样在进行<code>hexo d</code> 的时候，就也会同时进行上传</p></li></ol><h3 id="进行文件更替"><a href="#进行文件更替" class="headerlink" title="进行文件更替"></a>进行文件更替</h3><p>我们xxxx.github.io仓库里的文件只有 <code>hexo g</code> <code>hexo d</code>后的内容，没有源文件，加入我们电脑坏了，数据丢了，我们的博客就没了，所以我们建一个私有仓库进行我们原文件的更替</p><ol><li><p>在github 中建立一个私有仓库</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292228483.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>在博客文件夹下创建 <code>.gitignore</code> 文件，内容入下</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure></li><li><p>在博客的文件夹下 执行 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p> 如果执行 <code>git add .</code> 提示</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hint: You&#x27;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the     contents of</span><br><span class="line">hint: the embedded repository and will not know how to    obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes/butterfly</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it    from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes/butterfly</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 这个意思因为 <code>themes/butterfly/</code> 下也有一个 <code>.git</code> 文件夹 ,git 认为 <code>themes/butterfly</code> 是子仓库，但是对于子仓库还需要配置其他东西才可以进行 add 所以有了这个提示</p><p> 如果想要提交 <code>themes/butterfly</code> 中的内容，那我们可以选择删了 <code>themes/butterfly</code> 下的 <code>.git</code> 文件，并执行<code> git rm -f --cached themes/butterfly</code> 先删了add 里的这个文件，再添加一次</p></li><li><p>添加好后，依次执行下面的命令，完成源文件上传,其中<code>git@github.com:yjr-1100/blogdata.git</code> 要改成自己仓库的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:yjr-1100/blogdata.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p>以后我们改完文件执行进行提交就好了</p></li></ol><h2 id="其它一些注意事项"><a href="#其它一些注意事项" class="headerlink" title="其它一些注意事项"></a>其它一些注意事项</h2><h3 id="github-io-没有更新的问题"><a href="#github-io-没有更新的问题" class="headerlink" title="github.io 没有更新的问题"></a>github.io 没有更新的问题</h3><p>如果<code>git bash</code> 中执行 <code>hexo d</code> 没有报错，仓库里的东西也更新了，但是你的xxx.github.io 却没有立刻得到更新，请耐心等一等，也可能github pages还在deploy</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292117345.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/>]]></content>
      
      
      <categories>
          
          <category> bolg折腾踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h1><p>webpack是前端工程化的具体解决方案。</p><p>主要功能：提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端javaScript的兼容性、性能优化等强大的功能</p><hr><h1 id="快速使用-webpack"><a href="#快速使用-webpack" class="headerlink" title="快速使用 webpack"></a>快速使用 webpack</h1><ol><li><p>新建项目空目录，运行 npm init -y 命令，初始化包管理配置文件 package.json</p></li><li><p>新建src源码目录</p></li><li><p>新建src-index.html 首页文件 和 src-&gt;index.js脚本文件</p></li><li><p>初始化首页基本的结构</p></li><li><p>运行npm install jquery -S 安装 jQuery 这个命令执行后，会把这个包和对应的版本记录到 <code>package.json</code> 中的 <code>dependencies</code> 节点下</p></li></ol><p>在上面的五个步骤结束后，会产生下面这样的目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">     |- node_modules</span><br><span class="line">     |- src</span><br><span class="line">         |- index.js</span><br><span class="line">         |- index.html</span><br><span class="line">     |- package-lock.json</span><br><span class="line">     |- package.json</span><br></pre></td></tr></table></figure><p>我们在 <code>index.html</code> 和 <code>index.js</code> 中写一些代码,使用ES6高级语法，去尝试一下webpack</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 1 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 2 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 3 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 4 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 5 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 6 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 7 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 8 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 9 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用ES6 导入 jQuery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义jQuery的入口函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 3. 实现奇数行变色</span></span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接用浏览器打开，运行报错，因为ES6的import高级语法不兼容</p><p><strong>下面需要使用webpack来解决它</strong></p><p><strong>1. 安装:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@5.42.1 webpack-cli@4.9.1 -D</span><br></pre></td></tr></table></figure><p>​运行上面的命令后，在 <code>package.json</code> 中 <code>devDependencies</code> 记录这两个包 <code>devDependencies</code> 中的包只在开发中有用</p><p><strong>2. 配置:</strong></p><ol><li><p>在项目根目录中，创建名为 <code>webpack.config.js</code> 的 webpack 配置文件，并初始化如下配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">// mode 用来指定构建模式，可选值为development 和 production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>package.json</code> 的<code>scripts</code>节点下，新增dev脚本如下：</p><p> script 节点下的脚本，通过<code>npm run</code> 执行，比如 <code>npm run dev</code> 注意不要在 <code>package.json</code> 中写注释</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">&quot;dev&quot;:&quot;webpack&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在终端执行 <code>npm run dev</code> 进行打包</p><p> 打包后，会在项目根目录下生成一个dist文件夹，在dist文件夹下生成一个 <code>main.js</code>,此时的目录结构如下</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">    |- dist</span><br><span class="line">        |- main.js</span><br><span class="line">    |- node_modules</span><br><span class="line">    |- src</span><br><span class="line">        |- index.js</span><br><span class="line">        |- index.html</span><br><span class="line">    |- package-lock.json</span><br><span class="line">    |- package.json</span><br><span class="line">    |- webpack.config.js</span><br></pre></td></tr></table></figure><p> 我们在 <code>index.html</code> 中引入 <code>main.js</code> </p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时再用浏览器打开，就可以看到隔行变色的效果了</p><blockquote><p>webpack.config.js 的配置文件中，module 的 production模式会有代码压缩效果，生成时间长，但是代码体积小</p></blockquote><blockquote><p>webpack 4.x和5.x默认的打包入口文件为 <code>src-&gt;index.js</code> 默认的输出文件路径为 <code>dist-&gt; main.js</code></p></blockquote></li></ol><p>修改 <code>webpack.config.js</code> 中打包的默认约定，将下面的代码写入 <code>webpack.config.js</code> 进行输入输出文件的修改，这样输出的文件就会命名为 <code>index1.js</code> ,记得改完生成文件的路径和名称后要去html代码中修改引入的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="webpack的插件"><a href="#webpack的插件" class="headerlink" title="webpack的插件"></a>webpack的插件</h1><p>在体会了webpack的使用后，我们还需要了解一些让webpack用起来更加方便的插件</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>每次我们修改完代码，想要在浏览器中产看效果前，都需要进行打包，很不方便</p><p>这个插件就是达到一个每当修改了源代码，就会自动进行项目打包的目的</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行下面的命令后，将 <code>webpack-dev-server</code> 安装在 <code>devDependencies</code> 节点下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server@3.11.2 -D</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>修改 <code>package.json-&gt;scripts</code> 中的dev命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack server&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>再次运行npm run dev 命令进行项目打包</p></li></ol><p>在浏览器访问<a href="http://localhost:8080/">http://localhost:8080</a> 可以看到我们根目录的一个文件结构，进入src目录下，就可以看到html页面的效果了</p><p>现在我们修改js代码，会发现页面并没有自动同步变化，仔细阅读控制台提示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203301640483.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>发现插件把生成的文件放在根目录中，但是我们在文件夹中却也看不到，其实这个插件是把生成的文件放在了内存中，在浏览器访问 <code>http://localhost:8080/index1.js</code> 就可以看到 (这里是因为我之前把输出文件的名字改成了 <code>index1.js</code>)</p><p>所以想要看到最新效果，就要在html中引入根目录下的 <code>index1.js</code> （这个文件在文件夹中看不到，它在内存中，引入的代码如下所示） ,再次保存刷新，就可以在浏览器看到修改后的效果了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用的是 webpack 插件放在内存中的js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="webpack-dev-plugin"><a href="#webpack-dev-plugin" class="headerlink" title="webpack-dev-plugin"></a>webpack-dev-plugin</h2><p>我们打包完成后，还需要进入 <code>src</code> 目录下才可以看到页面，使用这个插件可以将页面复制一份，放在根目录中</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>运行下面的命令进行插件安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 中进行配置</p><ol><li><p>导入插件，得到一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建 HTML 插件的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>把实例对象挂在plugins下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 把实例对象挂在plugins下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个插件复制的文件也是在内存中的，并且还会自动在文件中注入生成的<code>js</code>文件，我们就不用手动修改引用的js文件的路径了</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><h2 id="devserver节点"><a href="#devserver节点" class="headerlink" title="devserver节点"></a>devserver节点</h2><p>在<code>webpack.config.js</code>配置文件中，可以通过 <code>devServer</code> 节点对<code>webpack-dev-server</code>插件进行更多的配置</p><p>配置每次打包完成后自动打开页面，这样我们就不需要手动去打开页面了</p><p>对webpack 的节点操作，都是在 <code>webpack.config.js</code> 的 <code>module.explort</code> 里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">open:true,//初次打包完后，自动打开浏览器</span><br><span class="line">host:&#x27;127.0.0.1&#x27;,//实时打包使用的主机地址</span><br><span class="line">port:8080,// 实时打包使用的端口号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：凡是修改了<code>webpack.config.js</code>配置文件，或者修改了<code>package.json</code>配置文件，必须重新启动打包的服务</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//实时打包使用的主机地址</span></span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="webpack-中的-loader"><a href="#webpack-中的-loader" class="headerlink" title="webpack 中的 loader"></a>webpack 中的 loader</h1><h2 id="loader概述"><a href="#loader概述" class="headerlink" title="loader概述"></a>loader概述</h2><p>在实际开发中，webpack默认只能打包处理.js 后缀结尾的模块，其他非.js 结尾的模块，webpack默认处理不了，需要调用loader加载器才可以正常打包，否则会报错</p><p>loader加载器的作用：协助webpack 打包处理待定的文件模块。比如：</p><ul><li>css-loader 可以打包.css文件</li><li>less-loader 可以打包.less文件</li><li>babel-loader 可以打包处理webpack无法处理的高级js语法</li></ul><h2 id="打包处理css文件"><a href="#打包处理css文件" class="headerlink" title="打包处理css文件"></a>打包处理css文件</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader@3.0.0 css-loader@5.2.6 -D</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>​    在 <code>webpack.config.js</code> 中的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写,从后往前执行的</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="打包处理less文件"><a href="#打包处理less文件" class="headerlink" title="打包处理less文件"></a>打包处理less文件</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@10.0.1 less@4.1.1 -D</span><br></pre></td></tr></table></figure><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p> 在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="打包处理样式表中与url路径相关的文件"><a href="#打包处理样式表中与url路径相关的文件" class="headerlink" title="打包处理样式表中与url路径相关的文件"></a>打包处理样式表中与url路径相关的文件</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; </span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>? 后面是loader的参数，limit用来指定图片大小，单位字节，只有小于等于limit大小的图片，才会被转成base64格式的图片</p><h2 id="5-打包处理js高级语法"><a href="#5-打包处理js高级语法" class="headerlink" title="5. 打包处理js高级语法"></a>5. 打包处理js高级语法</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装 <code>babel-loader</code> 相关的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 @babel/preset-env @babel/plugin-transform-runtime-D</span><br></pre></td></tr></table></figure><h3 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>exclude 用来排除第三方包中的js文件</p></blockquote><p>使用 <code>babel-loader</code> 的时候，需要定义Babel的配置项</p><p>在项目根目录下创建一个 <code>babel.config.js</code> 的配置文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 声明babel可用的插件</span></span><br><span class="line"><span class="attr">plugins</span>:[[<span class="string">&#x27;@bable/plugin-proposal-decorators&#x27;</span>,&#123;<span class="attr">legacy</span>:<span class="literal">true</span>&#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这些 loader 都配置完后，<code>webpack.config.js</code> 可能就变成了下面的样子</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//实时打包使用的主机地址</span></span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><p>我们可以在 <code>src</code> 下面新建 <code>css</code> 文件夹，和 <code>image</code> 文件夹 放入对应文件图片，并使用 ES6 语法引入后打包查看效果</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用的是webpack 插件放在内存中的js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 1 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 2 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 3 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 4 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 5 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 6 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 7 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 8 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 9 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用ES6 导入 jQuery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="comment">// 导入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 导入图片</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./images/logol.png&#x27;</span></span><br><span class="line"><span class="comment">// 给图片动态赋值</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,logo)</span><br><span class="line"><span class="comment">// 2. 定义jQuery的入口函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 3. 实现奇数行变色</span></span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js高级语法  装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="comment">// 为目标添加静态属性info</span></span><br><span class="line">    target.<span class="property">info</span> = <span class="string">&#x27;Person info&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@info</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="webpack的打包发布"><a href="#webpack的打包发布" class="headerlink" title="webpack的打包发布"></a>webpack的打包发布</h1><p>前面都是生产环境中打包测试，自己查看效果，当项目做完后，我们就需要进行打包发布，这个时候，我们还需要一些额外的配置</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在 <code>package.json</code> 文件的 <code>scripts</code> 节点下面新增build命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p><code>--mode</code> 是一个参数，用来指定webpack 的运行模式，production代表生产环境,这里 <code>--modle</code> 指定的运行模式会覆盖 <code>webpack.config.js</code> 中的定义</p></blockquote><p>在命令行运行 npm run build就好了</p><h2 id="把生成的包各类文件，放在同一个文件夹"><a href="#把生成的包各类文件，放在同一个文件夹" class="headerlink" title="把生成的包各类文件，放在同一个文件夹"></a>把生成的包各类文件，放在同一个文件夹</h2><p>为了让文件生成后不是挤在一个文件夹中，我们可以分别在 <code>webpack.config.js</code> 文件中修改下面两个地方，来让文件放在不同的文件夹中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;js/index1.js&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在 outputPath 后写的文件夹中</span></span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&amp;outputPath=images&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-自动删除上次生成的文件"><a href="#3-自动删除上次生成的文件" class="headerlink" title="3. 自动删除上次生成的文件"></a>3. 自动删除上次生成的文件</h2><p>为了防止之前生成的文件干扰我们我们需要安装 <code>clean-webpack-plugin</code> 插件</p><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 文件和 <code>plugins</code> 节点数组中增加下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一项插件配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>() ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><p><code>Source Map</code> 是一个信息文件，里面存储着位置信息，存着压缩后的代码的行号和原来的行号</p><p>默认报错显示压缩后的行号，调试不方便，改一下配置</p><p>在 <code>webpack.config.js</code> 中添加如下配置，保证运行时报错的行号和源代码的一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; </span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin,<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="improt路径优化"><a href="#improt路径优化" class="headerlink" title="improt路径优化"></a>improt路径优化</h1><p>我们的代码在<code>src</code> 文件夹中，每次引入文件和代码的时候，都需要使用 <code>../</code> 来进行路径查找，这样从内往外查找很不清楚，我们使用下面的配置，来优化路径查找方式</p><p>在 <code>webpack.config.js</code> 节点中添加 <code>resolve</code> 节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">    <span class="comment">// 这个配置说明@ 代表 src文件夹目录，在js中improt 可以通过@来查找路径，从外向里查找</span></span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过所有的配置，我们最后的项目结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">    |- dist</span><br><span class="line">        |- main.js</span><br><span class="line">    |- node_modules</span><br><span class="line">    |- src</span><br><span class="line">        |- css</span><br><span class="line">            |- index.css</span><br><span class="line">            |- index.less</span><br><span class="line">        |- images</span><br><span class="line">            |- logol.png</span><br><span class="line">        |- index.js</span><br><span class="line">        |- index.html</span><br><span class="line">    |- package-lock.json</span><br><span class="line">    |- package.json</span><br><span class="line">    |- webpack.config.js</span><br><span class="line">    |- bable.config.js</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YJR-1100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021-10-27 11:11:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditors</span>: YJR-1100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditTime</span>: 2022-03-30 16:14:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FilePath</span>: \vue\day1\change-rows-color\webpack.config.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * @</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> (c) 2022 by yjr-1100/CSU, All Rights Reserved. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 3. 把实例对象挂在plugins下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;js/index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin,<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//试试打包使用的主机地址</span></span><br><span class="line">        <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片在放在哪里</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&amp;outputPath=images&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            <span class="comment">// &#123;test:/\.js$/,use:&#x27;babel-loader&#x27;,exclude:/node_modules/&#125;</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="comment">//要匹配哪些文件的规则</span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>,<span class="comment">//要排除哪些目录</span></span><br><span class="line">                <span class="attr">use</span>: &#123;<span class="comment">//要使用的loader</span></span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>],<span class="comment">//presets 是一个插件的集合，在编译的时候，会根据需要加载插件</span></span><br><span class="line">                    <span class="attr">plugins</span>: [<span class="comment">//执行的顺序是从右向左，所以基础插件要放在最后</span></span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span> : <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>]</span><br><span class="line">                    ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="comment">// 这个配置说明@ 代表 src文件夹目录，在js中improt 可以通过@来查找路径，</span></span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>事实上，我们一般不用自己配置webpack ， 学习webpack是为了可以大概看懂配置，以防出现奇起怪怪的错误</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
