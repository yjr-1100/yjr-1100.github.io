<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客折腾记录</title>
      <link href="/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><hr><p>在一开始我是在CSDN上写博客，记录一些学习过程，由于每次写完 markdown 再发布的过程比较麻烦，又不想花大价钱租服务器，所以暂时想到了是使用 github page 来做个人博客，进行学习过程的记录</p><h1 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h1><hr><h2 id="有一个github账号"><a href="#有一个github账号" class="headerlink" title="有一个github账号"></a>有一个github账号</h2><p>这方面的相关博客和教程比较多，这里就不再过多赘述了，其实一步一步来就可以</p><p>放一个官网链接 <a href="https://github.com/">github传送门</a></p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290838195.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290839586.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>上面两种方式都可以进入仓库创建界面，进入后显示如下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290846639.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>这里需要注意，仓库的名字必须是 XXX.github.io , 其中XXX 要和你前面的用户名相同，仓库的discription 自己想写什么就写什么，就的对仓库的一个描述，最后点击 Create repository 就可以了</p><hr><h2 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h2><div style="display:flex;"><img style="margin:0 5px 0 25px;" alt="os " src="https://img.shields.io/badge/System-windows10-orange"/><img style="margin-right:5px;" alt="node version" src="https://img.shields.io/badge/node-v14.18.1-green"/><img style="margin-right:5px;" alt="npm version" src="https://img.shields.io/badge/npm-v6.14.15-green"/><img style="margin-right:5px;" alt="hexo version" src="https://img.shields.io/badge/hexo-v6.1.0-blue"/></div><h3 id="安装git工具"><a href="#安装git工具" class="headerlink" title="安装git工具"></a>安装git工具</h3><p><a href="https://git-scm.com/"><img src="https://git-scm.com/images/logo@2x.png" alt="git官网"></a></p><p>点击上方 logol 传送去git官网，选择和系统相符的git版本进行下载安装，安装过程中想改安装位置的可以改一下，其他的一直下一步就好了</p><p>如果</p><p>安装好后，我们右键可以看到 git bash 和 git gui 就已经安装好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290944249.png" style="box-shadow: 5px 5px 10px #9da0de;margin:15px auto;"/><p>对于git的使用和安装可以看 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师的官网</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>这里我推进使用 nvm 来管理 node 的版本,因为在我做项目过程中，可能需要维护别人的老项目，所以node版本经常不匹配，使用 nvm 进行node 版本的管理，可用方便的切换不同版本的 node 。</p><p>windows的话，可以在<a href="https://github.com/coreybutler/nvm-windows/releases">github上下载nvm</a> 打开我们可以看到两个版本</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290935478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>nvm的具体安装和使用<a href="https://www.jianshu.com/p/96f9317db0b5">简书Do_Du</a>有详细的步骤，可以进行参考</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><a href="https://hexo.io/zh-cn/"><img src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg#small" style="heigth:100px;width:100px;margin:15px auto;"/></a></p><p>点击上方 logo 可以去官网了解更多Hexo的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>复制上面这句代码，在一个没有中文的路径下新建一个文件夹做为博客的目录</p><p>进入文件夹中，右键 git bash here,并粘贴代码回车运行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291502604.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到updated 1 package 就安装好了</p><hr><h2 id="初始化和本地博客的搭建"><a href="#初始化和本地博客的搭建" class="headerlink" title="初始化和本地博客的搭建"></a>初始化和本地博客的搭建</h2><h3 id="初始化本地博客"><a href="#初始化本地博客" class="headerlink" title="初始化本地博客"></a>初始化本地博客</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>在刚才初始化的窗口分别键入上面两句代码，对本地博客进行初始化</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291512237.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>当看到图中的信息后，你的本地博客就初始化完成了，可以进入刚才博客的文件夹（这里我的文件夹名字是blog），发现多了很多文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog/</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>使用上面第一条命令进入文件夹内，<code>blog</code>需要替换为自己的文件夹名称</p><p>进入后使用第二条命令进行依赖的安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291518460.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到如上图信息就安装成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在博客的根目录下（即刚才博客的文件夹下）输入上面的命令，启动博客</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291523547.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>可以看到如图的输出信息，我们可以在 localhost:4000去看一下我们博客现在的样子,大概就是下面这样</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291524034.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>停止运行我们只需要输入 Ctrl+C 就可以了</p><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p><strong>如果不是第一次使用git可以跳过这一步</strong></p><p>在刚才的git bash 中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示 <code>No such file or directory </code> 说明你是第一次使用git</p><p>先配置使用git人的身份，在git bash 中分别输入下面两个命令，<code>用户名</code> 用github的用户名就好 <code>邮箱</code> 也使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;这里换上你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>再进行git的ssh配置,同样 <code>邮箱</code> 使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>命令执行后需要进行三次确认，按回车就完了</p><p>命令执行完成后，在用户目录(就的c盘下User里你用户名的目录)的 <code>.ssh目录</code> 下会生成2个名为id_rsa和id_rsa.pub的文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291539979.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>打开github 点击右上角你的头像，进入settings</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543730.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>选择 SSH and GPG keys</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543087.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>点击<code>New SSH key</code>，并把之前生成的<code>id_rsa.pub</code>文件，用记事本打开，将内容复制到<code>key</code>下的文本框,title的话自己随便写一个自己明白的就好，最后点击 <code>Add SSH key</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291546856.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>回到git bash 输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291548466.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到 access 就成功了，如果是第一次，可能需要确认一下，输入yes后回车，就会提示成功</p><h3 id="安装deployer插件"><a href="#安装deployer插件" class="headerlink" title="安装deployer插件"></a>安装deployer插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在博客文件夹目录下，的git bash中输入上面的命令进行安装</p><h3 id="发布博客到-github-io"><a href="#发布博客到-github-io" class="headerlink" title="发布博客到 github.io"></a>发布博客到 github.io</h3><p>想要发布博客到XXX.github.io 首先要让hexo 知道你的github位置，进入本地博客根目录修改一些配置，在博客的文件夹下打开<code>_config.yml</code> 开始编辑</p><ol><li><p>修改url:</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291556245.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>修改deploy,注意红标的地方写自己的github名称，branch默认的话现在是<code>main</code>，之前好多博客中写的是<code>master</code>这是之前的分支名称，如果没有改过，那么就是<code>main</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291559182.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><p>修改配置后，在git bash 中分别输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待命令执行完成，就发布成功了，可以打开你的地址进行查看<code>https://XXX.github.io</code> 这里XXX 就是你的用户名，比如我的 <a href="https://yjr-1100.github.io/">https://yjr-1100.github.io</a></p><hr><h2 id="配置好看的主题，并写博客"><a href="#配置好看的主题，并写博客" class="headerlink" title="配置好看的主题，并写博客"></a>配置好看的主题，并写博客</h2><p>又到了最麻烦和最开心的时刻，配置好看的主题让你的博客变的独一无二吧</p><h3 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h3><p>你可以在 <a href="https://hexo.io/themes/">hexo的主题库</a> 中找到自己喜欢的主题，这里我用的是 <a href="https://butterfly.js.org/"><code>butterfly</code> 主题 </a></p><p>打开主题的主页，里面其实有很多详细的教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>在你的博客根目录下执行上面的代码，下载主题</p><p>为了使这个主题可用，我们还需要安装几个插件，再博客的根目录下运行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="配置butterfly主题"><a href="#配置butterfly主题" class="headerlink" title="配置butterfly主题"></a>配置butterfly主题</h3><p><strong>注意在进行下面配置过程中随时执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 来确保没有出错，并且注意<code>:</code> 后面都会有空格，如果报错即时检查</strong></p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><p>我们需要继续配置 <code>_config.yml</code> 文件来应用我们的主题，在<code>_config.yml</code> 文件中找到 <code>theme</code> 填写我们主题的名字</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291613160.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>并且在博客文件夹根目录下新建一个<code>_config.butterfly.yml</code> 的文件，将主题的配置文件复制进去，目前这个版本的主题配置文件在 <code>/themes/butterfly/_config.yml</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291620320.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><h4 id="创建几个页面"><a href="#创建几个页面" class="headerlink" title="创建几个页面"></a>创建几个页面</h4><p>这里我只创建了几个目前我需要的，可以根据主题官方的说明进行其他的配置</p><ol><li><p>标签页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;tags&#x2F;index.md 的头部添加 <code>type: &quot;tags&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291657267.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code> 就是页面中间显示的内容，自己根据喜好写就好</p><p> <code>top_img</code> 就是页面顶部的背景图片</p></li><li><p>分类页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;categories&#x2F;index.md 的头部添加 <code>type: &quot;categories&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700318.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> <p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>友情链接页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;link&#x2F;index.md 的头部添加 <code>type: &quot;link&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700366.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p><p> 对于友情链接的设置我们需要在 <code>source</code> 目录下新建一个<code>_data</code> 文件夹，并创建一个 <code>link.yml</code> ，按照下面的内容进行修改</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">没问题，就是学习</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery之家</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">http://www.htmleaf.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/jqueryhome.jpg</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">自由分享jQuery、html5和css3的插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery插件库</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.jq22.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://www.jq22.com/img/logo.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">jquery插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AcWing</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.acwing.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.acwing.com/media/activity/surface/logo100x100.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">算法刷题</span></span><br></pre></td></tr></table></figure></li><li><p>关于我页面</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;about&#x2F;index.md 的头部添加 <code>type: &quot;about&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291705857.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>404页面</p><p> 主题内部内置了一个404，我们只需要打开就好，进入<code>_config.butterfly.yml</code> 找到下面的设置，把 <code>enable</code> 改为 <code>true</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291719404.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><h4 id="修改浏览器标签栏Icon"><a href="#修改浏览器标签栏Icon" class="headerlink" title="修改浏览器标签栏Icon"></a>修改浏览器标签栏Icon</h4><p>在&#x2F;img&#x2F; 文件夹下，放一个自己的icon ，在 <code>_config.butterfly.yml</code> 文件中，找到 <code>favicon</code> 进行编辑，改为自己图片的路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br></pre></td></tr></table></figure><h4 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>menu</code> 进行编辑</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">链接||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h4 id="设置主页的头部图片和背景图片"><a href="#设置主页的头部图片和背景图片" class="headerlink" title="设置主页的头部图片和背景图片"></a>设置主页的头部图片和背景图片</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>index_img</code> 和 archive_img ，在后面写上图片的url,其他的有兴趣也可以设置,找到<code>background</code> 在后面写上背景图片的url</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291726233.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/bizhi3.jpg)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置页脚开启页脚背景"><a href="#设置页脚开启页脚背景" class="headerlink" title="设置页脚开启页脚背景"></a>设置页脚开启页脚背景</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>footer</code> 修改 <code>enable</code> 为 <code>true</code>，找到 <code>footer_bg</code> 修改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">这里可以加一些自己的话</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="开启页面美化"><a href="#开启页面美化" class="headerlink" title="开启页面美化"></a>开启页面美化</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>beautify</code> 修改 <code>enable</code> 为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="comment"># &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="comment"># &#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置首页动态打字效果"><a href="#设置首页动态打字效果" class="headerlink" title="设置首页动态打字效果"></a>设置首页动态打字效果</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>subtitle</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>sub</code> 下写自己的想打的句子</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">人生没有白走的路，弯路也算数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">总有一天，你会渐渐活出写满答案的人生</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">今天不想跑，所以才去跑，这才是长距离跑者的思维方式</span></span><br></pre></td></tr></table></figure><h4 id="修改侧边栏"><a href="#修改侧边栏" class="headerlink" title="修改侧边栏"></a>修改侧边栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>aside</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>card_announcement</code> 下修改公告内容，在 <code>card_author</code> 下修改自己的Github链接，找到 <code>busuanzi</code> 打开访问人数 ，找到 <code>runtimeshow</code> 打开网页运行时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Follow Me</span><br><span class="line">      link: https://github.com/yjr-1100</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 总要记些什么证明我来过</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    # sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"></span><br><span class="line"># busuanzi count for PV / UV in site</span><br><span class="line"># 訪問人數</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (網頁運行時間)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 3/28/2022 00:00:00</span><br></pre></td></tr></table></figure><h4 id="设置社交账号"><a href="#设置社交账号" class="headerlink" title="设置社交账号"></a>设置社交账号</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>social</code> 修改,冒号前面的是图标，使用的图标库是  <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>,冒号后边是网址和名称</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/yjr-1100</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:jiaruiyang221@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h4 id="开启繁简体切换和阅读模式"><a href="#开启繁简体切换和阅读模式" class="headerlink" title="开启繁简体切换和阅读模式"></a>开启繁简体切换和阅读模式</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>translate</code> 修改 <code>enable</code> 为 <code>true</code> ，找到 <code>readmode</code> 修改为 <code>true</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Mode (阅读模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="写文章和发布博客"><a href="#写文章和发布博客" class="headerlink" title="写文章和发布博客"></a>写文章和发布博客</h3><h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><p>配置好后，再运行下面三个命令，打开本地博客看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>当我们需要写博客的时候，我们可以使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文章名</span><br></pre></td></tr></table></figure><p>来创建一个文件，改文件的位置就在 <code>/source/_posts</code> 下，我们可以打开新建好的 <code>.md</code> 文件进行编辑。</p><p><code>hexo new post</code> 命令使用的就是post模板，可以在<code>/scaffolds</code> 文件夹下找到改模板，我们可以编辑模板的头部，方便以后生成。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/background_</span>4k.jpg</span><br><span class="line"><span class="section">cover:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><p><code>tags</code> 用来写新增文章的标签</p></blockquote><blockquote><p><code>categories</code> 指明文章的分类，这个指明后会自动在分类页面被归类</p></blockquote><blockquote><p><code>description</code> 描述本篇文章，类似摘要</p></blockquote><blockquote><p><code>top_img</code> 指定文章头部的图片</p></blockquote><blockquote><p><code>cover</code> 指定文章在首页展示时的缩略图</p></blockquote><blockquote><p><code>keywords</code> 就是页面关键字</p></blockquote><p>我们写好后，就可以在本地博客看到新写的博客了，再次执行下面的命令，就可以发布到github.io 中了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="一些其他的设置"><a href="#一些其他的设置" class="headerlink" title="一些其他的设置"></a>一些其他的设置</h2><h3 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h3><ol><li><p>购买一个域名 可以去<a href="https://wanwang.aliyun.com/domain/tld?spm=5176.22941746.J_2447957890.22.4989a5f6oZeH4j#.com">阿里云</a> 进行域名注册</p></li><li><p>为域名设置解析 拿阿里云为例，进入控制台，选择域名解析</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292049998.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>添加CNMA解析，我这里添加的是二级域名，</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292053416.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> </li><li><p>在xxx.github.io的仓库中新建文件名为<code>CNAME</code>，写入你刚才解析的域名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292101397.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>在仓库的 <code>settings</code> 里找到 <code>pages</code> 进行设置，下面的那个对勾需要等一会才能勾选</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292104475.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>等一会就可以使用这个域名进行访问了，比如我可以通过 <code>https://yjr1100blog.jerryfirst.top/</code> 进行博客的访问</p></li><li><p>使用<code>hexo d</code> 的时候一般会把这个CNAME文件覆盖掉，所以我们可以在本地的<code>source</code>文件夹下创建一个<code>CNAME</code>文件把刚才的内容写进去，这样在进行<code>hexo d</code> 的时候，就也会同时进行上传</p></li></ol><h3 id="进行文件更替"><a href="#进行文件更替" class="headerlink" title="进行文件更替"></a>进行文件更替</h3><p>我们xxxx.github.io仓库里的文件只有 <code>hexo g</code> <code>hexo d</code>后的内容，没有源文件，加入我们电脑坏了，数据丢了，我们的博客就没了，所以我们建一个仓库进行我们原文件的更替</p>]]></content>
      
      
      <categories>
          
          <category> bolg折腾踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>webpack是前端工程化的具体解决方案。</p><p>主要功能：提供了友好的前端模块化开发支持，以及大妈压缩混淆、处理浏览器端javaScript的兼容性、性能优化等强大的功能</p><h2 id="使用-webpack"><a href="#使用-webpack" class="headerlink" title="使用 webpack"></a>使用 webpack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 新建项目空目录，运行 npm init -y 命令，初始化包管理配置文件 package.json</span><br><span class="line">2. 新建src源码目录</span><br><span class="line">3. 新建src-index.html 首页文件 和 src-&gt;index.js脚本文件</span><br><span class="line">4. 初始化首页基本的结构</span><br><span class="line">5. 运行npm install jquery -S 安装jQuery 这个命令执行后，会把这个包和对应的版本记录到package.json中的dependencies去</span><br><span class="line">6. 通过ES6 模块化方式导入jQuery，实现列表隔行变色</span><br></pre></td></tr></table></figure><p>运行报错 使用webpack来解决它</p><p><strong>安装:</strong> <code>npm install webpack@5.42.1 webpack-cli@4.9.1 -D</code></p><p>​        运行后 在package.json 中 devDependencies 记录这两个包<br>​        devDependencies 中的包只在开发中有用</p><p><strong>配置:</strong></p><p>​       在项目根目录中，创建名为 webpack.config.js 的webpack 配置文件，并初始化如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">mode:&quot;development&quot;// mode 用来指定构建模式，可选值为development 和 production</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在package.json 的scripts节点下，新增dev脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">&quot;dev&quot;:&quot;webpack&quot; //script 节点下的脚本，通过npm run 执行，比如 npm run dev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在终端执行 npm run dev 进行打包，会在dist文件中 生成一个 main.js 我们在index.html 中引入 main.js 就好了</p><p>​        在webpack.config.js 的配置文件中，module 的 production模式会有代码压缩效果，生成时间长，但是代码体积小</p><p>​        webpack 4.x和5.x默认的打包入口文件为src-&gt;index.js 默认的输出文件路径为 dist-&gt; main.js 可以在webpack.config.js 中修改打包的默认约定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack的插件"><a href="#webpack的插件" class="headerlink" title="webpack的插件"></a>webpack的插件</h2><h3 id="1-webpack-dev-server"><a href="#1-webpack-dev-server" class="headerlink" title="1. webpack-dev-server"></a>1. webpack-dev-server</h3><p>每当修改了源代码，就会自动进行项目的打包</p><p><strong>安装：</strong><code>npm install webpack-dev-server@3.11.2 -D</code></p><p><strong>配置：</strong></p><ol><li><p>修改 package.json-&gt;scripts 中的dev命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack server&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>再次运行npm run dev 命令进行项目打包</p></li><li><p>在浏览器访问<a href="http://localhost:8080/">http://localhost:8080</a> 可以查看打包效果</p><p>​    次插件把生成的文件放在内存中，在浏览器访问<a href="http://localhost:8080/main.js%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E8%A6%81%E7%9C%8B%E5%88%B0%E6%9C%80%E6%96%B0%E6%95%88%E6%9E%9C%EF%BC%8C%E5%B0%B1%E8%A6%81%E5%9C%A8html%E4%B8%AD%E5%BC%95%E5%85%A5%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84main.js%EF%BC%88%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E5%9C%A8%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9C%8B%E4%B8%8D%E5%88%B0%EF%BC%8C%E5%AE%83%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%89">http://localhost:8080/main.js可以看到，所以想要看到最新效果，就要在html中引入根目录下的main.js（这个文件在文件夹中看不到，它在内存中）</a></p></li></ol><h3 id="2-webpack-dev-plugin"><a href="#2-webpack-dev-plugin" class="headerlink" title="2. webpack-dev-plugin"></a>2. webpack-dev-plugin</h3><p><strong>安装：</strong> <code>npm install html-webpack-plugin -D</code></p><p><strong>配置：</strong> </p><ol><li><p>导入html插件，得到一个构造函数</p></li><li><p>创建 HTML 插件的实例对象</p></li><li><p>把实例对象挂在plugins下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3. 把实例对象挂在plugins下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个插件还会自动在文件中注入生成的打包文件</p><h2 id="devserver节点"><a href="#devserver节点" class="headerlink" title="devserver节点"></a>devserver节点</h2><p>在webpack.config.js配置文件中，可以通过devServer 节点对webpack-dev-server插件进行更多的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">open:true,//初次打包完后，自动打开浏览器</span><br><span class="line">host:&#x27;127.0.0.1&#x27;,//试试打包使用的主机地址</span><br><span class="line">port:8080,// 实时打包使用的端口号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：凡是修改了webpack.config.js配置文件，火色修改了package.json配置文件，必须重新启动打包的服务</p><h2 id="webpack-中的-loader"><a href="#webpack-中的-loader" class="headerlink" title="webpack 中的 loader"></a>webpack 中的 loader</h2><h3 id="1-loader概述"><a href="#1-loader概述" class="headerlink" title="1. loader概述"></a>1. loader概述</h3><p>在实际开发中，webpack默认只能打包处理.js 后缀结尾的模块，其他非.js 结尾的模块，webpack默认处理不了，需要调用loader加载器才可以正常打包，否则会报错</p><p>loader加载器的作用：协助webpack 打包处理待定的文件模块。比如：</p><ul><li>css-loader 可以打包.css文件</li><li>less-loader 可以打包.less文件</li><li>babel-loader 可以打包处理webpack无法处理的高级js语法</li></ul><h3 id="2-打包处理css文件"><a href="#2-打包处理css文件" class="headerlink" title="2. 打包处理css文件"></a>2. 打包处理css文件</h3><p><strong>安装：</strong><code>npm i style-loader@3.0.0 css-loader@5.2.6 -D</code></p><p><strong>配置：</strong></p><p>​    在webpack.config.js 中的module-&gt;rules数组中，添加loader规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-打包处理less文件"><a href="#3-打包处理less文件" class="headerlink" title="3. 打包处理less文件"></a>3. 打包处理less文件</h3><p><strong>安装：</strong> <code>npm i less-loader@10.0.1 less@4.1.1 -D</code></p><p><strong>配置：</strong></p><p> 在webpack.config.js 的module-rules 数组中，添加loader规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-打包处理样式表中与url路径相关的文件"><a href="#4-打包处理样式表中与url路径相关的文件" class="headerlink" title="4. 打包处理样式表中与url路径相关的文件"></a>4. 打包处理样式表中与url路径相关的文件</h3><p><strong>安装：</strong> <code>npm i url-loader file-loader -D</code></p><p><strong>配置：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>? 后面是loader的参数，limit用来指定图片大小，单位字节，只有小于等于limit大小的图片，才会被转成base64格式的图片</p><h3 id="5-打包处理js高级语法"><a href="#5-打包处理js高级语法" class="headerlink" title="5. 打包处理js高级语法"></a>5. 打包处理js高级语法</h3><p><strong>安装：</strong> 安装babel-loader相关的包</p><p><code>npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 @babel/preset-env @babel/plugin-transform-runtime-D</code></p><p><strong>配置：</strong> </p><p>在webpack.config.js 的module-&gt;rules 数组中，添加loader规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br></pre></td></tr></table></figure><p>exclude 用来排除第三方包中的js文件</p><p>在项目根目录下创建一个babel.config.js的配置文件，定义Babel的配置项如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">// 声明babel可用的插件</span><br><span class="line">plugins:[[&#x27;@bable/plugin-proposal-decorators&#x27;,&#123;legacy:true&#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack的打包发布"><a href="#webpack的打包发布" class="headerlink" title="webpack的打包发布"></a>webpack的打包发布</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><p>在package.json 文件的scripts 节点下面新增build命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>–mode 是一个参数，用来指定webpack 的运行模式，production代表生产环境</p><p>在命令行运行 npm run build就好了</p><h3 id="2-把生成的包各类文件，放在同一个文件夹"><a href="#2-把生成的包各类文件，放在同一个文件夹" class="headerlink" title="2. 把生成的包各类文件，放在同一个文件夹"></a>2. 把生成的包各类文件，放在同一个文件夹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;js/index1.js&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&amp;outputPath=images&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure><h3 id="3-自动删除上次生成的东西"><a href="#3-自动删除上次生成的东西" class="headerlink" title="3. 自动删除上次生成的东西"></a>3. 自动删除上次生成的东西</h3><p><strong>安装：</strong> <code>npm install clean-webpack-plugin -D</code></p><p><strong>配置：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>() ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = webpackConfig;</span><br></pre></td></tr></table></figure><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><p>一个信息文件，里面存储着位置信息，存着压缩后的代码的行号和原来的行号，默认报错显示压缩后的行号，调试不方便，改一下配置</p><p>在webpack.config.js 中添加如下配置，保证运行时报错的行号和源代码的一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际我们不用自己写这个，有工具生成</p><h2 id="improt路径优化"><a href="#improt路径优化" class="headerlink" title="improt路径优化"></a>improt路径优化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="comment">// 这个配置说明@ 代表 src文件夹目录，在js中improt 可以通过@来查找路径，从外向里查找</span></span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
