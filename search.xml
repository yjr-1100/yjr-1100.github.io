<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>grep,awk,sed与正则表达式学习</title>
      <link href="/2022/05/04/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/04/grep%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p><code>grep</code> 命令用于查找文件里符合条件的字符串，即查找内容包含制定的范本样式的文件，如果发现某文件的内容符合制定的范式样本，则会把含有范式样本的那一行显示出来</p><p>语法 <code>grep 选项 需要捕获的文字 目标文件</code>，比如从 <code>/etc/passwd</code> 中查找tcpdump相关的信息 <code>grep tcpdump /etc/passwd</code></p><p>选项主要使用的有：</p><ul><li><code>-A</code> 显示捕获行之后的行</li><li><code>-B</code> 显示捕获行之前的行</li><li><code>-C</code> 显示捕获行前后的行</li><li><code>-c</code> 显示符合条件的行数</li><li><code>-i</code> 忽略大小写</li><li><code>-n</code> 输出符合条件文件所在行号</li><li><code>-v</code> 不包含关键字的行</li></ul><p>比如：过滤以#开头的行 <code>grep -v &#39;^#&#39; /etc/ssh/sshd_config</code><br>过滤以#开头的行和空行 <code>grep -v &#39;^#&#39; /etc/ssh/sshd_config | grep -v &#39;^$&#39;</code></p><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>在上面最后的例子中， <code>&#39;^#&#39;</code> 和 <code>&#39;^$&#39;</code> 都是正则表达式的匹配法</p><p>正则表达式(regular expression) 描述了一种字符串的匹配模式，可以用来检测一个串是否含有某种子串，将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p><p>一些正则表达式的测试网站：<br>  <a href="https://regex101.com/">https://regex101.com/</a><br>  <a href="https://tool.oschina.net/regex/">https://tool.oschina.net/regex/</a></p><h2 id="匹配普通字符"><a href="#匹配普通字符" class="headerlink" title="匹配普通字符"></a>匹配普通字符</h2><p>普通字符包括没有显示制定为元字符的所有可打印和不可打印字符，包括所有大小写字母，数字，标点符号和一些其他符号</p><p><code>[]</code> 中的字符就是要匹配的字符，<br><code>[aeiou]</code> 单个匹配中括号中的这几个字符<br><code>[^aeiou]</code> 单个匹配不是中括号中这几个的其他字符<br><code>[a-z]</code> 匹配a到z的所有字母<br><code>[\s]</code> 匹配所有空白字符，包括换行，制表，换页等<br><code>[\S]</code> 匹配非空白符<br><code>[.]</code> 匹配除换行符之外的任意单个字符<br><code>[\w]</code> 匹配字母数组下划线</p><p><code>\f</code> 匹配一个换页符<br><code>\n</code> 匹配一个换行符<br><code>\r</code> 匹配一个回车符<br><code>\t</code> 匹配一个制表符<br><code>\v</code> 匹配一个垂直制表符</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041242282.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041243938.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如<code>^*</code>之类的表达式。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041245624.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>使用圆括号 <code>()</code> 将所有选项括起来，相邻的选项之间使用 <code>|</code> 来分隔，<code>()</code> 表示捕获分组，<code>()</code> 会把每个分组里的匹配值保存起来，多个匹配值可以通过数字来索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="string">&quot;123456runoob123runoob456&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/([1-9])([a-z]+)/g</span>)</span><br><span class="line"><span class="comment">// 这里n是一个对象，可以通过索引来查看两个捕获值</span></span><br><span class="line">n[<span class="number">0</span>],n[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041258940.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="grep-与-正则结合"><a href="#grep-与-正则结合" class="headerlink" title="grep 与 正则结合"></a>grep 与 正则结合</h1><p>前面使用 gerp -v <code>^$</code> 这类正则表达式是grep自身支持的，如果想要使用完整的正则语法，可以使用 <code>grep -E</code> 或者写作 <code>egrep</code></p><hr><h1 id="sed-编辑器"><a href="#sed-编辑器" class="headerlink" title="sed 编辑器"></a>sed 编辑器</h1><h2 id="sed概述"><a href="#sed概述" class="headerlink" title="sed概述"></a>sed概述</h2><p><code>Sed</code> 是一个流处理编辑器，它能帮助我们自动处理文件，分析日志文件，修改配置文件等，是一个 “非交互式的” 面向字符流的编辑器，能同时处理多个文件多行的内容</p><ul><li>可以不对原文件改动，把整个文件输出到屏幕</li><li>可以把匹配到的内容输出到屏幕上</li><li>还可以对原文件改动，但是不会在屏幕上返回结果</li></ul><h2 id="sed处理流程"><a href="#sed处理流程" class="headerlink" title="sed处理流程"></a>sed处理流程</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205041952863.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="sed参数说明"><a href="#sed参数说明" class="headerlink" title="sed参数说明"></a>sed参数说明</h2><p><code>sed [-hnV][-e &lt;script&gt;][-f &lt;script文件&gt;][文本文件]</code></p><ul><li><code>-e&lt;script&gt;</code>或<code>--ecpression=&lt;script&gt;</code> 以选项中指定的script来处理输入的文本文件</li><li><code>-f&lt;script文件&gt;</code>或<code>--file=&lt;script文件&gt;</code> 以选项中指定的script文件来处理输入的文本</li><li><code>-h</code> 显示帮助</li><li><code>-n</code> 仅显示script处理后的结果</li><li><code>-V</code> 显示版本信息</li></ul><p>sed动作可以理解为操作</p><ul><li><code>a</code> ：新增，a的后面可以接字符串，新增字符串会在目前的下一行</li><li><code>c</code> ：取代，c的后面可以接字符串，这些字符串取代n1,n2之间的行</li><li><code>d</code> ：删除</li><li><code>i</code> ：插入，i的后面可以接字符串，新增的字符串会在目前行的上一行</li><li><code>p</code> ：打印，将某个选择的数据先输出，通常p会与参数sed -n 一起运行</li><li><code>s</code> ：替换，可以直接进行替换，通常这个s的动作可以搭配正则表示</li></ul><h2 id="sed示例"><a href="#sed示例" class="headerlink" title="sed示例"></a>sed示例</h2><p>有如下文件 <code>test.txt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello 11111</span><br><span class="line">Hello 22222</span><br><span class="line">Hello 33333</span><br><span class="line">Hello 44444</span><br><span class="line">Hello 55555</span><br></pre></td></tr></table></figure><ol><li><p>在文件中查找包含2222的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | sed -n &#x27;/2222/p&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042103352.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>在文件中添加第三行，内容为 hello</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;2a hello&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042104861.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>删除第2行到第4行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;2,4d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042106804.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>删除包含222222的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;/22222/d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042108063.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>把 1-3行替换为 hahaha</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;1,3c hahaha&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042109217.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>查找替换，将文本中的Hello换成haha</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;s\Hello\haha\g&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042111513.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>前面的操作，知识在屏幕上按照要求输出了内容，而文件本身没有改变，sed也可以用于文件自身的修改，但这样操作非常危险，有可能误操作将文件改坏，所以我们必须有把握才能这么做</p><p>在什么的操作中，结合 <code>-i</code> 就可以修改文件了，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e &#x27;2a hello&#x27; test.txt</span><br><span class="line">sed -i &#x27;2,4d&#x27; test.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042116851.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h2><p>awk 是一种编程语言，用于在 linux&#x2F;unix 下对文本和数据进行处理，支持用户自定义函数和动态正则表达式的功能，是 linux&#x2F;unix 下的一个强大编程工具</p><p>awk一次处理一行内容，对每行可以<strong>切片处理</strong>，空格和制表符为默认分隔符将每行切片，切开的部分再进行各种分析处理</p><h2 id="awk格式"><a href="#awk格式" class="headerlink" title="awk格式"></a>awk格式</h2><p><strong>命令行格式</strong></p><p><code>awk [选项参数] &#39;script&#39; var=value file(s)</code></p><p>script组成： pattern {awk操作命令}</p><ul><li>pattern：正则表达式；逻辑判断式</li><li>awk操作命令：内置函数 print(),printf(),getline…;</li><li>控制命令：if(){..}else{..};while(){…}</li></ul><p>扩展格式：<strong>BEGIN{print “start”}<strong>pattern{commands}<strong>END{print “END”} **<br>注意：加粗的部分在所有commands</strong>之前</strong>和</strong>之后**执行</p><h2 id="awk内置参数"><a href="#awk内置参数" class="headerlink" title="awk内置参数"></a>awk内置参数</h2><ol><li><p>内置变量1：</p><ul><li><code>$0</code> 表示整个当前行</li><li><code>$1</code> 每行第一个字段</li><li>…</li></ul></li><li><p>内置变量2；</p><ul><li><code>NR</code> 每行的记录号，行号</li><li><code>NF</code> 字段数量变量，字段总数</li><li><code>FILENAME</code> 正在处理的文件名</li></ul></li></ol><h2 id="awk示例"><a href="#awk示例" class="headerlink" title="awk示例"></a>awk示例</h2><ol><li><p>以 <code>:</code> 分割，显示&#x2F;etc&#x2F;passwd 的第一列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042131319.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>显示&#x2F;etc&#x2F;passwd的第一列和第七列，用逗号分隔显示，所有行开始前添加列名 <code>start1，start7</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;BEGIN&#123;print &quot;start1,start7&quot;&#125;&#123;print $1&quot;,&quot;$7&#125;END&#123;print &quot;end1,end7&quot;&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042135465.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>匹配某段字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;$1 ~ /00/&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042137767.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>显示前五行的行号，列数，以及行内完整内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n5 /etc/passwd | awk -F : &#x27;&#123;print NR &quot; &quot; NF &quot; &quot; $0&#125;&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042139293.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>条件匹配操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;$3==&quot;0&quot;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042325020.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>这里操作符号可以用 `==`,`>`,`>=`,`<`,`<=`,`!=` 等，和数字比较时，将数字用双引号引起来表示字符串，不加引号表示数字</li><li><p>累加前四行用户的uid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n4 /etc/passwd | awk -F : &#x27;&#123;(sum=sum+$3);print $0&#125;END&#123;print sum&#125;&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042332991.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>流程控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : &#x27;&#123;if($1&gt;&quot;q&quot;)&#123;print $1&#125;else&#123;print &quot;-&quot;&#125;&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205042334615.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>也可以将上面的语句放在一个脚本中去调用,比如在`awkscript`这个文件中写入下面的脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    if($1 &gt; &quot;q&quot;)&#123;</span><br><span class="line">        print $1</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        print &quot;-&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用下面的命令去调用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F : -f awkscript /etc/passwd</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本编程学习</title>
      <link href="/2022/05/03/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/03/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本概述"><a href="#shell脚本概述" class="headerlink" title="shell脚本概述"></a>shell脚本概述</h1><p>shell 脚本并不是真正的编程语言，shell脚本是在linux的shell中运行，实际上shell脚本就是命令的集合，类似于windows的批处理命令，我们将需要做的操作写入一个shell脚本中，可以定时执行，一次执行多个命令，shell脚本是提高服务器管理维护的工具。</p><h1 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p><strong>下面实现一个脚本，输入日期和”Hello World!”:</strong></p><ol><li><code>cd /usr/local/sbin</code> 进入一个放shell脚本的目录</li><li><code>vim first.sh</code>  打开一个要编写的shell文件，后缀是<code>.sh</code></li><li>输入shell脚本,并保存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><code>chomd +x first.sh</code> 给脚本赋予执行权限</li><li><code>./first.sh</code> 执行脚本</li></ol><h2 id="shell脚本使用变量"><a href="#shell脚本使用变量" class="headerlink" title="shell脚本使用变量"></a>shell脚本使用变量</h2><p>编写下列脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d=`<span class="built_in">date</span> +%H:%M:%S`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the scirpt start at <span class="variable">$d</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;wait 2 seconds&#x27;</span></span><br><span class="line"><span class="built_in">sleep</span> 2</span><br><span class="line">d1=`<span class="built_in">date</span> +%H:%M:%S`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the scirpt start at <span class="variable">$d1</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>date +%H:%M:%S</code> 是一整个命令，使用 <code>反引号</code> 包围起来<br>echo 回显时，如果有变量，需要使用双引号包围起来，变量前面加<code>$</code>符号<br>注意设置变量时不要有多余的空格<br>这里 d 和 d1 两个变量，保存了执行命令时的时间，所以需要两个分别来记录</p></blockquote><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>编写下列脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$a</span>+<span class="variable">$b</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span>+<span class="variable">$b</span>=<span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意数学计算要用中括号<code>[]</code>括起来，并且前面加 <code>$</code>符号</p></blockquote><h2 id="用户输入交互"><a href="#用户输入交互" class="headerlink" title="用户输入交互"></a>用户输入交互</h2><p>编写下列脚本，用户输入x和y，计算x+y并输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input a number x:&quot;</span> x</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input a number y:&quot;</span> y</span><br><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$x</span>+<span class="variable">$y</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;x is <span class="variable">$x</span>,y is <span class="variable">$y</span>,x+y = <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="脚本选项使用"><a href="#脚本选项使用" class="headerlink" title="脚本选项使用"></a>脚本选项使用</h2><p>编写脚本 <code>option.sh</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;x is <span class="variable">$x</span>,y is <span class="variable">$y</span>,x+y = <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><p>赋予执行权限后，使用命令 <code>./option.sh 88 99</code> 进行执行，输出88+99的值</p><p>这里 <code>$1</code> 和 <code>$2</code> 分别代表跟在脚本后的第一个和第二个选项， <code>$0</code> 代表脚本自身的名字</p><h2 id="脚本使用判断"><a href="#脚本使用判断" class="headerlink" title="脚本使用判断"></a>脚本使用判断</h2><p>下面脚本判断输入是否大于60</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;please input your score:&quot;</span> a</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt 60 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;you pass the exam&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：逻辑表达式用<code>[]</code>括起来，注意 <code>[]</code>前后的空格</p></blockquote><h3 id="两个整数之间的比较"><a href="#两个整数之间的比较" class="headerlink" title="两个整数之间的比较"></a>两个整数之间的比较</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032313813.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032315373.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="文件判断"><a href="#文件判断" class="headerlink" title="文件判断"></a>文件判断</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205032316525.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h3><p>除了上面的if之外，还可以使用 <code>else</code>, <code>elif</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;please input your score:&quot; a</span><br><span class="line">if [ $a -gt 60 ] &amp;&amp; [ $a -lt 80 ];then</span><br><span class="line">echo &quot;you pass the exam&quot;</span><br><span class="line">elif [ $a -ge 80 ];then</span><br><span class="line">echo &quot;you are good at exam&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;you not pass the exam&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="case逻辑判断"><a href="#case逻辑判断" class="headerlink" title="case逻辑判断"></a>case逻辑判断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;input a number:&quot;</span> Num</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$Num</span> <span class="keyword">in</span></span><br><span class="line">1) <span class="built_in">echo</span> <span class="string">&#x27;you select 1&#x27;</span></span><br><span class="line">;;</span><br><span class="line">2) <span class="built_in">echo</span> <span class="string">&#x27;you select 2&#x27;</span></span><br><span class="line">;;</span><br><span class="line">3|4) <span class="built_in">echo</span> <span class="string">&#x27;you select 3 or 4&#x27;</span></span><br><span class="line">;;</span><br><span class="line">*) <span class="built_in">echo</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><blockquote><p><code>*</code> 代表其他所有情况</p></blockquote><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p><code>seq 1 5</code> 表示 1 2 3 4 5 五个数,这是<strong>系统命令</strong>， 反引号中写的是<strong>系统命令</strong><br>我们甚至可以写 <code>ls</code> 这个就会输入当前文件夹的所有文件</p></blockquote><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> -ge 1 ];<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">a=$[ <span class="variable">$a</span> -1 ]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=5</span><br><span class="line">until [ <span class="variable">$a</span> == 1 ];<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">a=$[ <span class="variable">$a</span> - 1 ]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>until循环语法和while循环一样，区别在于 until 循环 满足添加会终止，while循环 不满足条件时终止</p><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sumaa()</span><br><span class="line">&#123;</span><br><span class="line">    sumbb=$[$1+$2]</span><br><span class="line">    echo $sumbb</span><br><span class="line">&#125;</span><br><span class="line">sumaa $1 $2</span><br></pre></td></tr></table></figure><blockquote><p>注意，函数一定要写在脚本的最前面</p></blockquote><h2 id="shell中的中断"><a href="#shell中的中断" class="headerlink" title="shell中的中断"></a>shell中的中断</h2><h3 id="break终中断"><a href="#break终中断" class="headerlink" title="break终中断"></a>break终中断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">break</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><h3 id="continue-中断"><a href="#continue-中断" class="headerlink" title="continue 中断"></a>continue 中断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">continue</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><p>continue 和 break 都是用于循环中，不同的是 break直接退出循环，continue 是跳过本次循环，进入下一次</p><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for i in `seq 1 5`</span><br><span class="line">do</span><br><span class="line">echo &quot;$i&quot;</span><br><span class="line">if [ $i == 3 ]</span><br><span class="line">then</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">echo -----</span><br></pre></td></tr></table></figure><p>exit命令是直接退出整个shell脚本</p><hr><h1 id="shell小练习"><a href="#shell小练习" class="headerlink" title="shell小练习"></a>shell小练习</h1><ol><li><p>计算 1~100的和</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">for i in `seq 1 100`;do</span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li><li><p>输入数字n,计算1+n，如果n&lt;1 重新输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n=0</span><br><span class="line">sum=0</span><br><span class="line">while [ $n -lt 1 ];do</span><br><span class="line">read -p &#x27;input n:&#x27; n</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">for i in `seq 1 $n`;do</span><br><span class="line">sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></figure></li><li><p>编写shell脚本，将&#x2F;root目录下所有目录复制到 &#x2F;tem目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">for f in `ls`;do</span><br><span class="line">if [ -d $f ];then</span><br><span class="line">cp -r $f /tmp/</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="最后的练习"><a href="#最后的练习" class="headerlink" title="最后的练习"></a>最后的练习</h1><p>编写脚本实现下面功能<br>运行脚本提示，请输入你喜欢的操作系统（Windows 、Mac、Linux）<br>在用户输入windows后，提示一句话<br>在用户输入mac后，提示另一句话<br>在用户输入linux后，提示“真是伟大的选择”<br>直到用户输入linux后，脚本才运行结束，否则一直循环脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read -p &quot;input your opratiing system:    &quot; x</span><br><span class="line">echo $x</span><br><span class="line">until [ $x == linux ];do</span><br><span class="line">if [ $x == windows ];then</span><br><span class="line">echo &quot;first line&quot;</span><br><span class="line">elif [ $x == mac ];then</span><br><span class="line">echo &quot;second line&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;no such oprating system&quot;</span><br><span class="line">fi</span><br><span class="line">read -p &quot;input your opratiing system:    &quot; x</span><br><span class="line">done</span><br><span class="line">echo &quot;good choice&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程管理</title>
      <link href="/2022/05/02/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2022/05/02/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h1><p>一个进程是一条命令运行的实例，如一个vi的命令同时被15个不同的用户打开，那么就会创建15个进程,进程通过ID进行识别，进程ID对当前系统来说是唯一的,进程会与一个特定的用户账号和组关联，账号信息可以帮助进程获取指定的系统资源权限</p><p>Linux的进程在 &#x2F;proc 目录下，存在于以进程ID命名的文件夹中，如下图，蓝色的部分表示进程ID</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021209700.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="列出进程"><a href="#列出进程" class="headerlink" title="列出进程"></a>列出进程</h1><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><blockquote><p>ps 是最早也是最常用的列出当前系统进程的命令</p></blockquote><p>常用的ps命令</p><ol><li><p><code>ps u</code> 显示进程的同时，以用户角度查看进程的使用资源情况<br><code>VSZ(Virtual Set Size)</code> 虚拟内存大小，以KB为单位<br><code>RSS(Resident Set Size)</code> 实际内存大小<br><code>STAT</code> 中 <code>R</code> 表示睡眠进程，<code>S</code> 表示正在运行，<code>+</code>表示前台操作</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021339093.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p><code>ps ux | less</code> 查看系统当前用户的所有进程，<code>| less</code> 是管道处理，分页显示结果</p></li><li><p><code>ps -e</code> 列出运行中的进程<br>我们还可以自定义显示的列，或者按照某列排序<br><code>ps -eo pid,user,group,gid,vsz,rss,comm | less</code> o选项后面代表指定列<br><code>ps -eo pid,user,group,gid,vsz,rss,comm --sort=-rss</code> sort代表排序，按照 <code>-rss</code>代表按照内存使用排倒序</p></li></ol><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><blockquote><p>top 提供了一种面向屏幕的方法来显示系统中运行的进程，在使用top时，默认按照进程当前所使用的CPU时间来显示进程，也可以设置为其它排序</p><p>当发现一个进程为不适当的进程，可以使用top来完全终止进程活改变进程优先级</p></blockquote><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021419834.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>top命令的一些操作</p><blockquote><p><strong>单击h</strong>,查看帮助文件，再按任意键返回<br><strong>单击M</strong>,以内存占用排序，<br><strong>单击P</strong>,以CPU占用排序<br><strong>单击数字1</strong>，切换显示所有CPU的使用情况<br><strong>单击R</strong>,对输出进行反向排序<br><strong>单击u</strong>,并输入用户名，显示某用户的进程<br><strong>单击r</strong>,然后输入进程P1D,改变进程的优先级，优先级取值为-19~20<br><strong>单击k</strong>,杀死进程，输入进程PID,再输入15表示彻底终止该进程</p></blockquote><hr><h1 id="管理前台和后台进程"><a href="#管理前台和后台进程" class="headerlink" title="管理前台和后台进程"></a>管理前台和后台进程</h1><p>在Linux的SHELL中，无法快捷的进行进程的切换，因为SHELL中没有像任务栏一样的进程切换工具，SHELL能做的是在后台和前台之间切换当前活动的进程</p><p>直接在命令后面加一个 <code>&amp;</code> 符号就可以把命令放到后台,比如 <code>find /usr &gt; /tmp/1.txt &amp;</code> </p><p>通过<code>jobs</code>命令查看后台进程</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021454842.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用 <code>fg</code> 命令可以恢复进程到前台，比如 <code>fg % 1</code> 其中1 为工作号 如果不写 <code>% 1</code> 那么 <code>fg</code> 命令会把带有 <code>+</code> 号的工作恢复到前台</p><h2 id="关闭和修改进程"><a href="#关闭和修改进程" class="headerlink" title="关闭和修改进程"></a>关闭和修改进程</h2><h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><p>Linux对进程的操作依赖进程间的信号来实现，通常信号是由一个系统错误产生，当然也可以人为发送信号，常用的信号如下</p><table><thead><tr><th>信号名</th><th>数字</th><th>说明</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>由一个非链接状态的终端发送给控制进程，或者控制进程在自身结束时发给前台进程</td></tr><tr><td>SIGINT</td><td>2</td><td>一般是由ctrl+C发起的中断</td></tr><tr><td>SINGKILL</td><td>9</td><td>一般用于SHELL中强制终止异常进程</td></tr><tr><td>SIGTERM</td><td>15</td><td>通常是一个结束请求，如关机时发送给进程，kill命令也默认发送这个信号</td></tr></tbody></table><p>比如我们要关闭一个PID为8888的进程可以执行下面的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kill 8888           kill默认发送15信号</span><br><span class="line">kill -15 8888       kil指定发送15信号</span><br><span class="line">kill -SIGKILL 8888  kll指定发送9信号，即SIGKILL</span><br><span class="line">kill -1 8888        kill指定发送1信号，类似于systemctlreload httpd,重新加载配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>killall</code>命令，可以根据进程名发送信号，而不需要查看进程ID,这样的有点是可以方便的杀死进程，但是也有可能误杀其他进程，比如 <code>killall bash</code> 除了会杀掉bash，还会杀掉所有的shell脚本，使用<code>killall</code>时，同样可以使用信号数字</p><h3 id="修改进程优先级"><a href="#修改进程优先级" class="headerlink" title="修改进程优先级"></a>修改进程优先级</h3><p>修改进程CPU使用优先级，Linux使用nice值定义进程访问CPU的优先级，<code>top</code> 命令的<code>NI</code> 列指向的就是CPU优先级</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021522533.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>nice的值可以在-20~19之间，默认取值为0</p><ul><li>nice值越低，进程就有更多访问CPU的机会，优先级越高</li><li>普通用户只能将自己的进程nice设为 0~19</li><li>普通用户只能将nice值越设越高</li><li>普通用户只能在自己进程上设置nice</li></ul><p>使用下面的命令来修改nice值</p><ol><li><code>nice -5 vim &amp;</code> 将vim进程放在后台运行且设置nice值为 5</li><li><code>renice -n -5 8888</code> renice 对正在运行的进程修改nice值，这个命令的意思是对进程ID为8888的进程nice值减5</li></ol><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>守护进程(init或systemd) ，可以理解为所有“进程之母”，是所有进程的起源，进程由他调度,守护进程是Linux内核中的第一个进程，通常名称为 <code>init</code> 或 <code>systemd</code>，Linux内核中有一个PID为0的进程表示内核，守护进程PID为1</p><hr><h1 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h1><p>Linux 服务管理有两个命令</p><ul><li><code>service</code></li><li><code>systemctl</code></li></ul><p><code>service</code> 命令的本质是指向<code>/etc/init.d</code>目录下的脚本</p><p><code>systemctl</code> 命令是linux系统最新的初始化系统，同时 <code>systemctl</code> 也兼容了 <code>service</code> 命令，也会查找<code>/etc/init.d</code>目录</p><p>systemctl常用方法如下：</p><blockquote><p><code>systemctl start|stop|restart service</code> 启动停止重启服务<br><code>systemctl enable|disable service</code>     开机启动开机不启动服务<br><code>systemctl status service</code>             查看服务的状态<br><code>systemctl is-active service</code>           查看服务是否启动<br><code>systemctl is-enabled service</code>           查看服务是否开机启动</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装包管理学习</title>
      <link href="/2022/05/01/Linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/01/Linux%E5%AE%89%E8%A3%85%E5%8C%85%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="程序包管理概述"><a href="#程序包管理概述" class="headerlink" title="程序包管理概述"></a>程序包管理概述</h1><p>在早期的Liux系统中，如果想要添加软件，必须获取该软件源代码，然后将其编译成二进制代码。再来运行，这种软件包通常是一个压缩包，如tar格式</p><p>获取压缩包安装软件并不困难，但是有一些明显的缺点：</p><ol><li>获取软件的依赖软件</li><li>不知道相关软件的路径</li><li>删除时可能比较困难</li><li>更新时比较困难</li></ol><p>为了解决从压缩包安装软件的困难，软件包从简单的压缩包，变成了更复杂的打包，比如：</p><ul><li>RPM包，该包最初被称为Red Hat Package Manager,后被重命名为RPM。RPM是SUSE、Red Hat、Centos等的首选软件包格式</li><li>Deb包，基于 Debian GNU&#x2F;Linux 的管理包文件，常用于基于 Debian 的发行版本 Linux ,如 Ubuntu、Linux mint、KNOPPIX 等</li></ul><p><strong>RPM</strong>与<strong>DEB</strong>都是非常优秀的软件包管理工具，作用的Liux系统不同，我们因为学习的是Centos,所以我们重点介绍<strong>RPM</strong></p><p>Liux系统管理员的主要职责之一是软件管理，包含以下常见工作</p><ul><li>安装应用程序</li><li>更新应用程序</li><li>给内核打补丁</li></ul><p>我们需要一个合适的工具，查看并维护当前的软件及版本，Linux通常使用<strong>rpm</strong>用作软件管理，同时使用<strong>yum</strong>作为补充</p><hr><h1 id="RPM安装程序包"><a href="#RPM安装程序包" class="headerlink" title="RPM安装程序包"></a>RPM安装程序包</h1><p><strong>程序包的含义</strong></p><p><strong>RPM程序包</strong>就是<strong>文件容器</strong>，包含特定应用程序或应用程序相关的文件组<br>通常<strong>RPM程序包</strong>包含:</p><ul><li>二进制文件(可执行文件)</li><li>安装脚本</li><li>配置文件</li><li>软件使用文档</li><li>安装卸载命令<br>注意：rpm包会依赖CPU类型来工作，如x86,x86_64,arm等</li></ul><p><strong>RPM数据库</strong></p><p>RPM数据库存在本机的 <code>/var/lib/rpm/</code> 目录，RPM数据库的作用如下</p><ol><li>跟踪每个RPM中各文件的版本和位置</li><li>维护各文件的MD5校验和</li></ol><p><strong>查询已安装软件</strong></p><p>使用命令 <code>rpm -qi 软件名称</code>，比如 <code>rpm -qi firefox</code></p><p>查看当前系统所安装的软件包 </p><ul><li><code>rpm -qa |more</code> 加<code>more</code> 是为了分页显示</li><li><code>rpm -qa | grep vim</code> 从显示结果中过滤出指定软件，这里过滤出包含vim的</li></ul><p><strong>安装软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -i packagename 安装软件包</span><br><span class="line">rpm -U packagename 升级软件包，如果原来没有安装，则安装</span><br><span class="line">rpm -F packagename 只升级软件包，如果原来安装，而不会新安装</span><br><span class="line"></span><br><span class="line">rpm -e packagename 卸载程序包</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <strong>使用rpm安装软件包，必须先完整的安装软件包的依赖</strong>，才能安装软件。但软件的依赖通常比较多，所以一般使用更优化的工具<strong>yum</strong>来安装</p><hr><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>YUM(Yellowdog Update Modified) 项目着手解决RPM软件包依赖的问题，主要作用是将RPM不再视为单一软件包，而是视为一个软件库</p><p>借助软件库，安装软件的工程师不再解决依赖问题，而是由LInux发行版的经销商来解决。发行版经销商将Linux发行版中每个软件包所需的所有组件都加入到软件库，yum的软件库可以放在WEB服务器，FTP服务器的一个目录甚至本地介质中，本地目录中，然后将软件库配置到<code>/etc/yum.conf</code> 中，或者 <code>/etc/yu.repos.d</code> 目录下的文件中</p><h2 id="yum工作原理"><a href="#yum工作原理" class="headerlink" title="yum工作原理"></a>yum工作原理</h2><p>yum基本语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [options] command</span><br></pre></td></tr></table></figure><p>比如我们要安装火狐浏览器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firefox</span><br></pre></td></tr></table></figure><p>用户只需要知道软件名，而不用知道完整的安装包路径或者安装包全称</p><p><strong>yum工作流程</strong><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021037621.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><code>/etc/yum.conf</code> 是yum的配置文件，当使用yum时，会检查此文件，CentOS7的文件默认如下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021052406.jpg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>搜索软件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search 软件名</span><br></pre></td></tr></table></figure><p>比如搜索软件 <code>editor</code> 输入 <code>yum search editor</code> ，搜索到了我们就可以选择需要的使用 <code>yum install</code> 来安装</p><p><strong>查看软件信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info 软件名</span><br></pre></td></tr></table></figure><p><strong>如果知道一个命令，但是不知道软件名，可以查询这个命令来获取软件名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides netstat</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021057667.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>通过查询，可以发现，<code>netstat</code>命令在<strong>net-tools</strong>软件中</p><p><strong>查看软件包安装依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum deplist 软件名</span><br></pre></td></tr></table></figure><p>比如查看 net-tools 的依赖 <code>yum deplist net-tools</code></p><p><strong>安装软件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install xxxxx</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021115006.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>删除软件</strong></p><p>只会删除列出的软件包，不会删除所有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum erase xxxxx</span><br></pre></td></tr></table></figure><p><strong>查看yum历史记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205021106788.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>争对历史记录我们还可以查看具体的信息,使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history info 2</span><br></pre></td></tr></table></figure><p>2是yum history中的id</p><p>我们还可以彻底还原，删除history 2 中的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum history undo 2</span><br></pre></td></tr></table></figure><p><strong>更新软件包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum check-update //检查更新，只是检查</span><br><span class="line">yum update 软件包名 //更新指定软件包</span><br><span class="line">yum update // 更新所有软件包</span><br></pre></td></tr></table></figure><p><strong>维护yum缓存库</strong><br>如果yum配置中使用的软件缓存，那么yum的缓存目录很容易装满，缓存目录中的所有数据都是可以被清理的，清理后，yum下次使用时会自动下载新的<strong>元数据</strong>，使用下面的命令可以进行清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean packages</span><br><span class="line">yum clean metadata</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS网络管理学习</title>
      <link href="/2022/05/01/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/01/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux网络配置概述"><a href="#Linux网络配置概述" class="headerlink" title="Linux网络配置概述"></a>Linux网络配置概述</h1><p>目前将单一的桌面PC连接到网络是一件非常容易的事</p><p>但是将Linux服务器连接到网络，特别是在服务器配置上会有不同，典型的如</p><ul><li>静态IP</li><li>VPN网络</li><li>代理服务器</li></ul><p>学习网络配置管理，不仅要学会使用网络，更重要的是掌握网络状态，排查系统问题</p><p>传统的Linux网络配置是通过<code>network.service</code>来实现<br>基于<code>network</code>的常用的命令有</p><ul><li>ifconfig</li><li>ifup</li><li>ifdown</li></ul><p>传统的<code>network.services</code>用于服务器上比较稳定的网络环境是非常方便的,唯一的问题是网络改动或切换时，必须要重启整个<code>network服务</code>，导致短暂的中断。</p><p>在Centos7之后，提供了一种新的网络配置方式<code>NetworkManager</code>,其主要工具是<code>nmtui</code>和<code>nmcli</code></p><ul><li><code>nmtui</code>是可以在<strong>SHELL</strong>下执行的一个简单图形界面，以图形化方式来管理网络配置，更简单易懂。<code>nmtui</code>的本质仍然是修改Linux的配置文件</li><li><code>nmcli</code>是命令行的形式来管理网络类似<code>ifconfig</code>、<code>ifup</code>等传统命令，但优势更明显</li></ul><p><strong>注意：</strong><br>传统的<code>network</code>与新生的<code>NetworkManager</code>两者同时管理网络时，会出现冲突</p><p>我们只需学会一种即可,首先我们要学会判断当前系统是使用的那种服务,使用下面两个命令进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled network</span><br><span class="line">systemctl is-enabled NetworkManager</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011638559.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面两个命令测试的是<strong>开机是否自动启动</strong></p><p>使用下面的命令可以看到当前是否启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status NetworkManager</span><br><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><p>不论哪种方式，我们Linux的本质任然是文件配置，CentOS7的网络配置文件默认在 <code>/etc/sysconfig/network-scripts/</code> 目录下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011642432.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong><code>ifcfg-eth0</code> 就是eth0网卡的配置</strong></p><p>使用 <code>ifconfig</code>命令产看当前的网络配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011644292.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上图中eth0的信息如下</p><blockquote><p><code>inet</code> 192.168.29.4  <strong>lPv4地址</strong><br><code>netmask</code> 255.255.240.0 <strong>子网掩码</strong><br><code>broadcast</code> 192.168.31.255 <strong>广播IP</strong><br>ether fa:16:3e:58:2b:a2 txqueuelen 1000 (Ethernet) <strong>MAC地址、速率、连接类型</strong><br>RX packets 398909 bytes 32892437 (31.3 MiB) <strong>接收数据包个数，大小</strong><br>RX errors 0 dropped 0 overruns 0 frame 0 <strong>接数错误数</strong><br>TX packets 104 bytes 6977(6.8 KiB) <strong>发送数据包个数，大小</strong><br>TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 <strong>发送错误数</strong></p></blockquote><hr><h1 id="配置Linux网络"><a href="#配置Linux网络" class="headerlink" title="配置Linux网络"></a>配置Linux网络</h1><h2 id="使用network配置网络"><a href="#使用network配置网络" class="headerlink" title="使用network配置网络"></a>使用network配置网络</h2><ol><li><p>配置ip地址<br>命令格式： <code>ifconfig 网卡名 IP地址 netmask 子网掩码</code></p></li><li><p>配置DNS服务器<br>Linux的DNS服务器在network下是基于文件配置的 配置文件路径为 <code>/etc/resolv.conf</code> 我们使用vim编辑这个文件就可以进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011651855.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="基于NetworkManager的配置"><a href="#基于NetworkManager的配置" class="headerlink" title="基于NetworkManager的配置"></a>基于NetworkManager的配置</h2><p>在使用<code>NetworkManager</code>的时候，我们需要先关闭 <code>network</code> 防止冲突,使用下面的命令<strong>关闭network网络服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop network</span><br></pre></td></tr></table></figure><p>想使用NetworkManager的前提是网卡可以被 NetworkManager管理，NetworkManager网络管理服务配置文件是 <code>/etc/NetworkManager/NetworkManager.conf</code> 我们使用vim来进行编辑,如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=true           //允许接口进行管理</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011709149.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>使用 <code>nmcli device</code> 可以查看网络可管理状态</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011712623.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面的状态可以通过下面的命令进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli networking</span><br><span class="line">nmcli networking on|off</span><br></pre></td></tr></table></figure><h3 id="通过nmtui配置网络"><a href="#通过nmtui配置网络" class="headerlink" title="通过nmtui配置网络"></a>通过nmtui配置网络</h3><p>在CentOS7中已经默认安装了nmtui工具，在SHELL中直接输入 <code>nmtui</code> 命令可以进行执行，下图就是<strong>nmtui工具的界面</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012109475.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>选择编辑网络连接，可以看到下面界面</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012111844.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>点击Edit后，进入编辑界面如下，默认ipv4是自动获取的，我们改为手动，点击show就看到需要配置的内容了</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012112803.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>配置Ip，子网掩码，网关，DNS等信息</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012113866.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>配置结束后，按方向键向下，一直到最后选择OK，保存，然后退出</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012115326.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在配置完后，也是需要重新加载一下配置文件的，执行下面的命令 <code>nmcli device connect ens33</code> 注意 <code>ens33</code> 是编辑的那个网卡的名字</p><h2 id="基于文件配置"><a href="#基于文件配置" class="headerlink" title="基于文件配置"></a>基于文件配置</h2><p>直接进入前面说的网卡配置文件进行修改 比如 eth0网卡的配置文件  <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012127898.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>记得修改后需要重新启动网卡<code>eth0</code>配置文件，使用命令 <code>ifdown eth0</code> 和 <code>ifup eth0</code></p><hr><h1 id="网络常用命令"><a href="#网络常用命令" class="headerlink" title="网络常用命令"></a>网络常用命令</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p><code>ping 目标IP地址</code>,通常用来诊断到目标IP地址的连通性，判断从本机到目标及其网络是否正常，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012132136.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>使用<code>netstat</code> 指令可以得知整个Linux系统的网络情况，选项如下</p><blockquote><p><code>-a</code>或<code>--all</code> 显示所有连线中的Socket。<br><code>-h</code>或<code>--help</code> 在线帮助。<br><code>-i</code>或<code>--interfaces</code> 显示网络界面信息表单。<br><code>-l</code>或<code>--listening</code> 显示监控中的服务器的Socket。<br><code>-n</code>或<code>--numeric</code> 直接使用IP地址，而不通过域名服务器。<br><code>-p</code>或<code>--programs</code> 显示正在使用Socket的程序识别码和程序名称。<br><code>-s</code>或<code>--statistics</code> 显示网络工作信息统计表。<br><code>-t</code>或<code>--tcp</code> 显示TCP传输协议的连线状况。<br><code>-u</code>或<code>--udp</code> 显示UDP传输协议的连线状况。</p></blockquote><p>常用的组合选项命令</p><p><code>netstat -natp</code><br>第一个红框表示正在监听TCP22 端口，进程ID为1018，进程名 sshd<br>第二个红框表示当前TCP的连接，及SSH连接<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012140009.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><h2 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h2><p><code>ss</code>命令是 Socket Statistics 的缩写，用来获取socket统计信息</p><p><code>ss</code> 的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。当服务器的socket连接数量变得非常大时，无论是使用<code>netstat</code>命令还是直接<code>cat /proc/net/tcp</code>，执行速度都会很慢。</p><p><code>ss</code>快的秘诀在于，它利用到了TCP协议栈中<code>tcp_diag</code>。<code>tcp_diag</code>是一个用于分析统计的模块，可以获得Linux内核中第一手的信息，这就确保了ss的快捷高效。</p><p>常用选项</p><blockquote><p><code>-t</code>: tcp 显示tcp连接<br><code>-a</code>: all 显示所有连接<br><code>-l</code>: listening 列出所有打开的网络连接端口<br><code>-s</code>: summary 显示Sockets摘要<br><code>-p</code>: progress 显示端口对应的进程<br><code>-n</code>: numeric 不解析服务名称，也可理解为以数字形式显示<br><code>-r</code>: resolve 解析服务名称<br><code>-m</code>: memory 显示内存情况</p></blockquote><p>比如常用的组合选项 <code>ss -lntp</code> 以数字形式显示tcp连接，并显示进程名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205012148035.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户和权限管理学习</title>
      <link href="/2022/05/01/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/"/>
      <url>/2022/05/01/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux用户"><a href="#Linux用户" class="headerlink" title="Linux用户"></a>Linux用户</h1><p>Linux有三种不同类用户</p><ol><li><strong>管理用户</strong>，即root用户，root用户是在安装操作系统时，由系统自动创建，具有Linux的所有权限。通常root用户是黑客在本机的终极目标。</li><li><strong>一般用户</strong>，即我们安装系统时创建的yjr1100。可以在操作系统上访问程序，如vim，数据库，WEB浏览器。可以创建保存文件到自己的HOME目录。无法修改系统配置文件</li><li><strong>服务用户</strong>，用于apache、邮件、打印服务等系统服务。这些服务用户与Linux系统用户进行交互，通常不需要我们人为的去更改。</li></ol><p>通常我们对Linux的操作过程是:使用普通用户登录进行查看，而需要修改Linux时，<strong>切换为root用户</strong>或使用<strong>root的权限</strong>进行操作</p><h2 id="Linux用户管理文件"><a href="#Linux用户管理文件" class="headerlink" title="Linux用户管理文件"></a>Linux用户管理文件</h2><p>用户管理文件存放在 <code>/etc/passwd</code> 文件中，包含每个用户的基本信息，我们可以使用vim打开该文件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011430766.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这个文件每一行有<strong>7列</strong>，中间用冒号隔开，分别是 <code>用户名：密码：用户id：组id：解释性描述：家目录：shell</code></p><ul><li><p><code>username</code>: 代表用户名，可以包含数字、<code>-</code>、<code>·</code>、<code>_</code>，但是不能<code>-</code> 开头，不能大于32个字符</p></li><li><p><code>password</code>: 用户口令，可以是 <code>x</code>、<code>*</code> 或者字母数字的随机组合</p><ul><li><code>x</code>：表示实际口令指向 <code>/etc/shadow</code></li><li><code>*</code>: 表示禁用用户</li><li><code>字母数字</code>：表示加密后的口令，这样一般不安全，可以被破解的</li></ul></li><li><p><code>UserID</code>: 用户的数字ID，root 默认是 0,普通用户从 1000 开始</p></li><li><p><code>GroupID</code>: 用户所属组ID，默认情况下，Linux会给每个用户新建一个用户组，与数字ID匹配</p></li><li><p><code>Userinfo</code>：类似于用户的备注信息，可以任意输入</p></li><li><p><code>Home Directory</code>：用户的家目录，登陆后用户默认所处的目录，默认是 <code>/home/用户名</code></p></li><li><p><code>Login Shell</code>：表示用户登录的SHELL程序</p><ul><li>默认可登录用户为<code>/bin/bash</code>,也可以自己定义一些其他的shell</li><li>无法登录的<strong>服务用户</strong>默认为 <code>/sbin/nologin</code> 表示无法登录</li></ul></li></ul><h2 id="用户的组管理文件"><a href="#用户的组管理文件" class="headerlink" title="用户的组管理文件"></a>用户的组管理文件</h2><p>用户的组管理文件放在 <code>/etc/group</code> 文件中，在Linux中每个用户都被分配到一个组名与用户名相同的组中</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011457978.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>这个文件一行 <strong>4列</strong>，分别是：<code>组名：口令：组id：组内用户(这个一般看不到，是隐藏的)</code></p><ul><li><code>Groupname</code>：每个用户都有与用户名相同的组，也是组的唯一名称</li><li><code>Password</code>：通常是<code>x</code>，表示指向 <code>/etc/shadow</code> 文件，也可是字母数字的随机组合</li><li><code>Group ID</code>：和<code>UserID</code> 一样，如果要创建一个特殊的组，表示管理员权限，建议分配一个独立的<code>Group ID</code> 避免 <code>Group ID</code>滥用</li><li><code>Group menbers</code>：表示组内成员</li></ul><h2 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a><code>/etc/shadow</code>文件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011459677.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>它是<code>/etc/passwd</code> 的补充，包含8列信息</p><ul><li><code>Username</code>：用户名</li><li><code>Password</code>：加密后的口令，对应在<code>/etc/password</code>第二列需要是x</li><li><code>Password history</code>：口令的最后修改日期，在1970年1月1日之后的天数</li><li><code>mindays</code>：用户必须保持该口令的最小天数</li><li><code>maxdays</code>：口令的使用最长天数，在此之后必须更改口令</li><li><code>warndays</code>：口令过期前，提供警告的天数</li><li><code>inactive</code>：口令过期后仍然可使用口令的天数，在此期间会提示修改口令</li><li><code>disable</code>：禁用账户后，在1970年1月1日之后的天数</li></ul><hr><h1 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p><code>useradd</code> 命令，格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure><p>选项有：</p><blockquote><p><code>-u</code> : 指定uid<br><code>-g</code> : 指定GID<br><code>-d</code> : 指定用户家目录<br><code>-C</code> : 输入备注信息<br><code>-M</code> : 表示不建立家目录<br><code>-S</code> : 自定义shell程序，不使用默认的&#x2F;bin&#x2F;bash<br><code>-e</code> : YYYY-MM-DD格式，输入用户的过期日期</p></blockquote><p>这样创建好后用户是默认没有密码的，我们只有设置好密码才能登录对应用户使用口令 <code>passwd 用户名</code> 给对应用户设置密码</p><p>注意：输入密码的过程中同样是没有回显的</p><p>我们也可以通过直接编辑&#x2F;etc&#x2F;passwd文件来添加用户确保以下几点:</p><ul><li>添加用户的主目录，并确保你想添加的用户和用户组有目录所有权</li><li>确保编辑文件的格式正确</li><li>确保用户有与其名称对应的私有组</li></ul><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p><code>userdel</code> 命令，格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项为 <code>-r</code> 表示一并删除用户家目录，一般来说，我们会保留家目录</p><h2 id="添加和删除用户组"><a href="#添加和删除用户组" class="headerlink" title="添加和删除用户组"></a>添加和删除用户组</h2><p><code>groupadd</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g GID 组名</span><br></pre></td></tr></table></figure><p>注意： 如果不使用<code>-g</code> 来指定 GID，系统会默认从1000 开始分配</p><p><code>groupdel</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><p>直接删除组</p><p>删除时，如果有用户的<strong>主要组</strong>是这个组，则需要<strong>先删除用户</strong>才能删除该组，所谓 <strong>主要组</strong> 就是用户的<code>/etc/passwd</code> 文件中的组ID那个组</p><p>一个用户是可以属于多个组的，我们可以使用以下命令更改用户的组</p><ul><li>将现有用户添加到<strong>辅助组</strong>，请使用带有-G 选项<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G groupname username </span><br></pre></td></tr></table></figure></li><li>将用户添加到多个辅助组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G groupname1,groupname2 username</span><br></pre></td></tr></table></figure></li><li>我们必须使用 -g 改变用户的<strong>主要组</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g groupname username</span><br></pre></td></tr></table></figure></li></ul><p>使用id命令可以查看用户的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id username</span><br></pre></td></tr></table></figure><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p><code>su 用户名</code> 切换为指定用户</p><p>比如切换到root 用户，<code>su root</code> ，这里需要输入<code>root</code>用户的密码</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011530194.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面su命令必须要知道root的密码才行。而root密码是一个非常敏感的密码，为了保障root密码的安全，Linux系统设计了<code>sudo</code>这个命令，即用<code>root的身份</code>执行一个命令，而不是切换为root用户。</p><p>sudo通过visudo工具来实现，Centos7默认已经安装有visudo。如果没有sudo命令，可以通过<code>yum install sudo</code>来安装。</p><p>使用sudo时需要输入当前用户自身的密码。普通用户如果要使用sudo，必须经过<code>root用户</code>的设置(允许)才行。下图就是普通用户使用sudo，但是提示，用户不在 <code>sudoers</code> 文件中，操作被拒绝了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011537062.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们可以看一下 <code>/etc/sudoers</code> 文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011540416.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在文件中我们可以找到上面两行，第一行是说<strong>允许 root 用户运行任何命令</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011542590.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>第二行是说 <strong>允许 wheel 组的用户执行sudo中的任何命令</strong> </p><blockquote><p>%wheel 代表用户组</p></blockquote><p>所以如果我们想要用户有执行sudo命令的权限，我们只需要用<code>root</code> 用户，执行下面命令，把对应用户加入到 <code>wheel</code> 组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G wheel yjr1100</span><br></pre></td></tr></table></figure><p>再次执行<code>sudo</code>命令，发现可以执行了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011545477.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim入门</title>
      <link href="/2022/05/01/vim%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/01/vim%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim概述"><a href="#Vim概述" class="headerlink" title="Vim概述"></a>Vim概述</h1><p>在Linux系统中<strong>一切皆文件</strong>，因此当我们在命令行下更改文件内容时，不可避免地要用到文本编辑器。相比图形界面编辑器，命令行编辑器的优势是可以通过任何shell、字符终端或SSH连接来使用，不需要图形界面。</p><p>Vim文本编辑器，具有使用简单、功能强大、是 Linux众多发行版的默认文本编辑器等特点</p><h1 id="Vim使用"><a href="#Vim使用" class="headerlink" title="Vim使用"></a>Vim使用</h1><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>直接使用 <code>vim</code> 命令后跟文件名可以新建或者打开之前的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim test</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011202390.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="三种常见模式："><a href="#三种常见模式：" class="headerlink" title="三种常见模式："></a>三种常见模式：</h2><ol><li><p>正常模式 </p><p>在此模式下，我们可以使用快捷键</p></li><li><p>编辑模式</p><p>才此模式下，可以输入</p></li><li><p>命令行模式</p><p>在此模式下我们可以保存退出，存盘，不保存等</p></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在终端输入 vim xxx  ——》 进入 一般&#x2F;正常模式</p><p><strong>正常模式</strong> 输入 i或者 a              ——》 进入编辑模式<br>其实除了i 和 a 还有一些别的按键可以进入编辑模式<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011224959.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>正常模式</strong> 输入<code>:</code>      ——》 进入 命令行模式  </p><p>其他模式下，输入ESC 返回到正常模式</p><p>命令行模式输入 <code>wq</code> ，<code>q</code>，<code>q!</code> , 等命令实现 写入退出，退出，强制退出</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011227740.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="快捷键使用"><a href="#快捷键使用" class="headerlink" title="快捷键使用"></a>快捷键使用</h2><ol><li><p>光标的移动<br>在正常模式下进行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011209946.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>复制删除粘贴操作<br>在正常模式下进行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011216622.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>`yy` 复制光标所在行  `5yy` 从光标所在行开始，向下复制5行`p` 粘贴`dd` 删除当前行`5dd` 删除5行`G` 光标到文件的最末行`gg` 光标到文件的最首行`u` 撤销上一步操作</li><li><p>命令行模式</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202205011228366.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>`/xxx` 查找xxx`n` 查看找到的下一个`:set nu` 显示行号`:set nonu` 取消显示行号</li><li><p>可以在命令行模式下 <code>:set nu</code> 先显示行号，然后在正常模式下 <code>行号+ shift+g</code> 跳转到指定行</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件系统</title>
      <link href="/2022/04/30/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/30/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p>在Linux系统中，任何东西都可以简化为文件，比如</p><ul><li><strong>分区</strong> 对应到 <code>/dev/sda1</code></li><li><strong>硬件部件</strong> 对应刻 <code>/dev/cdrom</code></li></ul><p><code>/</code> 是所有路径的开始，是所有目录的根</p><p><code>ls /</code> 显示Linux根目录下的文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301938371.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>Linux 整个目录是树状结构，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301948368.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p>&#x2F; 根目录<br>&#x2F;boot  存放的启动Linux时需要使用的内核文件，包括链接文件以及镜像文件<br>&#x2F;etc   所有的系统管理需要的配置文件和子目录列表<br>&#x2F;lib   系统开机所需要的动态连接共享库<br>&#x2F;bin   用户指令集合<br>&#x2F;sbin  超管命令存放，存放系统管理员的系统管理程序<br>&#x2F;run   运行目录，是一个临时文件系统，存储系统启动以来的信息，当系统重启时，这个目录下的人家应该被删除，如果系统上有 <code>/var/run</code> 目录，应该让他指向<code>/run</code><br>&#x2F;lost+found 一般情况是空的，系统非法关机后，存放一些文件<br>&#x2F;tmp   临时目录<br>&#x2F;root  系统管理员的用户主目录<br>&#x2F;home  用户的家目录，以用户的账号命名<br>&#x2F;usr   用户的很多应用程序和文件都放在这个目录<br>&#x2F;usr&#x2F;src 内核源码默认的放置目录<br>&#x2F;var   存放经常修改的数据，比如日志文件（<code>/var/log</code>），邮件等<br>&#x2F;opt   给主机安装软件放的目录，安装软件<br>&#x2F;media 系统会识别一些硬件设备然后挂载到这个目录下<br>&#x2F;dev   管理设备，存放的是Linux的外部设备，在Linux中访问设备和访问文件的方法是相同的<br>&#x2F;mnt   让用户临时挂载别的文件系统，可以把外部存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以产看外部存储设备里的内容了<br>&#x2F;selinux 安全子系统<br>&#x2F;proc  管理内存空间，虚拟的目录，是系统内存的映射，可以直接访问这个目录来获取系统信息，这个目录不在硬盘上，而是在内存里，也可以直接对里面的一些文件进行修改<br>&#x2F;srv<br>&#x2F;sys    这三个与Linux内核相关</p></blockquote><hr><h1 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h1><h2 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h2><p><strong>创建目录</strong>: mkdir<br><strong>创建文件</strong>: touch<br><strong>查看文件内容</strong>: cat<br><strong>删除目录或文件:</strong> rm<br><strong>删除非空目录:</strong> rm -rf file目录<br><strong>删除日志:</strong> rm <em>log(等价: $find .&#x2F; -name“</em>log”-exec rm { ;)<br><strong>移动(剪切) :</strong> mv 原文件 目标文件<br><strong>复制文件:</strong> cp 原文件 目标文件<br><strong>复制目录:</strong> cp -r 原目录 目标目录</p><h2 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h2><p>**找到文件&#x2F;目录位置:**cd<br><strong>切换到上一个工作目录:</strong> cd -<br><strong>工换到父目录:</strong> cd ..<br><strong>切换到home目录:</strong> cd 或 cd ~<br><strong>切换到&#x2F;root目录:</strong> cd &#x2F;root<br><strong>显示当前路径:</strong> pwd<br><strong>更改当前工作路径为path:</strong> $cd path</p><p>绝对目录：从Linux的根目录开始<br>相对路径：路径不是从Linux的根目录开始，而是相对于当前<code>pwd</code>的目录</p><h2 id="目录操作-1"><a href="#目录操作-1" class="headerlink" title="目录操作"></a>目录操作</h2><p>ls:显示当前目录下的文件，常用选项:</p><blockquote><p>-a 列出所有文件，包含隐藏文件<br>-l 以列表形式显示<br>-1(数字1) 以分行显示<br>-t 按时间排序<br>-r 排倒序<br>-R 包含目录的子目录及文件</p></blockquote><p>按时间排序，以列表的方式显示目录 <code>ls -lt</code><br>如果<code>ls -lt</code>使用非常频繁，我们可以给他设置一下别名，在<code>.bashrc</code>中设置命令别名:alias lsl&#x3D;’ls -Irt’</p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>使用<code>ls -l</code> 列出文件详细内容后第一个字母</p><ul><li>—    一杠代表普通文件（文本文件，二进制文件，压缩文件</li><li>d    一个字母d代表文件夹（蓝色显示）</li><li>b    设备文件(块设备) 存储设备硬盘，U盘&#x2F;dev&#x2F;sda</li><li>c    设备文件(字符设备) 打印机，终端&#x2F;dev&#x2F;tty1</li><li>l    链接文件(淡蓝色)</li><li>s    套接字文件</li><li>p    管道文件</li></ul><p>ln命令 创建链接文件<br><code>ln -s 文件A 文件B</code><br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302034805.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><hr><h1 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h1><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><p>使用 <code>ls -l</code> 命令可以看到文件权限</p><p>在Linux中，针对每个文件的权限分配9个位来表示，定义了<strong>文件的所有者</strong>，<strong>文件所属组</strong>和<strong>其他用户</strong>对文件的操作权限，包含<code>读，写，执行</code>三个维度</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302040870.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在九位权限中：</p><blockquote><p>前三位代表文件所有者权限，图中红色<br>中间三位代表文件所属组的权限，图中黄色<br>后三位代表其他人权限，图中蓝色</p></blockquote><p>其中<code>rwx</code>分别代表，读取权限、写入权限、执行权限而<code>-</code> 则表示，不具有相应的权限，因为<strong>文件</strong>和<strong>目录</strong>是不同的所以其rwx的含义也不同，如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302041154.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h2><p>在更改过程中，每种权限都被分配了一个数字，<strong>r&#x3D;4 w&#x3D;2 x&#x3D;1</strong>，<code>rwx</code> 对应二进制<code>1 1 1</code>，十进制<code>4 2 1</code>, 即rwx&#x3D;7<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302058124.PNG" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><br>更改文件权限为rwxrwxrwx使用命令<code>chmod 777 file</code><br>更改文件权限为rwxrw-rw-使用命令<code>chmod 766 file</code><br>使用以下命令，可以更改<strong>递归</strong>更改<strong>整个目录</strong>的权限，包含<strong>子目录</strong>和<strong>子文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /test/myapp</span><br></pre></td></tr></table></figure><p>除了使用数字，还用可以用字母来表示权限，可以分别使用+(加号）和-(减号)来打开或关闭权限</p><p>在使用字母时 <code>u</code>代表用户(9位权限中的前三位) <code>g</code>代表组(中间三位) <code>o</code>代表其他人(最后的三位)  <code>a</code> 代表全部权限即777,r、w、x则分别表示自己的含义</p><blockquote><p>如更改权限为r-xr-xr-x可以写成 <code>chmod a-w file</code>,即所有权限减去w<br>如将当前文件所属用户的写权限去掉，可以写成 <code>chmod u-w file</code>,注意是基于当前权限修改</p></blockquote><p>使用字母修改权限时，仅更改明显指出的权限，没有列出的权限不会更改</p><h2 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h2><p>当<strong>普通用户</strong>创建一个文件时，其默认权限是rw-rw-r–<br>当<strong>普通用户</strong>创建一个目录时，其默认权限是rwxrwxr-X<br>当<strong>root用户</strong>创建文件时，其默认权限是rw-r–r–<br>当<strong>root用户</strong>创建目录时，其默认权限是rwxr-xr-x</p><p>上面提到这些<strong>默认权限</strong>是由<code>umask(反掩码)</code>决定的</p><p>反掩码 umask 显示的值表示了当前用户新建目录和文件的权限</p><ul><li>新建目录的权限是 所有权限减去反掩码 即 <strong>新建目录权限 &#x3D; 777 - umask</strong></li><li>新建文件的权限同理 即 <strong>新建文件权限 &#x3D; 777 - umask</strong></li></ul><p>如果我们想要修改新建目录的默认权限，我们可以修改umask值后再进行创建文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302120815.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>注意，上面这样的操作只是临时更改了这个shell窗口中的umask值，如果我们要永久的修改，需要编辑 <code>$HOME/.bash.rc</code> 在文件的最后加入 <code>umask 311</code></p><h2 id="文件所有权"><a href="#文件所有权" class="headerlink" title="文件所有权"></a>文件所有权</h2><p>作为普通用户是无法更改文件或者目录的所有权的，只有root用户可以更改所有权，下图红色表示所有者，黄色表示文件所属组</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204302124732.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>修改文件所有权，可以使用root用户执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将文件123的所有者改为root</span><br><span class="line">chown root 123</span><br><span class="line">将文件123的所属组改为root</span><br><span class="line">chgrp root 123</span><br><span class="line">将文件123的所有者和所属组都改为root</span><br><span class="line">chown root:root 123</span><br><span class="line">将文件夹Pictures和其子文件夹和子文件的所有者和所属组均为改root</span><br><span class="line">chown -R root:root Pictures</span><br></pre></td></tr></table></figure><hr><h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><p>使用<code>cat</code> 命令</p><blockquote><p><code>-n</code> 显示行号<br><code>-A</code> 包含特殊字符，比如回车</p></blockquote><p>使用<code>tac</code> 命令，显示文件内容，但是和<code>cat</code> 相反，先显示最后一行，再显示倒数第二行</p><p>使用 <code>more</code> 命令 当文件内容很多，一页显示不全时使用，可以按<code>空格</code>向后翻页，<code>回车</code> 显示下一行， <code>Ctrl+D</code> 向上， <code>Ctrl+F</code> 向下</p><p>使用 <code>less</code> 命令 作用和<code>more</code> 类似，但是功能多一些，可以使用方向键上下翻动，可以输入查找，通过<code>N</code> 和 <code>n</code> 向前和向后查找</p><p>使用 <code>head</code> 命令 显示文件前10行</p><blockquote><p><code>-n</code> 选项，显示前n行， <code>head -n 4 11.txt</code> </p></blockquote><p>使用 <code>tail</code> 命令 显示文件后10行</p><blockquote><p><code>-n</code> 选项，显示后n行，<br><code>-f</code> 选项，动态显示文件后10行，可以试试观察文件，常用于实时产看日志 或者直接使用命令 <code>tailf</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门学习</title>
      <link href="/2022/04/30/Linux%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/30/Linux%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h1><p>计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出(文字、图片、音频、视频等)。计算机由硬件和软件组成:</p><ul><li><p>硬件是计算机赖以工作的实体，包括显示器、键盘、鼠标、硬盘、CPU、主板等</p></li><li><p>软件会按照用户的要求协调整台计算机的工作，比如Windows、Linux、Mac OS、Android等操作系统，以及Office、QQ、迅雷、微信等应用程序。</p></li></ul><p>**操作系统(Operating System, OS)<strong>是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的</strong>桥梁(或者说接口、中间人、中介等)**。</p><p>操作系统会控制其他程序运行,管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如:文件系统、设备驱动、用户界面、系统服务等</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301650571.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>操作系统使得应用程序无法直接与硬件打交道，而是必须经由操作系统的内核，协调多个程序运行避免恶意程序破坏其他进程独占资源，保证了多任务平稳的运行</p><p>操作系统向外提供系统调用,然后系统调用被封装成库向外提供库调用，程序员只需要根据库的API接口进行编程，不用关心底层硬件的不同，便于程序的移植。</p><h1 id="Linux系统发展史"><a href="#Linux系统发展史" class="headerlink" title="Linux系统发展史"></a>Linux系统发展史</h1><p>Linux在设计之初，是一个基于POSIX的多用户、多任务并且支持多线程和多CPU的操作系统，它是由世界各地成千上万的程序员设计和开发实现。</p><p>当初开发Linux系统的目的就是建立不受任何商业化软件版权制约的、全世界都能自由使用的类Unix操作系统兼容产品。</p><h2 id="什么是Unix"><a href="#什么是Unix" class="headerlink" title="什么是Unix"></a>什么是Unix</h2><p>Unix是一种计算机操作系统，具有多任务、多用户的特征，是商业化的，和硬件配套使用 IBM—AIX、HP—HP-UX、SUN—Solaris</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301839958.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="Linux系统主要特性"><a href="#Linux系统主要特性" class="headerlink" title="Linux系统主要特性"></a>Linux系统主要特性</h2><ol><li>基本思想：一切皆文件，每个软件都有特定用途</li><li>兼容POSIX1.0标准： 可移植操作系统接口，可在其他兼容POSIX标准的系统上执行程序</li><li>多用户多任务：各个用户对于自己的文件有自己的权力，多个程序同时并独立的运行</li><li>支持多种平台：可以运行在多种硬件平台上，比如x86、680x0、SPARC、Alpha等处理器的平台</li><li>良好的界面：同时具有字符界面和图形界面</li><li>完全免费</li></ol><h2 id="Linux系统版本"><a href="#Linux系统版本" class="headerlink" title="Linux系统版本"></a>Linux系统版本</h2><h3 id="内核版"><a href="#内核版" class="headerlink" title="内核版"></a>内核版</h3><p>Linux内核版本指的就是Linux的核心版本，在<a href="https://www.kernel.org/">内核官方网站</a><a href="http://www.kernel.org发布.**内核/">www.kernel.org发布。**内核</a>** 指的是一个提供硬件抽象层、磁盘及文件系统控制、多任务等功能的系统软件。一个内核不是一套完整的操作系统。Linux内核的主要模块（或组件）分以下几个部分:<strong>存储管理</strong>、<strong>CPU和进程管理</strong>、<strong>文件系统</strong>、<strong>设备管理和驱动</strong>、<strong>网络通信</strong>，以及<strong>系统的初始化(引导)<strong>、</strong>系统调用</strong>等。</p><h3 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h3><p>预先整合好的Linux系统，一般使用者不需要重新编译，直接安装后进行小幅度更改设置就可以使用</p><p><code>Redhat</code> —— 最著名的Linux版本，企业级<br><code>CentOS</code> —— 要求高稳定性服务器使用<br><code>Ubuntu</code> —— 以桌面应用为主，多媒体<br><code>SUSE</code>   —— 连接数据库最稳定</p><h2 id="Linux的特点"><a href="#Linux的特点" class="headerlink" title="Linux的特点"></a>Linux的特点</h2><ol><li>由目的单一的小程序组成;</li><li>组合小程序完成复杂任务一切皆文件</li><li>尽量避免捕获用户接口</li><li>配置文件保存为纯文本格式</li><li>Linux的shell，是人机接口。Linux的shell 包括GUI和CLI两种类型。<ol><li>GUI指图形界面，与windows类似。比较常见的有gnome、KDE和xface等</li><li>CLI是命令行界面。比较常见的有bash.csh、zsh、 ksh 和tcsh等，我们通常使用用bash。</li></ol></li></ol><hr><h1 id="Linux命令行基础"><a href="#Linux命令行基础" class="headerlink" title="Linux命令行基础"></a>Linux命令行基础</h1><p>下面的命令行是基于 CentOS7 的版本</p><h2 id="登录Linux"><a href="#登录Linux" class="headerlink" title="登录Linux"></a>登录Linux</h2><p>Liunx命令行登录时是没有回显的，我们只需要输入完密码回车结束就好</p><p>Linux命令提示符有两种：<code>#</code> 和 <code>$</code></p><ol><li><code>$</code> 号是使用普通用户登录后的提示符</li><li><code>#</code> 号是超级用户root登录后的提示符</li></ol><h2 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h2><p>注意Linux命令是严格区分大小写的</p><ol><li><code>Ctrl+C</code> 终止当前输入和操作</li><li><code>TAB</code> 补全当前的命令，有的系统按一下就可以进行自动补齐，有点需要按两下</li><li><code>Ctrl+A</code> 使光标移到最前面</li><li><code>Ctrl+E</code> 使光标移到最后</li><li><code>Ctrl+D</code> 退出当前终端</li><li><code>Ctrl+L</code> 清屏</li><li><code>Ctrl+Z</code> 暂停当前进程，和Ctrl+C不同，Ctrl+Z暂停后可以恢复进程</li><li><code>ifconfig</code> 查看当前接口状态，默认为自动获取IP，默认网口为ens33</li><li><code>ss -lnt</code> 查看当前开放的tcp端口</li></ol><h3 id="Linux命令的语法"><a href="#Linux命令的语法" class="headerlink" title="Linux命令的语法"></a>Linux命令的语法</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301919332.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>有时命令会带有一个或者多个选项。</p><p>通常选项由<strong>单个字母构成</strong>，并在字母前加<strong>一个连接符</strong><code>-</code>，有时因为选项太多，我们可以使用更简单的写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a -l -t和ls -alt是一种含义</span><br></pre></td></tr></table></figure><p>有些选项也可以是一个<strong>连续的单词</strong>，我们称为<strong>长选项</strong>，使用<strong>两个连接符</strong>加一个完整单词如<code>ls --help</code><br>–help是多数命令的帮肋选历,可以查看命令的基本使用方式法，同时，多数命令在选项之后可以接参数，参数通常是指文件名、目录、用户名、设备。其实可以理解为命令要执行操作的对象。</p><p>总结一下，选项是告诉命令<strong>怎样执行</strong>，参数告诉命令<strong>对谁执行</strong></p><h3 id="Shell-History"><a href="#Shell-History" class="headerlink" title="Shell History"></a>Shell History</h3><p>我们可以通过 <code>history</code> 命令来查看以前执行过的命令</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301926508.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p>!数字 执行history中对应编号的命令<br>!!    执行上一条命令<br>!?is? 执行history中包含<code>is</code>的命令<br>还可以通过上下键来选择历史命令</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 Web服务器</title>
      <link href="/2022/04/30/windowsServer2012Web/"/>
      <url>/2022/04/30/windowsServer2012Web/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB服务器概述"><a href="#WEB服务器概述" class="headerlink" title="WEB服务器概述"></a>WEB服务器概述</h1><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301249777.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>web服务器一般也称为：网页服务器，HTTP服务器 </p><p>web服务器使用的协议是： http协议, <strong>端口号：80</strong></p><p><strong>web服务器的作用：</strong><br>​    web服务器是将我们做好的网页发布出去,让网民可以通过网络远程访问我们的网页，比如京东网站服务器，</p><h2 id="WEB服务中的元素"><a href="#WEB服务中的元素" class="headerlink" title="WEB服务中的元素"></a>WEB服务中的元素</h2><p>HTTP (HyperText Transfer Protocol，超文本传输协议)，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，HTTP是一个客户端(用户)和服务端(网站)之间请求和应答的标准</p><p>www (World Wide Web，万维网)是一个透过互联网访问的，由许多互相链接的超文本组成的系统,万维网是信息时代发展的核心，也是数十亿人在互联网上进行交互的主要工具。今天我们通常用www，表示一台WEB主机。</p><p>URL(Uniform Resource Locator，统一资源定位符)互联网上的标准地址，统一资源定位符的完整格式如下</p><blockquote><p><a href="https://bbs.sangfor.com.cn:80/plugin.php?id=service">https://bbs.sangfor.com.cn:80/plugin.php?id=service</a></p></blockquote><h2 id="WEB服务器常见类型"><a href="#WEB服务器常见类型" class="headerlink" title="WEB服务器常见类型"></a>WEB服务器常见类型</h2><p>Windows Server内置了一个WEB服务器，名为IIS（Internet information Service）互联网信息服务，使用动态语言 <code>APS/ASPX</code></p><p>IIS除了提供HTTP协议的WEB浏览，还可以提供FTP&#x2F;FTPS、NNTP、HTTPS、SMTP等服务</p><p>在Linux中，常用的WEB器有多种，如</p><ul><li>APACHE,可以结合PHP</li><li>TOMCAT,以JAVA为主</li><li>NGINX,以静态页面为主</li></ul><p>除此以外,还有一些厂商的WEB服务器，比如：</p><ul><li>IBM公司的WebSphere，以JAVA为主</li><li>Oracle的WebLogic，以JAVA为主</li></ul><h1 id="使用IIS部署web服务器"><a href="#使用IIS部署web服务器" class="headerlink" title="使用IIS部署web服务器"></a>使用IIS部署web服务器</h1><p>和DNS，DHCP服务器类似，我们也是在管理工具中添加这个IIS服务，记得安装时勾选安全响应的功能，即把Web服务器下安全性的功能都勾选上</p><ol><li><p>winxp 客户机 win2012web服务器 连在同一个交换机在同一网段，相互ping通</p></li><li><p>安装IIS里的web插件，和安装DNS类似，不过这里选择的不是网络服务而是“应用程序服务器”，里面有IIS ，双击里面还有万维网服务，选中万维网服务，安装</p></li><li><p>安装完后我们netstat -an 来看一下<strong>80端口</strong>已经开了，说明服务器已经可以用了，只是网页没有发布。</p><p>这个时候我们再xp打开浏览器，访问这个服务器的IP就会看到“建设中”这三个字，这是IIS自带的默认网站，它的路径：C:\Inetpub\wwwroot   这个网站有很大的漏洞。我们去开始—管理工具，找到“Internet信息服务管理器” 里面有个网站，默认网站，右键停止它。</p><p><strong>注意：因为web服务器上唯一的网站停止了，所以80端口自动就关闭了</strong></p></li><li><p>发布网站：在网站那右键新建网站，输入个描述，选择IP，一路下一步。完成后设置<strong>默认文档</strong>，右键刚才建的网站，属性里有个文档，设置一下它的主页，把其他的都删了，自己添加一个。</p></li><li><p>我们重复第4 步，再次发布一个新的网站</p><p>我们发现它是停止的，右键点击启动报错，这是因为端口号冲突了，</p><p>方法一：同一IP，不同端口号<br>        我们把端口改为81，这样就可以同时发布了，但是访问的时候，没有写端口默认80,如果想要访问其他的，需要手动输入端口号。（适用于专业人士测试网站）<br>方法二：同一IP，同一端口，不同域名<br>        在属性里不改端口号，我们点击IP后面的高级，点击编辑，写一个主机头值，也就是完整的域名。这样同一个端口和IP，因为主机头值不同所以可以区别开，但是，我们只能通过域名来访问了。所以我们需要同时设置一下DNS服务器，给客户机配置好DNS，因为只有IP，端口，域名三个都相同才可以访问到该网站。通过IP已经不可以访问了。</p></li></ol><h2 id="IIS的安全配置"><a href="#IIS的安全配置" class="headerlink" title="IIS的安全配置"></a>IIS的安全配置</h2><p>默认状态下，所有的用户匿名连接IIS网站，如果对网站的安全性要求高，或网站中有机密信息，就需要对用户限制,禁止匿名访问，而只允许特殊的用户账户才能进行访问。可以通过IIS“身份验证”功能实现</p><p>点击刚才的网站，双击<strong>身份验证</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301424007.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>windows身份验证</strong>:集成Windows验证是一种安全的验证形式，用户名和密码在通过网络发送前会经过散列处理，因此可以确保安全性。如果是域环境，会自动读取用户身份验证。Windows身份验证优先于基本验证，但它并不提示用户输入用户名和密码，只有Windows验证失败后，浏览器才提示用户输入其用户名和密码。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204301426370.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>摘要式身份验证</strong>:该验证只能在带有Windows域控制器的域中使用。域控制器必须具有所用密码的纯文本复件，因为必须执行散列操作并将结果与浏览器发送的散列值相比较。</p><p><strong>基本身份验证</strong>:该验证会“模仿”为一个本地用户(即实际登录到服务器的用户)，再访问Web服务器时登录。若以基本验证方式验证用户，则用户必须具有服务器“本地登录”的权限。使用基本身份验证方法将导致密码以未加密形式在网络上传输</p><p>我们需要先禁用 <code>匿名身份验证</code> 然后更具需要打开其他的身份验证</p><p>我们还可以通过 <strong>IP地址和域限制</strong> 设置允许哪些IP访问或者拒绝哪些IP访问</p><h2 id="网站类型"><a href="#网站类型" class="headerlink" title="网站类型"></a>网站类型</h2><p><strong>静态网站</strong>：不可以和用户互动，一般扩展名为.html或.htm</p><p>只有前台，没有后台数据库</p><p><strong>动态网站：</strong>可以与客户进行互动，在静态网页上内置的了动态语言（php，asp，jsp，java，python），一般扩展名为.php或.asp等，</p><p>asp是微软的，在window上发布，IIS+ASP+SQL Server</p><p>php不是微软的，推荐在linux里发布:Apache+php+mysql</p><p>发布动态的网页，开始和前面的都一样，不过新建网页时有相关权限勾线，我们要勾选“<strong>读取”，“运行脚本”，“执行”</strong>, 然后在网站下面还有一个web扩展，我们打开Active Server Page 选择允许，</p><hr><h1 id="FTP服务器"><a href="#FTP服务器" class="headerlink" title="FTP服务器"></a>FTP服务器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>File Transfor Protocol（文件传输服务器）</p><p>FTP服务器功能几乎登445文件共享服务器。</p><p>一般内部文件共享使用SMB服务器，对外文件共享使用FTP服务器。</p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><p>端口号：20&#x2F;21</p><p>21端口：控制端口</p><p>20端口：数据端口</p><p>FTP协议有两种模式：主动模式，被动模式</p><p>主被动模式的选择在客户机，但所谓主被动是站在服务器的角度说的，看服务器是主动连接还是被别人连接。</p><h2 id="使用IIS部署FTP服务器"><a href="#使用IIS部署FTP服务器" class="headerlink" title="使用IIS部署FTP服务器"></a>使用IIS部署FTP服务器</h2><ol><li><p>连接客户机，服务器，连接到同一交换机，配置IP，相互ping通</p></li><li><p>安装IIS里面的<strong>文件传输协议（FTP）服务</strong> 在万维网的下面。</p></li><li><p>打开cmd，netstat -an ，发现21端口已经开了，和web一样，它也有一个默认的共享文件，路径是： C:\Inetpub\ftproot</p></li><li><p>开始—管理工具—IIS （它还是IIS这个软件，但是里面有一个FTP服务）</p></li><li><p>我们只需要把共享的文件放在那个默认的文件夹里就可以共享了，</p></li><li><p>客户机在文件资源管理器（我的电脑），地址栏输入：<code>ftp://10.1.1.2</code>，10.1.1.2是服务器IP，就可以访问了。</p><p>当然这个站点也是有漏洞的，我们可以像web一样自己新建一个共享的文件夹。在FTP站点上右键—–新建—-起个名字—–一路下一步—最后权限都勾选上，因为是和文件夹权限取交集，那么我们只用关心文件夹的NTFS权限就可以了。</p></li><li><p>我们在默认的站点那里右键属性—安全账户，我们发现勾选了允许匿名访问，即不用输入账号密码就可以访问了。</p><p>那是因为我们在安装IIS的时候，自动创建了一个以 IUSR_+计算机名的用户，这是一个Internet来宾账户，当我们允许匿名访问的时候，服务器会把这个用户的账户密码发个客户机，客户机自动实现登录，所以看起来用户是没有输入密码和账户的，但是事实上，任何访问都需要一个身份。</p><p>我们不勾选允许匿名访问，那么我们就可以利用以前学的NTFS权限来设置可以访问的用户。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 文件服务器</title>
      <link href="/2022/04/29/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/29/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="文件服务器概述"><a href="#文件服务器概述" class="headerlink" title="文件服务器概述"></a>文件服务器概述</h1><p>在计算机应用场景中，我们经常需要在不同设备之间传输文件</p><p>通常我们可以使用IM工具、**文件传输服务器(FTP)**来传送文件</p><p>如果有windows域环境,我们可直接使用windows内置的文件共享功能，结合域用户来管理权限，简单便捷的完成文件传输任务。</p><p>文件服务器本质上是<strong>网络上的一个共享文件夹</strong>，通过windows的权限管理，管理员可以决定什么样的用户访问什么文件夹，管理员有权限配置用户的访问权限，我们可以使用活动目录管理和发布共享文件夹</p><h1 id="文件系统概述"><a href="#文件系统概述" class="headerlink" title="文件系统概述"></a>文件系统概述</h1><p>文件系统就是在外部存储设备上组织文件的方法</p><p>文件系统类型有</p><blockquote><p>NTFS  这个是微软目前比较新的 这个可以给文件夹设置权限</p><p>FAT   这个是微软原来的 这个不可以设置</p><p>EXT   这个是Linux 的</p></blockquote><h1 id="NTFS文件系统权限"><a href="#NTFS文件系统权限" class="headerlink" title="NTFS文件系统权限"></a>NTFS文件系统权限</h1><p>NTFS是windows操作系统格式化磁盘的一个选项，准确说是一种文件系统格式</p><p>NTFS有四个主要特性：<strong>压缩</strong>、<strong>加密</strong>、<strong>配额</strong>、<strong>安全</strong></p><p>NTFS给普通用户组users的默认权限是只读</p><h2 id="NTFS安全权限概述"><a href="#NTFS安全权限概述" class="headerlink" title="NTFS安全权限概述"></a>NTFS安全权限概述</h2><ol><li><p>通过设置NTFS权限，实现不同的用户访问的权限</p></li><li><p>分配了正确的访问权限，用户才能访问其资源</p></li><li><p>设置权限繁殖资源被篡改，侵删。</p></li></ol><h2 id="NTFS文件系统特点"><a href="#NTFS文件系统特点" class="headerlink" title="NTFS文件系统特点"></a>NTFS文件系统特点</h2><ol><li><p>提高磁盘读写性能</p></li><li><p><strong>可靠性</strong></p><p><strong>加密文件系统</strong></p><p><strong>访问控制列表（设置权限）</strong></p><p>这些是我们关心的</p></li><li><p>磁盘利用率</p><p>压缩</p><p>磁盘配额</p></li><li><p>支持单个文件大于4G</p></li></ol><h2 id="配置NTFS权限"><a href="#配置NTFS权限" class="headerlink" title="配置NTFS权限"></a>配置NTFS权限</h2><p>在文件夹–&gt;右键–&gt;属性–&gt;安全 中点击编辑，进行权限的配置</p><h3 id="取消权限继承"><a href="#取消权限继承" class="headerlink" title="取消权限继承"></a>取消权限继承</h3><p>作用：取消后，可以任意修改权限列表</p><p>方法：文件夹右键属性–安全–高级–去掉第一个对勾–选择复制</p><h3 id="文件机器及文件夹权限"><a href="#文件机器及文件夹权限" class="headerlink" title="文件机器及文件夹权限"></a>文件机器及文件夹权限</h3><table><thead><tr><th>文件和文件夹权限</th><th>权限内容</th></tr></thead><tbody><tr><td>完全控制</td><td>拥有读取，写入，修改，删除文件，及特殊权限</td></tr><tr><td>修改</td><td>可以删除以及读取写入，执行</td></tr><tr><td>读取和执行</td><td>读取文件夹文件，执行文件夹里的程序</td></tr><tr><td>读取</td><td>只能读取</td></tr><tr><td>写入</td><td>可以写入</td></tr><tr><td>特殊权限</td><td>修改所有权，默认administrator</td></tr><tr><td>读出文件夹目录</td><td>可以看到文件夹里有什么文件</td></tr></tbody></table><h3 id="权限累加"><a href="#权限累加" class="headerlink" title="权限累加"></a>权限累加</h3><p>NTFS安全在获取用户权限的时候，是一种累加策略，比如用户同时在三个组，那么用户的权限就是这三个组权限的累加</p><h3 id="取得所有权"><a href="#取得所有权" class="headerlink" title="取得所有权"></a>取得所有权</h3><p>默认只有administrator 有这个权限</p><p>作用：将任何文件的所有者改为administrator</p><p>方法：文件右键属性–安全–高级–所有者–选择administrator</p><h3 id="文件复制移动对权限的影响"><a href="#文件复制移动对权限的影响" class="headerlink" title="文件复制移动对权限的影响"></a>文件复制移动对权限的影响</h3><p>同分区复制–权限覆盖</p><p>同分区移动–权限不变</p><p>不同分区复制–权限覆盖</p><p>不同分区移动–权限覆盖</p><h2 id="windows-2012-R2-的-ABE-特性"><a href="#windows-2012-R2-的-ABE-特性" class="headerlink" title="windows 2012 R2 的 ABE 特性"></a>windows 2012 R2 的 ABE 特性</h2><p>ABE(Access-Based Enumeration) 基于访问的列举，windows 2012后，你打开文件夹时，仅仅会显示你有权限查看的文件夹，而你没有权限查看的文件夹，操作系统根本不会显示出来。</p><h1 id="文件服务器配置"><a href="#文件服务器配置" class="headerlink" title="文件服务器配置"></a>文件服务器配置</h1><p>在服务器中新建一个文件夹，右键–&gt;属性中选择<code>共享</code>，可以给文件夹添加访问权限，比如 <code>everyone</code> 。<strong>everyone</strong>是windows操作系统的默认组，代表所有用户，是从<code>系统共享的视角</code> 来分配权限。和NTFS不是同一个，注意区分</p><p>系统共享权限，是在共享文件夹时设置的权限，其权限只能设置在文件夹上，而不能设置在单独文件上，子文件夹可以从父文件夹集成权限，<strong>共享权限仅在用户远程访问共享数据时生效，而在服务器本机操作时不会生效</strong>，共享权限是一个加法运算，当用户有多种权限属性时，会将权限相加，但是<strong>拒绝权限会覆盖所有的允许权限</strong></p><p><strong>注意：</strong></p><ol><li>在本地登录时，只受NTFS权限的影响</li><li>远程登录时，将受到共享以及NTFS权限的共同影响，且取交集</li><li>所以共享的权限设置为 everyone 完全控制，具体的权限需求在NTFS中设置</li></ol><h2 id="共享访问"><a href="#共享访问" class="headerlink" title="共享访问"></a>共享访问</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法：</span><br><span class="line">win + R  输入 UNC地址：</span><br><span class="line">\\共享服务器IP</span><br><span class="line">\\共享服务器IP\共享文件名（不是文件夹名）</span><br><span class="line">然后使用该服务器提前创建好的账户来访问</span><br><span class="line"></span><br><span class="line">如果在域环境中，可以直接使用域用户登录电脑，在文件资源管理器中直接输入 \\共享服务器IP</span><br><span class="line"></span><br><span class="line">注意：一个 斜杠 \ 表示本地路径</span><br><span class="line"> 两个 斜杠 \ 表示网络路径</span><br></pre></td></tr></table></figure><h2 id="隐藏共享夹和访问隐藏共享文件夹"><a href="#隐藏共享夹和访问隐藏共享文件夹" class="headerlink" title="隐藏共享夹和访问隐藏共享文件夹"></a>隐藏共享夹和访问隐藏共享文件夹</h2><p>隐藏方法： 把共享名 后加一个$符号</p><p>访问方法：手动输入地址   <code>\\共享服务器IP\ 共享名$</code></p><h2 id="共享相关命令"><a href="#共享相关命令" class="headerlink" title="共享相关命令"></a>共享相关命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net share列出共享列表</span><br><span class="line">net share 共享名 /del    删除共享</span><br></pre></td></tr></table></figure><p>我们可以看到很多我们不知道的共享，比如 D盘，E盘等，都是系统默认共享出去的</p><h2 id="屏幕系统所有分区隐藏共享自动产"><a href="#屏幕系统所有分区隐藏共享自动产" class="headerlink" title="屏幕系统所有分区隐藏共享自动产"></a>屏幕系统所有分区隐藏共享自动产</h2><h3 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h3><p>注册表编辑器：regedit</p><p>注册表在电脑里的功能就相当与政府在城市的作用。</p><h3 id="定位共享注册表的位置"><a href="#定位共享注册表的位置" class="headerlink" title="定位共享注册表的位置"></a>定位共享注册表的位置</h3><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</p><p>新建一个REG_DWORD类型的AutoShareServer，值为0</p><h3 id="还有一个漏洞"><a href="#还有一个漏洞" class="headerlink" title="还有一个漏洞"></a>还有一个漏洞</h3><p>虽然我们把系统分区的隐藏共享屏蔽了，但是IPC$ 这个共享很难屏蔽，所以445端口还是开着。我们就可以利用445这个端口入侵，这个端口是个空端口，如果连接了它的IPC$ 就可以看它其他的东西。</p><h3 id="关闭445端口"><a href="#关闭445端口" class="headerlink" title="关闭445端口"></a>关闭445端口</h3><p>如果没有文件共享需求，可以通过关闭445端口来屏蔽病毒传入（如2017年勒索病毒）</p><p>方法一:打开services.msc(服务管理窗口) ，停止并禁用server服务</p><p>方法二：禁止被访问445，配置安全高级防火墙-入站规则（win7以上系统），打开控制面板–系统和安全–防火墙–左侧有高级设置–入站规则右键–新建规则–端口类型–445–阻止–起个名字就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 活动目录</title>
      <link href="/2022/04/29/%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/04/29/%E6%B4%BB%E5%8A%A8%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="活动目录概述"><a href="#活动目录概述" class="headerlink" title="活动目录概述"></a>活动目录概述</h1><p><strong>目录</strong>是存储有关网络上对象的信息的层次结构。<strong>目录服务</strong> 提供了存储 <strong>目录数据</strong> 和 网络用户和管理员使用<strong>目录数据</strong>的方法。</p><p><strong>活动目录</strong> (Active Directory，简称AD) 是微软Windows Server中,负责中大型网络环境架构的集中式目录管理服务(Directory Services)。从windows server 2000开始内置在操作系统中。</p><p><strong>活动目录</strong>处理在组织中的<strong>网络对象</strong>，<strong>对象</strong>可以是用户、组群、电脑、网域控制站、邮件、配置文件、组织单元、树系等等，只要是在活动目录结构定义档(schema)中定义的对象，就可以存储在活动目录资料档中，并利用活动目录 Service Interface来访问，实际上，许多活动目录的管理工具都是利用这个接口来调用并使用活动目录的资料。</p><p>通过登录身份验证和对目录中对象的访问控制，安全与Active Directory 集成。通过单一网络登录，管理员可用管理整个网络中的目录数据和组织，授权网络用户可用访问网络上任何位置的资源，基于策略的管理简化了最复杂的网络管理</p><p>AD还包括：</p><ol><li><strong>一组规则</strong>，即架构，<strong>定义</strong>目录中包含的<strong>对象和属性的类别</strong>、这些对象的<strong>实例的约束</strong>和限制及其名称的格式。</li><li>包含有关目录中每个对象的信息的<strong>全局编录</strong>。这允许用户和管理员查找目录信息，而不考虑目录中的哪个域实际包含数据。</li><li><strong>一种查询和索引机制</strong>，以便对象及其属性可由网络用户或应用程序发布和查找。</li><li><strong>跨网络</strong>分发目录数据的<strong>复制服务</strong>。域中的所有<strong>域控制器</strong>均参与复制，并包含其域的所有目录信息的<strong>完整副本</strong>。对目录数据的任何更改均复制到域中的所有域控制器。</li></ol><p>活动目录(AD)以树状的数据结构来组成网络服务的信息，在简单的网络环境中(小公司)，通常网域都只有一个，在中型或大型的网络中，网域可能会有很多个，或是和其他公司或组织的AD相互连接(此链接称为<strong>信任关系</strong>)</p><h1 id="活动目录组件"><a href="#活动目录组件" class="headerlink" title="活动目录组件"></a>活动目录组件</h1><p>AD DS (Active Directory Domain Services) 活动目录域服务器 简称 AD域 。安装了域控制器就生成了域环境，安装了活动目录就生成了域控制器</p><p>AD DS 组件可分为逻辑组件和物理组件</p><ol><li><p>逻辑组件</p><ul><li>Partitions (分区)</li><li>Schema     (架构)</li><li>Domains    (域)</li><li>Domain trees (域树)</li><li>Forests      (森林关系)</li><li>Sites   (站点，基于某个区域实现的逻辑结构)</li><li>OUs     (组织单元)</li><li>Containers  (容器)</li></ul></li><li><p>物理组件</p><ul><li>Domain controllers (域控制器)</li><li>Data stores (数据存储数据库)</li><li>Global catalog (全局编录服务器)</li><li>servers (物理服务器)</li><li>RODCS  (只读域控)</li></ul></li></ol><p><strong>域控制器 Domain controllers ：</strong>托管 AD DS的数据库和SYSVOL(域公共文件服务器，如GPOs)，Kerberos身份验证服务和KDC服务执行省份验证</p><p><strong>全局编录 Global catalog：</strong>为域林中的其它域承载一些属性以支持整个林中对象的查询</p><p><strong>组织单元 OU(Organization Unit)：</strong>通常用于配置OU下的组策略，委派OU给其他管理员<br>下图是一个活动目录的<strong>树形结构</strong>图，每个有个小书图标的小文件夹就是一个<strong>组织单元</strong>，没有小书图标的就是容器<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291435654.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>AD DS森林：</strong> 就是多个树域(上图就是域的树形结构简称域树)和子域组成的域林</p><p><strong>AD DS Schema：</strong> 定义了存储在AD DS 数据库中的对象<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291444851.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><h1 id="活动目录管理与应用"><a href="#活动目录管理与应用" class="headerlink" title="活动目录管理与应用"></a>活动目录管理与应用</h1><h2 id="安装活动目录"><a href="#安装活动目录" class="headerlink" title="安装活动目录"></a>安装活动目录</h2><p>类似于DNS服务器，windows server2012 我们可以直接在 服务器管理窗口进行安装。</p><h2 id="活动目录管理"><a href="#活动目录管理" class="headerlink" title="活动目录管理"></a>活动目录管理</h2><ol><li><p>OU：组织单位</p><p>作用：用于归类域资源（域用户，域计算机，域组）</p><p>OU下面可以包含 用户、用户组、计算机、联系人、打印机等，非常灵活，管理员依据OU来进行分层分组管理</p><p>开始–管理工具–Active Directory用户和计算机 点击我们的域，右键新建组织单位。还可以对组织单位右键新建组织单位，形成了一个组织架构，我们可以去uers里面把用户移动到不同的组织单位，也可以去computers里把电脑移动到不同的组织单位，对于用户，计算机，这属于两种资源，我们可以单独对用户实施组策略，这样不管它登录那个计算机都受到组策略的限制，也可以只对计算机做限制，只有这个计算机被限制，这个用户登录其他电脑不会被这个组策略限制。</p></li><li><p>组策略：Group Policy &#x3D; GPO</p><p>可以把windows的组策略对象挂在OU上，每个OU都有自己的组策略，可以达到不同的管理目的。<br>作用：通过组策略来限制，修改计算机的各种属性，如：开始菜单，桌面背景，网络参数等。</p><p>组策略在域中，是基于OU来下发的</p><p>组策略在域中下发后，用户的应用顺序是：LSDOU，在应用过程中如果出现冲突，后应用的生效。本地–林–域–离自己最近的OU</p></li><li><p>管理组策略<br>开始–管理工具–组策略管理，找到想要下发组策略的组织单位，右键选择“在这个域中创建GPO并……” 这样就建立好了，如果需要编辑，就找到要编辑的组策略，右键，编辑。他会有用户配置和计算机配置两个。选一个配置就可以，区别之前已经说过了。比如我们给用户配置，点击用户配制–策略–管理模板–桌面，点击桌面后，右边就会出来好多的设置以及它们的状态。我们设置一个桌面，在active desktop 里有壁纸设置，双击，选择启用，再在D盘建立一个共享文件夹，因为员工要去这里下载文件，所以下面壁纸名称我们要写共享路径，这之前讲过<code>\\10.1.1.1\share\aaa.jpg</code>  即要写好IP和共享的文件夹。这样就好了，我们重启注销，就会发现好了，或者自定义桌面发现而没法改变。</p><p>我们还可以在对应的组策略右键强制，这样就是执行完这个组策略就可以了如果后面和这个冲突，那么也用这个，如果没冲突就继续执行本来的</p><p>我们也可以对着那个组，右键，阻止继承，这样就只执行这个组的组策略，前面的都不管了。</p><p>如果同时上级点了强制，下面还阻止继承，那么强制生效，阻止没有用。</p><p>有的公司需要安全加固，在计算机配置，windows 设置里有安全设置，账户策略，我们可以规定密码的长度等等。</p><p>如果我们忘了都设置过哪些组策略，我们可以点击组策略，设置，那里会显示我们设置的策略，中途会弹出窗口，我们添加就可以了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 DHCP服务器</title>
      <link href="/2022/04/29/DHCP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/29/DHCP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP概述"><a href="#DHCP概述" class="headerlink" title="DHCP概述"></a>DHCP概述</h1><p>（Dynamic Host Configure Protocol）自动为客户机分配IP地址，位于<strong>OSI模型的应用层</strong></p><p><strong>应用场景：</strong> 公司里的员工每个人都手动输入IP地址很麻烦并且可能会出错，需要公司IT管理员去进行操作，在这个场景下，需要使用DHCP服务器去给客户端分发管理IP地址</p><p><strong>DHCP的两个作用</strong></p><ol><li>用于内部网或网络服务供应商自动分配IP地址给用户</li><li>用于内部网管理员对所有电脑作中央管理</li></ol><p><strong>DHCP优点：</strong> </p><ul><li>减少工作量，避免IP冲突，提高地址利用率</li><li>可用保留IP，分配给特殊客户端</li><li>特殊应用，如无IP场景，安装操作系统</li></ul><p><strong>DHCP缺点：</strong></p><ul><li>DHCP服务器单点故障</li><li>DHCP如果配置错误，全网不可用</li><li>多子网情况，需要配置路由器或交换机</li></ul><p><strong>DHCP相关概念</strong></p><ul><li>地址池&#x2F;作用域：（IP、子网掩码、网关、DNS、租期）</li><li>DHCP协议的端口号 <strong>67&#x2F;68</strong>  —netstat -an 来查看</li></ul><h2 id="DHCP原理"><a href="#DHCP原理" class="headerlink" title="DHCP原理"></a>DHCP原理</h2><p> 也称为租约过程，分为4个步骤DORA</p><ol><li><p><strong>客户机发送DHCP Discovery 广播包</strong></p><p>客户机开机启动时，发送一个广播请求IP地址（包含客户机的MAC地址，每个电脑的网卡都有一个固化在里面的MAC地址，不能改变）</p></li><li><p><strong>服务器响应DHCP Offer 广播包</strong></p><p>任何收到请求的DHCP服务器都会检查其内部数据库并进行响应，其中提供一个可用的 IP 地址 （但没有子网掩码，网关等参数）</p></li><li><p><strong>客户机发送DHCP Request 广播包</strong></p><p>客户机可能收到一个或者多个<code>DHCP Offer</code>(正常情况下都收到一个)，从中随机选择IP（也可以认为是确认使用那个IP），并发送<code>Request</code>给这个服务器，表示接收该<code>DHCP Offer</code></p></li><li><p><strong>服务器发动DHCP ACK 广播包</strong></p><p>ACK: acknowledge 确认</p><p>服务器收到了request后，就确定了租约，从数据库中标记该IP地址已经被使用，并给客户端发送<code>DHCP ACK</code>数据包，提供网卡详细参数，IP，子网掩码，DNS，租期等。</p></li></ol><p>如果客户端发送DISCOVER后，没有服务器响应，就会隔一段时间再次发送 DISCOVER，如果任然没有收到OFFER，客户端会使用备用配置(私有地址 169.xxx.xxx.xxx) 此后，客户端每隔5分钟，会继续发送DISCOVER</p><h2 id="DHCP续约"><a href="#DHCP续约" class="headerlink" title="DHCP续约"></a>DHCP续约</h2><p>租期是工程师自己设置的，当租期过50%后，客户机会再次发送DHCP Request 包进行续约，如果服务器响应<code>DHCP ACK</code>，客户端就可用进行租约更新，如果服务器没有响应，则将继续使用当前IP，并在87.5%再次发送DHCP Request 包，进行续约，如果任无响应，释放IP地址，并重新发送DHCP Discovery广播包来获取IP地址（如果有，那么原来的作废，用新的），当没有任何服务器响应时，自动给自己分配一个169.254.x.x&#x2F;16，属于全球统一无效地址，用于临时内网通信。</p><p>当客户机用了一会关机不用了，那么默认到了租期后IP才会返回，如果一会又开始用了，只要租期没到，那么和以前是同一个IP</p><p>我们也可用手动进行租约的更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /release    释放IP（取消租约，或者改为手动配置IP，也可以释放租约）</span><br><span class="line">ipconfig /renew      重新获取IP（有IP时发送Request，没有IP时发送Discovery</span><br></pre></td></tr></table></figure><h2 id="部署DHCP服务器"><a href="#部署DHCP服务器" class="headerlink" title="部署DHCP服务器"></a>部署DHCP服务器</h2><ol><li><p>IP地址固定（服务器必须固定IP地址，主要IP必须和将来分配给员工的IP在同一网段）</p></li><li><p>安装DHCP服务器插件&#x2F;软件</p><p> 这个插件微软以及内置好了，我们需要的就是去系统镜像的光盘里，选择安装可选的windows组件，然后找到网络服务，双击打开，找到里面的DHCP服务然后打对勾，安装。</p><p> cmd里 netstat -an 可以看到 67，68端口，这里其实工作的时候是为了兼容老机器，67为xp等一些老版本，68为win7等一些新机器来提供。</p></li><li><p>新建作用域以及作用域选项</p><p> 在开始菜单，管理工具里找到DHCP，然后我们打开，在我们服务器上右键选择新建作用域，配置好后就可以了。配置时有一个wins服务器这个不用管，是比较老的了</p></li><li><p>激活</p></li><li><p>客户机验证，图形界面禁用和启用网卡来刷新。或者使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /release    释放IP（取消租约，或者改为手动配置IP，也可以释放租约）</span><br><span class="line">ipconfig /renew      重新获取IP（有IP时发送Request，没有IP时发送Discovery</span><br></pre></td></tr></table></figure><p> 使用VMware时，如果获取的不是自己设置的IP 那是因为虚拟机 MVnet的交换机里内置了一个DHCP，所以我们需要把它关掉，在工具栏<strong>编辑</strong>里找到虚拟网络编辑器，在右下角选择更改设置，选中我们连接的交换机，勾掉“使用本地DHCP服务将IP分配给虚拟机”</p></li></ol><h2 id="地址保留"><a href="#地址保留" class="headerlink" title="地址保留"></a>地址保留</h2><p>在服务器DHCP里我们可以对指定的MAC地址固定动态分配的IP，右键新建保留，然后就可用把IP和MAC地址进行绑定保留</p><h2 id="DHCP服务器数据库维护"><a href="#DHCP服务器数据库维护" class="headerlink" title="DHCP服务器数据库维护"></a>DHCP服务器数据库维护</h2><p>windows server DHCP的数据库默认在 <code>c:\windows\system32\dhcp</code> 中，系统默认每60分钟备份存放于 backup文件夹中，我们以可以手动备份</p><h2 id="DHCP攻击防御"><a href="#DHCP攻击防御" class="headerlink" title="DHCP攻击防御"></a>DHCP攻击防御</h2><p>1.攻击DHCP服务器：频繁发送伪装的DHCP请求，知道将DHCP地址池资源耗尽<br>    防御：在交换机（管理型）的端口上做动态MAC地址绑定</p><p>2.伪装DHCP服务器攻击：通过将自己伪装成DHCP服务器，为客户机提供非法IP<br>    防御：在交换机（管理型），除合法的DHCP服务器所在接口外，全部设置为精致发送DHCP Offer 广播包</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows server2012 DNS服务</title>
      <link href="/2022/04/28/DNS%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/28/DNS%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-概述"><a href="#DNS-概述" class="headerlink" title="DNS 概述"></a>DNS 概述</h1><p>域名系统(英语:Domain Name System，缩写:DNS)是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库,能够使人更方便地访问互联网。</p><p>域名系统是一种允许您将域名解析为Internet协议(IP)地址。</p><p>如我们访问百度的的网站<a href="http://www.baidu.com是以域名形式进行访问,但计算机将www.baidu.com,通过域名服务器解释成ip/">www.baidu.com是以域名形式进行访问，但计算机将www.baidu.com，通过域名服务器解释成IP</a> 220.181.38.251来进行访问。计算机将<a href="http://www.baidu.com转换在220.181.38.251的过程,我们称为dns解析,这一过程是计算机自动进行,依赖于计算机的dns服务器/">www.baidu.com转换在220.181.38.251的过程，我们称为DNS解析，这一过程是计算机自动进行，依赖于计算机的DNS服务器</a></p><p>DNS通过允许一个名称服务器把它的一部分名称服务（众所周知的zone） 委托给子服务器而实现了一种层次结构的名称空间</p><p><strong>DNS 服务监听端口号为 53</strong></p><h2 id="DNS层次结构图"><a href="#DNS层次结构图" class="headerlink" title="DNS层次结构图"></a>DNS层次结构图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282051014.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>“<a href="http://www.sina.com”是一个域名,从严格意义上讲,从严格意义上“sina.com”才是域名,而“www”/">www.sina.com”是一个域名，从严格意义上讲，从严格意义上“sina.com”才是域名，而“www”</a> 是主机名。</p><p>“主机名.域名”称为完全限定域名（FQDN）。一个域名下可以有多个主机。</p><p>如“sina.com”域名，一般管理员在命名其主机的时候会根据其主机的功能而命名，比如：网站的是“www”,博客的是“blog”,论坛的是“bbs”那么就有“<a href="http://www.sina.com”,&quot;blog.sina.com&quot;,“bbs.sina.com”/">www.sina.com”,&quot;blog.sina.com&quot;,“bbs.sina.com”</a></p><p>买了域名，还要把“<a href="http://www.sina.com”/">www.sina.com”</a> 和它对应的IP 注册到DNS服务器上。</p><p>域名结束后要加个 <code>.</code>才可以访问，现在浏览器会帮我们加上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com.</span><br><span class="line">. 为根域</span><br><span class="line">.com为顶级域名</span><br><span class="line">baidu 为二级域名</span><br><span class="line">www 为主机名</span><br><span class="line"></span><br><span class="line">FQDN=主机名.DNS后缀</span><br><span class="line">FQDN(完全合格的域名)</span><br><span class="line">如：www.baidu.com</span><br><span class="line">www为主机名</span><br><span class="line">baidu.com为域名后缀</span><br><span class="line">www.baidu.com全称为FQDN</span><br></pre></td></tr></table></figure><h2 id="DNS中的几个角色"><a href="#DNS中的几个角色" class="headerlink" title="DNS中的几个角色"></a>DNS中的几个角色</h2><ol><li><p><strong>DNS客户端</strong>：向服务器发起查询，客户端和解析器的含义很类似。</p></li><li><p><strong>DNS服务器</strong>：接受客户端的查询，并返回查询结果</p></li><li><p><strong>解析器</strong>：解析器可以看作客户端试图代表客户端解析答案的程序，如浏览器</p></li><li><p><strong>查询</strong>：是对发送到DNS服务器的请求信息，DNS查询通常有三种:递归查询、迭代查询、反向查询</p></li></ol><h2 id="两种DNS服务器"><a href="#两种DNS服务器" class="headerlink" title="两种DNS服务器"></a>两种DNS服务器</h2><ol><li><p>动态DNS服务器:<br>起源于wins服务，在windowsNT 4.0以前，wins服务安装后，会动态的构建计算机名与IP地址的数据库并且当计算机的IP地址改变后，wins服务会更新相应数据。当时没有动态DNS服务器<br>rfc2136中描述的**动态DNS (DDNS)**标准允许DNS客户端更新DNS数据库文件中的信息。例如,Windows Server 2012 R2 DHCP服务器可以自动告诉DDNS服务器它已分配给哪些lIP地址什么机器。windows2000以后的客户端也可以这样做</p></li><li><p>非动态DNS服务器:<br>非动态DNS (NDDNS）不会自动填充DNS数据库。客户端系统无法更新到DNS，管理员需要手动填充DNS数据库。<br>手动将记录输入DNS的主要缺点是组织正在使用动态主机配置协议(DHCP)。在DHCP中，用户每天都有可能得到不同的TCP&#x2F;IP地址。这个意味着管理员必须每天手动更新DNS以保持其准确性。</p></li></ol><h2 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h2><ol><li><p>迭代查询<br>客户端向DNS服务器询问答案，服务器返回最佳答案，此信息可能来自服务器的缓存，如果服务器不知道答案，服务器会引导客户端去另一个服务器上查询</p></li><li><p>递归查询<br>客户机向名称服务器发送一个查询，要求他响应带有请求的答案或错误消息。错误消息是以下两种中的一种：</p><ol><li>服务器不能给出正确答案</li><li>域名不存在<br>在递归查询中，DNS服务器不允许将客户端引导到其他DNS服务器，而是由DNS服务器去其他DNS服务器上进行查询</li></ol></li><li><p>反向查询：<br>通过IP地址，查询名称，对应DNS服务器的PTR记录<br>反向接卸主要应用到邮件服务器中来阻拦垃圾邮件，多数邮件发送者使用动态分配或者没有注册域名的IP地址来发送垃圾邮件，使用反向查询，查询该IP对应的域名是否与发件域名一致</p></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282106983.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上图中 <code>1，8</code> 就是递归查询，而第一个DNS服务器做的就是迭代查询</p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>当DNS服务器处理递归查询时，可能需要发送几个查询才能找到最终答案</p><p>DNS服务器充当解析程序时，可以缓存在此过程中接收到的所有信息;每条记录都包含称为生存时间(TTL)的信息。</p><p>TTL记录反映了DNS记录在缓存中保留的时间，如果客户端查询命中了服务器的缓存，服务器返回的TTL则是当前TTL的剩余时间。</p><p>当权威服务器响应一个不存的查询记录时，会返回个负的TTL值,表示该项记录不存在</p><h2 id="DNS区域"><a href="#DNS区域" class="headerlink" title="DNS区域"></a>DNS区域</h2><p><strong>区域是在存储记录的数据库。</strong></p><p>DNS有多种区域类型，<strong>主区域</strong>、<strong>次要区域</strong>、<strong>子区域</strong>，我们需要根据不同需求设置不同区域</p><p><strong>主区域</strong>：主区域负责维护DNS区域的<strong>所有记录</strong>。它包含DNS数据库的主要数据。所有记录更新都发生在主服务器上区域。无论何时创建新的DNS记录，您都需要创建和添加主区域域名。主区域，所有数据都存在本地，如果服务器发生故障，则会所有记录丢失。所以我们需要次要区域,来提高可用性。</p><p><strong>次要区域</strong>：也叫辅助区域，从主区域复制数据，他所保存的DNS数据库是<strong>不可编辑的副本</strong>。<br>使用次要区域优势:</p><ul><li>提高主要区域服务器的容错</li><li>降低主要区域服务器的负载</li><li>可以放在不同的地方，以提高查询速度</li></ul><p><strong>存根区域</strong>：工作方式与辅助区域很像，数据库也是<strong>不可编辑的副本</strong>，不同之处是存根区域，并<strong>不会完整的复制所有主区域的DNS所有记录</strong>，他只是负责将查询<strong>转发</strong>给<strong>主要区域</strong>所在服务器。存根区域<strong>不能用来降低主区域服务器的负载</strong>，因为查询同样是转发到主区域；存根区域主要<strong>用于不能完全信任的场所</strong>，无法将全部DNS记录复制到对方DNS服务器。</p><p><strong>区域传送与复制</strong><br>辅助区域从主区域<strong>复制</strong>数据的过程，我们称为<strong>区域传送</strong>,首次创建辅助区域时，必须指定对区域有权威性的主服务器</p><p>区域传送有两种方式:</p><ol><li>full zone transfers (AXFR)全区域传输</li><li>incremental zone transfers (IXFR)增量区域传输</li></ol><h2 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h2><p>DNS服务器会创建很多种不同的记录，每种记录都有自己的独特的作用</p><ol><li><p>SOA记录<br>Start of Authority Records：SOA记录是DNS区域的第一条记录，定义了DNS区域的通常参数</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282125217.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>NS记录<br>Name server Records：NS记录表示一个域的名称服务器的主机。即负责解析当前域名的主机名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282137636.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>A记录<br>A recode for IPv4：最通用的记录，记录域名指向的IPv4地址，A记录可以在IN前面设置当前记录的TTL值</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282140389.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>AAAA记录<br>A record for IPv6：记录域名指向的IPv6地址</p></li><li><p>别名记录<br>Alias Record。也可简写为CNAME,将一个域名指向另一台主机，用于主机名已经记录了一个A记录，可以将www直接指向该A记录</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282150843.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>指针记录（PTR记录）<br>Pointer Record，与A记录和AAAA记录相反，将IP地址匹配到域名<br>IP地址是从特定的部分开始，比如都是192.168，到最不特定的部分结束，域名以最不特定部分开始，最特定部分结束，所以我们写PTR记录时IP地址会反着写</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282202437.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>MX记录<br>Mail Exchanger Record。用于指出当前域中接收邮件的服务器</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282203815.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>MX记录可以用一个数字表示优先级，**数字越小，优先级越高**<img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282204292.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>SRV记录<br>Service Record：SRV记录什么计算机提供什么样的服务信息。SRV记录一般是Microsoft活动目录设置时的应用。DNS可以独立于活动目录，但是活动目录必须有DNS才能正常工作</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204282205240.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>其中第一行 10 表示优先级 100 表示权重，当优先级相同时，选择权重高的，389是端口号</li></ol><h2 id="DNS服务器处理域名请求的顺序"><a href="#DNS服务器处理域名请求的顺序" class="headerlink" title="DNS服务器处理域名请求的顺序"></a>DNS服务器处理域名请求的顺序</h2><ol><li>DNS高速缓存</li><li>DNS区域配置文件</li><li>DNS转发器</li><li>根提示</li></ol><h2 id="客户机域名请求顺序"><a href="#客户机域名请求顺序" class="headerlink" title="客户机域名请求顺序"></a>客户机域名请求顺序</h2><p>DNS缓存—-本地hosts文件—–本地DNS服务器</p><p>hosts文件路径：c:\windows\system32\drivers\etc\hosts</p><p>当我们修改了hosts文件如在里面写入  4.4.4.4 <a href="http://www.qq.com/">www.qq.com</a> 那么，以后我们访问<a href="http://www.qq.com/">www.qq.com</a> 的时候，都会访问4.4.4.4 当然这个是一个没有的IP，当我们hosts文件被写满了垃圾IP，我们就被攻击了。当然，这需要管理员权限才可以写入。</p><h1 id="安装和配置DNS服务器"><a href="#安装和配置DNS服务器" class="headerlink" title="安装和配置DNS服务器"></a>安装和配置DNS服务器</h1><p>这个总体来说还是比较简单的</p><ol><li><p>要求网卡是静态IP（服务器和客户机在同一个交换机上）</p></li><li><p>安装DNS服务器插件（即安装并开启TCP以及UDP53端口）</p></li><li><p>在开始-管理工具-DNS这个程序里，打开正向查找区域，创建区域文件，（负责一域名后缀的解析，如baidu.com为域名后缀，一台DNS服务器可以存放多个区域文件），创建的时候就起个名字就好了，其他的都默认下一步。</p></li><li><p>新建A记录（主机类型是A），写一个主机，自己再去网上查找好对应的IP，当然这里虚拟机是没有网的所以我们要做的就是随便输入一个就行了，只要到时候客户机询问服务器的时候可以返回给它这个IP就可以了。</p></li></ol><p>还可以新建一个别名（CNAME），即为这个主机创建一个别名，查询别名的时候，其实就是查询它本身。</p><ol start="5"><li><p>去客户机里验证，这里需要把客户机的DNS设置成我们搭建的这个指定的DNS服务器。</p></li><li><p>cmd里  输入<code>nslookup www.qf.com</code> 或者 <code>ping www.qf.com</code> 可以看到服务器发来的 IP 但是，这两个有区别：<br>直接 ping 会先查找客户机的缓存，如果以前有过，那么就不需要去DNS服务器查找直接返回，但是如果此时这个域名的IP改了那么会造成得到错误的IP<br>但是 nslookup 会直接把域名发送给DNS服务器，然后去解析，这样拿到的一般都是新的。</p><p>清空客户机DNS缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure></li><li><p>我们查找的时候，发现会出现Uknow，这是因为DNS服务器不知道自己的名字，我们在正向查找区域新建一个域，给自己起个名字，然后我们在里面建一个主机，IP是自己服务器的地址，并在反向查找的位置，新建一个自己所在网段的区域，并在其中右键新建“新建指针”，输入自己的IP，然后选择正向我们新建好的自己的主机名，这样我们DNS服务器就知道自己的名字了。</p></li></ol><h2 id="DNS转发器"><a href="#DNS转发器" class="headerlink" title="DNS转发器"></a>DNS转发器</h2><p>再开一个win2012虚拟机也部署为DNS服务器，写一个一号DNS服务器没有的域，当我们客户机向第一台DNS服务器发送查询时，一号DNS服务器不知道，那么它先通过转发器来询问二号DNS服务器。</p><p>方法：在一号DNS服务器上右键属性，找到转发器，把IP写成二号DNS服务器的就可以当然前提是他们三个在同一个交换机上连接，可以互相通信</p><p>在公司里一定要设置DNS转发器</p><h2 id="DNS服务器维护"><a href="#DNS服务器维护" class="headerlink" title="DNS服务器维护"></a>DNS服务器维护</h2><p>右键单击服务器名，选择属性可以进行DNS服务器的日常维护</p><p>接口:表示当前服务器工作的IP地址<br>转发器:列出DNS服务器,无法解析域名时转发给谁<br>高级:一些服务器选项，默认不用修改<br>根提示:整体DNS体系的默认根<br>调试日志:当服务器出现异常时，可以钩选DNS的记录数据包<br>事件日志:服务器日志<br>监视:自动检测服务器是否正常工作<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204291009935.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows操作系统学习</title>
      <link href="/2022/04/27/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/27/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-简介"><a href="#Windows-简介" class="headerlink" title="Windows 简介"></a>Windows 简介</h1><p>Microsoft Windows是微软公司以<strong>图形用户界面为主</strong>推出的一系列专有商业软件操作系统。</p><p>问世时间为1985年，起初为运行于<strong>MS-DOS</strong>之下的桌面环境</p><p>其后续版本逐渐发展成为主要为个人电脑和服务器用户设计的操作系统，并最终获得了世界个人电脑操作系统的垄断地位</p><p>Windows之起源，可追溯到多年前<strong>美国施乐公司</strong>的研究，1970年,施乐公司成立了著名的研究机构帕罗奥多研究中心，主要从事局域网、激光打印机、图形用户界面和面向对象技术的研究。1981，施乐推出世界上第一个商用的图形用户界面系统。但技术并未得到大众的重视，也没有协助商业化的应用。</p><p>这时苹果电脑的创始人之一的史蒂夫·乔布斯在参观施乐公司的帕罗奥多研究中心后认识到图形用户界面的重要性以及广阔的市场前景，在1983推出第二个图形用户界面系统System Software(现称macOS)。苹果电脑在开发Macintosh时基于市场战略上的考虑，故意开发了只能在苹果电脑上作运作的图形用户界面系统。</p><p>但当时因为Intel x86微处理器芯片的IBM兼容电脑已渐露头角，因此就给了微软公司所开发的Windows生存空间和市场。</p><p>微软在1983年宣布研发windows,在1985年和1987年分别推出Windows 1.01和Windows 2.03。</p><p>在2004年，Windows拥有终端操作系统大约70%的市场份额</p><p>在2014年，微软承认其将整个操作系统市场的绝大部分输给Android。windos全球出货量不足android的25%</p><p>Windows客户端操作系统目前最新的稳定版是于2015年7月29日发布的Windows 10。</p><p>Windows Server目前最新的稳定版是于2018年10月2日发布的Windows Server 2019。</p><p>微软于1990年9月推出Windows 3.0并一炮而红。这个“干呼万唤始出来”的操作系统一面世便在商业上获取惊人的成功;推出后不到六个星期，微软已经卖出50万份Windows 3.0，打破了任何软件产品的六周内销售记录，从而开始了微软在操作系统上的垄断地位。</p><p>在1994年时被苹果公司控告侵权，展开了著名的“Look and Feel”诉讼官司。</p><p>盖茨还讥讽乔布斯说:“我们有一个富邻居——施乐，他家有一张电视。当我们想偷的时候，发现乔布斯早就偷走了，可他却说我们是小偷。</p><p>乔布斯也反唇相讥:“毕加索不是说过吗，‘好的艺术家只是照抄，伟大的艺术家则是窃取灵感’。而我们在窃取伟大的灵感的方面上一直都厚颜无耻。”</p><h1 id="windows-server-2012-r2"><a href="#windows-server-2012-r2" class="headerlink" title="windows server 2012 r2"></a>windows server 2012 r2</h1><p>Windows Server 2012，开发代号为Windows Server 8，是第五个Windows Server的版本。是Windows 8的服务器版本</p><p>原本Windows Server 2008R2包含企业版(enterprise)，但至Windows Server 2012企业版已消失,表示原先的企业版功能已由Datacenter版取代及加强</p><p><strong>win 2012 r2的一些新特性:</strong></p><ol><li>云计算</li><li>hyper-v(虚拟化):第二代虚拟机、跨版本迁移、管理旧版本hyper-v等</li><li>存储:存储解决方案、存储管理API、SMB3.0等</li><li>高可用特点改进</li><li>网络改进:虚拟化网络</li><li>AD、组策略改进</li></ol><h2 id="windows-server-2012-r2-的版本"><a href="#windows-server-2012-r2-的版本" class="headerlink" title="windows server 2012 r2 的版本"></a>windows server 2012 r2 的版本</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272030904.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><h2 id="虚拟机安装-windows-server-2012-r2"><a href="#虚拟机安装-windows-server-2012-r2" class="headerlink" title="虚拟机安装 windows server 2012 r2"></a>虚拟机安装 windows server 2012 r2</h2><p>镜像下载可以去 <a href="https://msdn.itellyou.cn/">MSDN</a></p><ol><li><p>通过 点击 WMware 的创建新的虚拟机的选项进入安装界面</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272204262.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>Windows 的系统我们一般都使用 <code>典型</code> 安装，选择之前下载的镜像</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272206182.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>设置密码，选择虚拟机存放位置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272206589.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>这里是否将虚拟磁盘拆分为多个文件可以根据自己来</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272208313.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>最后我们就可以开机等待安装了，安装好后我们在标签栏右键，安装 <code>VMware Tools</code> 方便后续与本机之间的交互</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272213551.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li></ol><h2 id="windows-server-2012-的一些简单配置"><a href="#windows-server-2012-的一些简单配置" class="headerlink" title="windows server 2012 的一些简单配置"></a>windows server 2012 的一些简单配置</h2><h3 id="计算机名设置"><a href="#计算机名设置" class="headerlink" title="计算机名设置"></a>计算机名设置</h3><ol><li><p>图形界面设置<br>作为个人用户，我们不怎么关注计算机名，但是当我们在企业特别是 <strong>域环境</strong> 中，计算机名对企业统一管理计算机有重要的作用</p><p>计算机名每次修改后需要重启</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272218704.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>命令行设置<br>使用管理员权限打开 cmd</p><p>使用<code>hostname</code> 命令可以查看当前计算机名</p><p>通过 <code>netdom renamecomputer  当前计算机名 /newname:新计算机名</code> 可以进行重命名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272221593.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li></ol><h3 id="IE增强安全配置"><a href="#IE增强安全配置" class="headerlink" title="IE增强安全配置"></a>IE增强安全配置</h3><p>Windows server 为了保护浏览器安全，给默认IE浏览器开启了增强安全配置，会导致打开网页时弹很多窗，让我们给域名添加信任，我们可以根据需求进行关闭</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272223683.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>关闭IE增强安全可能会导致一定的安全风险，通常我们是不建议在浏览器上浏览网页的，我们也可以通过安装其他浏览器来规避IE增强的问题</p><h3 id="IP地址的查看和配置"><a href="#IP地址的查看和配置" class="headerlink" title="IP地址的查看和配置"></a>IP地址的查看和配置</h3><ol><li><p>图形界面<br>打开控制面板-》网络和Internet-》网络和共享中心</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272226465.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>这样我们就可以看到现在的IP地址了</p><p>IP地址的获取通常有两个方式 1. 自动获取 2.手动配置</p><p>对于服务器，通常是需要固定IP的。所以我们选择进行手动配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272228748.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/></li><li><p>命令行<br>同样使用 管理员打开 cmd</p><p>使用 <code>ipconfig</code> 可以看到我们的ip信息，如果想看到网关，DNS服务器等信息我们可以使用 <code>ipconfig /all</code> 命令</p><p>使用 <code>netsh interface ipv4 show interfaces</code> 命令 来查看网卡名称</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272233915.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>上图中 第一个 <code>Loopback Pseudo-Interface 1</code> 是<strong>回环网卡</strong> ， 下面是我们连接到网络的网卡</p><p>通过命令 <code>netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=dhcp</code> 来配置从DHCP服务自动获取IP</p><p>通过命令 <code>netsh interface ipv4 set dns name=&quot;Ethernet0&quot; source=dhcp</code> 来配置冲DHCP服务器自动获取DBS服务器</p><p>可以使用下面的命令来配置静态IP地址,其中 <code>addr</code> 是ip <code>mask</code>是子网掩码 <code>getway</code>是网关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=static addr=192.168.0.10 mask=255.255.255.0 geteway=192.168.0.1</span><br></pre></td></tr></table></figure><p>可以使用下面的命令来配置静态DNS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set address name=&quot;Ethernet0&quot; source=static addr=114.114.114.114</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置远程桌面"><a href="#配置远程桌面" class="headerlink" title="配置远程桌面"></a>配置远程桌面</h3><p>使用服务器时，我们经常会使用远程桌面来操作远程的服务器</p><p>打开服务器的远程桌面服务，记得在防火墙中配置允许远程桌面服务通过，或者可以选择关闭防火墙（初学者可以选这个操作）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272245808.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272248511.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>在另一个Windows电脑上，使用windows 自带的远程桌面工具进行连接</p><p>win+R 打开运行窗口 输入 <code>mstsc</code> 在弹出的窗口中输入服务器IP地址</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272250891.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><p>连接到服务器后输入用户名和密码就好</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204272252796.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> Windows操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Windows操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全法</title>
      <link href="/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"/>
      <url>/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全法背景概述"><a href="#网络安全法背景概述" class="headerlink" title="网络安全法背景概述"></a>网络安全法背景概述</h1><h2 id="国际国内网安法背景"><a href="#国际国内网安法背景" class="headerlink" title="国际国内网安法背景"></a>国际国内网安法背景</h2><h3 id="国际背景"><a href="#国际背景" class="headerlink" title="国际背景"></a>国际背景</h3><ol><li><p>合作共赢<br>2015年9月，习主席访美提出“打造中美合作亮点，让网络空间更好地造福两国人民和世界人民”<br>2015年12月，中美达成了《打击网络犯罪及相关事项指导原则》<br>2015年以来，中英、中俄、中德先后签署了合作协议。中英，中德之间开展高级别对话深化网络犯罪国际合作。<br>2016年11月，习主席在第二届世界互联网大会系统论述了“网络空间命运共同体”的理念，重点提出“四点原则”和“五个主张”的中国方案。</p></li><li><p>冲突对抗<br>网络冲突和攻击成为国家间对抗的主要形式。<br>网络空间战略和政策升级调整<br>注重安全保障与攻击能力双向提升<br>加强对数据资源跨境传输的管控<br>2015年以来，国家行为体实施的大规模网络监控和网络攻击造成了国家间的严重不信任情绪，对国际局势的稳定带来不良影响。</p></li></ol><h3 id="国内背景"><a href="#国内背景" class="headerlink" title="国内背景"></a>国内背景</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270918692.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="各国网络安全法重点制度"><a href="#各国网络安全法重点制度" class="headerlink" title="各国网络安全法重点制度"></a>各国网络安全法重点制度</h2><p>结合各国网络安全立法和战略，网络安全法重点保护的制度具体刻意分为两大类 <code>对传统的网络安全制度进行立法修正</code> 和 <code>对近几年涌现出来的新问题进行解决</code></p><h3 id="对传统的网络安全制度进行立法修正"><a href="#对传统的网络安全制度进行立法修正" class="headerlink" title="对传统的网络安全制度进行立法修正"></a>对传统的网络安全制度进行立法修正</h3><ol><li><p>机构职责和管理机制</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270948714.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>监测预警和应急处理制度</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270950677.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h3 id="对近几年涌现出来的新问题进行解决"><a href="#对近几年涌现出来的新问题进行解决" class="headerlink" title="对近几年涌现出来的新问题进行解决"></a>对近几年涌现出来的新问题进行解决</h3><ol><li><p>关键信息基础设施保护</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270951216.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>数据安全保护（跨境数据流动、数据泄露通知）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270951734.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>云计算等新型业务所引发的安全威胁等问题</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270953466.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li></ol><h2 id="网络安全法发展历程"><a href="#网络安全法发展历程" class="headerlink" title="网络安全法发展历程"></a>网络安全法发展历程</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270954708.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270955040.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>我国网络安全法治建设的发展历程</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204270956874.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="网络安全法特点和内容"><a href="#网络安全法特点和内容" class="headerlink" title="网络安全法特点和内容"></a>网络安全法特点和内容</h2><h3 id="我国网络安全法律体系的特点"><a href="#我国网络安全法律体系的特点" class="headerlink" title="我国网络安全法律体系的特点"></a>我国网络安全法律体系的特点</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271000270.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="我国网络安全法律的主要规范内容"><a href="#我国网络安全法律的主要规范内容" class="headerlink" title="我国网络安全法律的主要规范内容"></a>我国网络安全法律的主要规范内容</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271001916.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002990.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002166.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271002297.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>网络安全法是我国第一部网络安全领域的法律，是<strong>保障网络安全的基本法</strong>。</p><ol><li>网络安全法不是网络安全立法的终点，相反，是网络安全立法的起点。</li><li>与《网络安全法》相关的法律有《国家安全法》，《保密法》，《反恐怖主义法》，《反间谍法》，《刑法修正案》(九)，《治安管理处罚法》，《电子签名法》等。这些法律与网络安全法不是上位法和下位法的关系，同属同一法律位阶。</li><li><strong>网络安全法</strong>是我国网络安全管理的<strong>基础法律</strong>，与其它相关法律在相关条款和规定上互相衔接，互为呼应，共同构成了我国<strong>网络安全管理的综合法律体系</strong>。</li><li>网络安全法也是在现行的一些制度的基础上，例如《关于加强网络信息保护的决定》、《计算机信息系统安全保护条例》、《互联网信息服务管理办法》等，上升和完善的成果，为更好的开展网络安全工作提供了法律保障。</li></ol><hr><h1 id="网络安全法解读"><a href="#网络安全法解读" class="headerlink" title="网络安全法解读"></a>网络安全法解读</h1><h2 id="网络安全法解决的重要基础性问题"><a href="#网络安全法解决的重要基础性问题" class="headerlink" title="网络安全法解决的重要基础性问题"></a>网络安全法解决的重要基础性问题</h2><ol><li>基本原则:网络空间主权原则、网络安全与信息化发展并重原则、共同治理原则;</li><li>明确了政府各部门的职责权限，完善了网络安全监管体制(第8条);</li><li>强化网络运行安全，重点保护关键信息基础设施;</li><li>完善网络安全义务和责任，加大了违法惩处力度;</li><li>将监测预警与应急处置措施制度化、法制化。</li></ol><h2 id="网络安全法内容解读"><a href="#网络安全法内容解读" class="headerlink" title="网络安全法内容解读"></a>网络安全法内容解读</h2><p><strong>总则：</strong> 明确网络空间主权原则</p><p><strong>作为我国网络安全治理的基本法，《网络安全法》在总则部分确立了网络主权原则，明确了网络安全管理体制和分工，以及域外的适应效力</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271023818.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="国家网络安全责任机构组织"><a href="#国家网络安全责任机构组织" class="headerlink" title="国家网络安全责任机构组织"></a>国家网络安全责任机构组织</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271024025.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="网络安全等级保护制度"><a href="#网络安全等级保护制度" class="headerlink" title="网络安全等级保护制度"></a>网络安全等级保护制度</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271028597.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol><li><p>信息系统安全等级保护制度已实施多年，网络安全等级保护制度应当会与目前的信息系统安全等级保护制度相衔接和融合，而不会成为两个并行的制度体系。</p></li><li><p>网络安全≠信息安全<br>特别强调网络安全不等于信息安全，两者有大幅的交集，但网络安全有特殊的内涵，包括网络的使用、运营。国家对网络的主权，符合国际惯例和一般做法。</p></li></ol><h3 id="网络实名制"><a href="#网络实名制" class="headerlink" title="网络实名制"></a>网络实名制</h3><p>网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。</p><p><strong>已有法律法规对实名制进行规定:</strong></p><blockquote><p>2016年1月1日实施《中华人民共和国反恐怖主义法》<br>2015年实施的《互联网用户账号名称管理规定》<br>2016年实施的《移动互联网应用程序信息服务管理规定》</p></blockquote><h3 id="关键基础设施"><a href="#关键基础设施" class="headerlink" title="关键基础设施"></a>关键基础设施</h3><p><strong>关键信息基础设施定义:</strong></p><p>国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的<strong>关键信息基础设施</strong>，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由<strong>国务院制定</strong>。</p><p>下图为 关键信息基础设施安全保护条例（征求意见稿）<br><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271032759.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></p><p><strong>关键信息基础设施保护：</strong></p><ol><li><p>关键信息基础设施内涵</p><p>公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务重要行业和领域的关键信息基础设施。</p><p>其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害<strong>国家安全</strong>、<strong>国计民生</strong>、<strong>公共利益</strong>的关键信息基础设施</p></li><li><p>关键信息基础设施外延</p><p>关键信息基础设施的具体范围由国务院制定</p><p>鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系</p></li><li><p>关键信息基础设施管理机制</p><p>按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门具体负责实施本行业、本领域的关键信息基础设施保护工作</p><p>国家网信部门统筹协调有关部门对关键信息基础设施采取安全保护措施</p></li><li><p>关键信息基础设施建设要求</p><p>确保具有支持业务稳定、持续运行的性能</p><p>安全技术措施同步规划、同步建设同步使用</p></li><li><p>关键信息基础设施运营者安全保护义务</p><p>**人员安全管理:**设置专门安全管理机构和安全管理负责人;对负责人和关键岗位的人员进行安全背景审查;定期对从业人员进行网络安全教育、培训和考核。</p><p>**数据境内留存:**在我国境内运营中收集和产生的个人信息和重要数据应当在境内存储。确需向境外提供的，需经国家安全评估;对重要系统和数据库进行容灾备份。</p><p>**应急预案机制:**制定网络安全事件应急预案，并定期进行演练。</p><p><strong>安全采购措施∶</strong>采购网络产品和服务可能影响国家安全的，应当通过国家安全审查。应与网络产品和服务提供者签订安全保密协议。</p><p><strong>风险评估机制︰</strong>自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关部门.</p></li></ol><h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3><p><strong>数据保护范围</strong>:个人信息保护、用户信息保护和商业秘密保护。</p><ol><li><p>**用户信息:**引入了“用户信息”的概念，可以理解为在用户使用产品或服务过程中收集的信息构成用户信息，包括IP地址、用户名和密码、上网时间、Cookie信息等。</p><p>**收集:**网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意;</p><p>**保护:**网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。</p></li><li><p>**个人信息:**个人信息是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p><ol><li>应当遵守本法和有关法律、行政法规的规定。<strong>《电信和互联网用户个人信息保护规定》</strong></li><li>**收集、使用个人信息:**应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。</li><li><strong>不得泄露、篡改、毁损其收集的个人信息:</strong> <ol><li>采取技术措施和其他必要措施保护;</li><li>若泄露，立即采取补救措施，告知用户并向有关主管部门报告。</li></ol></li><li><strong>未经被收集者同意,不得向他人提供个人信息。</strong>但是，经过处理无法识别特定个人且不能复原的除外。</li><li><strong>个人信息主体拥有删除权（保护使用不当)和更正权(有误)</strong></li><li><strong>不得非法获取、窃取，不得非法出售、非法向他人提供</strong></li><li><strong>管理部门不得泄露履行职责中知悉的个人信息</strong></li></ol></li><li><p>**商业秘密:**是指不为公众所知悉、能为权利人带来经济利益，具有实用性并经权利人采取保密措施的技术信息和经营信息。</p><p>依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。</p></li></ol><h3 id="数据本地化"><a href="#数据本地化" class="headerlink" title="数据本地化"></a>数据本地化</h3><p>关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在<strong>境内存储</strong>。</p><p>因业务需要，确需向境外提供的，应当进行<strong>安全评估</strong>;<strong>法律、行政法规另有规定</strong>的,依照其规定。</p><p><strong>下列数据在其它法律里有本地化要求</strong>:国家秘密和国家安全数据、征信数据、个人金融信息、地图数据、网络出版服务所需的必要的技术设备、网约车相关数据和信息。</p><h3 id="以数据为中心的安全"><a href="#以数据为中心的安全" class="headerlink" title="以数据为中心的安全"></a>以数据为中心的安全</h3><p><strong>《网络安全法》对数据安全和数据保护也给予了关注。</strong></p><p>第二十一条对数据安全作出明确说明:网络运营者应当按照网络安全等级保护制度的要求，防止网络数据泄露或者被窃取、篡改。采取数据分类、重要数据备份和加密等措施。</p><p>第四章40-45,大篇幅地强调个人信息(个人数据）安全，强调数据的脱敏。</p><p><strong>网络安全法近似等于等级保护加数据安全。</strong></p><p>第18条，鼓励数据安全行业发展。</p><h3 id="网络行为要求"><a href="#网络行为要求" class="headerlink" title="网络行为要求"></a>网络行为要求</h3><p>任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗、传授犯罪方法、制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。</p><h3 id="网络运营者法律合规要求"><a href="#网络运营者法律合规要求" class="headerlink" title="网络运营者法律合规要求"></a>网络运营者法律合规要求</h3><p>需要网络运营者建立企业的管理制度和操作规程，以满足法律合规性的要求避免法律风险，主要包括如下:</p><ol><li>与实施网络安全等级保护制度相关的义务和制度建设，包括制定内部安全管理制度和<br>操作规程，确定网络安全负责人等（第二十一条);</li><li>健全用户信息保护制度（第二十二条和第四十条);</li><li>落实网络实名制(第二十四条);</li><li>网络安全事件应急预案(第二十五条);</li><li>关键信息基础设施的安全保护义务，包括:设置专门安全管理机构和安全管理负责人,并对该负责人和关键岗位的人员进行安全背景审查;定期对从业人员进行网络安全教育、技术培训和技能考核;对重要系统和数据库进行容灾备份;制定网络安全事件应急预案，并定期进行演练;法律、行政法规规定的其他义务（第三十四条）</li><li><strong>采购</strong>关键信息基础设施产品和服务的保密制度（第三十六条);</li><li>关键信息基础设施安全性的<strong>年度评估</strong>(第三十六条);</li><li><strong>个人信息</strong>的<strong>收集</strong>和<strong>利用</strong>规则及制度（第四十一条和第四十二条)</li><li>个人信息<strong>泄露</strong>事件的<strong>报告</strong>制度（第四十二条);</li><li>违法使用<strong>个人信息</strong>删除和错误个人信息更正制度（第四十三条）</li><li>网络运营者<strong>对用户非法信息传播的监管</strong>（第四十七条);</li><li>网络信息安全<strong>投诉</strong>、<strong>举报制度</strong>（第四十九条）。</li></ol><h3 id="网络运营者的安全义务"><a href="#网络运营者的安全义务" class="headerlink" title="网络运营者的安全义务"></a>网络运营者的安全义务</h3><ul><li><strong>内部安全管理∶</strong> 制定内部安全管理制度和操作规程，确定网络安全负责人</li><li><strong>安全技术措施∶</strong> 采取防范网络安全行为的技术措施;采取监测、记录网络运行状态、网络安全事件的技术措施，留存相关的网络日志不少于六个月</li><li><strong>数据安全管理∶</strong> 采取数据分类、重要数据备份和加密等措施，防止网络数据泄露或者被窃取、篡改</li><li><strong>网络身份管理︰</strong> 办理网络接入、域名注册服务，或固定电话、移动电话等入网手续，或为用户提供信息发布、即时通讯等服务，应要求用户提供真实身份信息</li><li><strong>应急预案机制∶</strong> 制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险;在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并向有关主管部门报告。</li><li><strong>安全协助义务︰</strong> 为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支持和协助</li></ul><h3 id="网络产品、服务提供者的安全义务"><a href="#网络产品、服务提供者的安全义务" class="headerlink" title="网络产品、服务提供者的安全义务"></a>网络产品、服务提供者的安全义务</h3><ul><li><strong>强制标准义务︰</strong> 网络产品、服务应当符合相关国家标准的强制性要求，不得设置恶意程序;网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供</li><li><strong>告知补救义务∶</strong> 网络产品、服务提供者发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，及时告知用户，向有关主管部门报告。</li><li><strong>安全维护义务︰</strong> 网络产品、服务提供者应为产品、服务持续提供安全维护，在规定或者当事人约定的期限内不得终止;</li><li><strong>个人信息保护∶</strong> 网络产品、服务具有收集用户信息功能的，网络产品、服务提供者应向用户明示并取得同意;涉及用户个人信息的，还应遵守相关法律、行政法规中有关个人信息保护的规定。</li></ul><h3 id="一般性安全保护义务"><a href="#一般性安全保护义务" class="headerlink" title="一般性安全保护义务"></a>一般性安全保护义务</h3><ul><li><strong>安全信息发布:</strong> 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。</li><li><strong>禁止危害行为:</strong> 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动;不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具;明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等。</li><li><strong>信息使用规则︰</strong> 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。</li></ul><h3 id="产品研发"><a href="#产品研发" class="headerlink" title="产品研发"></a>产品研发</h3><p>符合相关国家标准的强制性要求。不得设置恶意程序;发现存在安全缺陷、漏洞等风险时，应当立即采取补救措施，及时告知用户并向有关主管部门报告。</p><p>持续提供安全维护;在规定或者当事人约定的期限内，不得终止提供安全维护。</p><p>网络关键设备和网络安全专用产品安全认证合格或者安全检测符合要求后，方可销售</p><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p><strong>规范上网行为:</strong></p><ol><li>不得诈骗、传授诈骗方法、制售违禁物品;</li><li>不得危害网络安全(入侵、窃取等)、国家安全;</li><li>不得发布不良信息;</li><li>不得侵犯他人权益;</li><li>不为上述违法行为提供便利</li></ol><h3 id="网络信息安全-个人信息保护"><a href="#网络信息安全-个人信息保护" class="headerlink" title="网络信息安全-个人信息保护"></a>网络信息安全-个人信息保护</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271114441.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="网络安全审查制度"><a href="#网络安全审查制度" class="headerlink" title="网络安全审查制度"></a>网络安全审查制度</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271117403.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>2017年05月02日中央网信办正式发布《网络产品和服务安全审查办法（试行）》。其中就审查的目的、需要审查的网络产品和服务的范围、网络安全审查的管理部门(网络安全审查委员会)、审查的机构（国家统一认定网络安全审查第三方机构）和对党政机关和重点行业的审查工作提出要求。并于2017年6月1日同《网络安全法》一同实施。</p><h3 id="网络信息安全-违法犯罪信息管理"><a href="#网络信息安全-违法犯罪信息管理" class="headerlink" title="网络信息安全-违法犯罪信息管理"></a>网络信息安全-违法犯罪信息管理</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271120975.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271230500.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="法律责任"><a href="#法律责任" class="headerlink" title="法律责任"></a>法律责任</h1><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204271231928.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全概述</title>
      <link href="/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/26/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="网络安全背景"><a href="#网络安全背景" class="headerlink" title="网络安全背景"></a>网络安全背景</h1><h2 id="网络空间定义"><a href="#网络空间定义" class="headerlink" title="网络空间定义"></a>网络空间定义</h2><p><strong>网络空间(Cyberspace</strong>) 的概念是伴随着互联网的成长逐步产生、发展、演变的</p><p>2003 美国 《保护网络空间的国家战略》 指出 Cyberspace的含义：<strong>一个由信息基础设施组成的相互依赖的网络</strong></p><p>2009 美国 《网络空间政策评估》 定义 Cyberspace： <strong>信息技术基础设施相互储存的网络，包括互联网，电信网，计算机系统以及重要工业中的处理器和控制器。常见的用法还指信息及人与人交互构成的虚拟环境</strong></p><p>网络空间<strong>不是虚拟空间</strong>，而是人类线上活动空间的认为、自然延伸，是人类崭新的存在方式和形态</p><p>我国官方文件指出： <strong>互联网，通信网，计算机系统，自动化控制系统，数字设备及其承载的应用、服务和数据构成了网络空间，其已经成为陆地、海洋、天空、太空同等重要的人类活动新领域</strong></p><h2 id="网络空间存在的安全威胁"><a href="#网络空间存在的安全威胁" class="headerlink" title="网络空间存在的安全威胁"></a>网络空间存在的安全威胁</h2><ol><li>政治安全： 相比传统媒体，网络空间对现实问题有极大的催化和放大作用</li><li>经济安全： 2016年乌克兰电网被攻击</li><li>文化安全： 幕后推手，网络大V</li><li>社会安全： 恐怖主义，分裂主义，极端主义等势力对网络的利用</li><li>国防安全： 网络空间已经成为国际战略博弈的新领域</li></ol><hr><h1 id="网络强国战略"><a href="#网络强国战略" class="headerlink" title="网络强国战略"></a>网络强国战略</h1><p>2014年2月27日，习总书记主持召开中央网络安全和信息化领导小组第一次会议并发表重要讲话。中央成立网络安全和信息化领导小组，习总书记亲自担任组长，再次体现了中国最高层全面深化改革、加强顶层设计的意志，显示出保障网络安全、维护国家利益、推动信息化发展的决心。</p><p>2018年3月，中央网络安全和信息化领导小组改为中央网络安全和信息化委员会。</p><p>从网民数量、网络设施发展速度、信息消费规模等角度看，中国已是名副其实的<strong>网络大国</strong>，但离<strong>网络强国</strong>还有差距。</p><h2 id="网络强国战略目标"><a href="#网络强国战略目标" class="headerlink" title="网络强国战略目标"></a>网络强国战略目标</h2><ol><li><p><strong>近期目标</strong>: 技术强，基础强，内容强，人才强，国际话语强</p></li><li><p><strong>中期目标</strong>: 建设网络强国的战略部署与“两个一百年”奋斗目标同步推进，向着网络基础设施基本普及、自主创新能力显著增强、信息经济全面发展、网络安全保障有力的目标不断前进。</p></li><li><p><strong>远期目标</strong>: 战略清晰，技术先进，产业依靠，制网权尽在掌握，网络安全坚不可摧。</p></li></ol><blockquote><p><strong>和平</strong>: 信息技术滥用得到有效遏制</p><p><strong>安全</strong>: 网络安全风险得到有效控制</p><p><strong>开放</strong>: 信息技术标准、政策和市场开放、透明</p><p><strong>合作</strong>: 世界各国在技术交易、打击网络恐怖和网络犯罪等领域的合作更加密切</p><p><strong>有序</strong>: 公众在网络空间的知情权、参与权、表达权、监督权等合法权益得到充分保障，网络空间个人隐私获得有效保护，人权受到充分尊重。</p></blockquote><h2 id="战略原则"><a href="#战略原则" class="headerlink" title="战略原则"></a>战略原则</h2><blockquote><p>尊重维护网络空间主权</p><p>和平利用网络空间</p><p>依法治理网络空间</p><p>统筹网络安全与发展</p></blockquote><h2 id="战略任务"><a href="#战略任务" class="headerlink" title="战略任务"></a>战略任务</h2><blockquote><p>坚定捍卫网络空间主权</p><p>坚决维护国家安全</p><p>保护关键信息基础设施</p><p>加强网络文化建设</p><p>打击网络恐怖和违法犯罪</p><p>完善网络治理体系</p><p>夯实网络安全基础</p><p>提升网络空间防护能力</p><p>强化网络空间国际合作</p></blockquote><h2 id="正确的网络安全观"><a href="#正确的网络安全观" class="headerlink" title="正确的网络安全观"></a>正确的网络安全观</h2><blockquote><p>网络安全是<strong>整体</strong>的而不是割裂的<br>网络安全是<strong>动态</strong>的而不是静态的<br>网络安全是<strong>开放</strong>的而不是封闭的<br>网络安全是<strong>相对</strong>的而不是绝对的<br>网络安全是<strong>共同</strong>的而不是孤立的</p></blockquote><hr><h1 id="网络安全要素"><a href="#网络安全要素" class="headerlink" title="网络安全要素"></a>网络安全要素</h1><p>从信息的安全获取、处理和使用这一本质触发，人们对于网络安全有三种最基本的要求 <strong>CIA</strong></p><ol><li><p>保密性（Confidentialty）<br>对<strong>信息内容</strong>的保密和对<strong>信息状态</strong>的保密<br>信息状态保密比如： 虽然无法破译信息，但是可以根据某个时间段信息流量的情况，推断出某些结论</p></li><li><p>完整性（Integrity）<br>指信息未经授权不能进行更改的特性，即信息在存储或传输过程中保持不被 <strong>偶然</strong> 或 <strong>蓄意</strong> 的 <strong>删除</strong>、<strong>修改</strong>、<strong>伪造</strong>、<strong>乱序</strong>、<strong>重放</strong>、<strong>插入</strong> 等破坏和丢失的特性</p></li><li><p>可用性（Availability）<br>信息可以被授权实体访问并按需求使用的特性<br>信息的可用性与硬件可用性、软件可用性、人员可用性、环境可用性密切相关</p></li></ol><hr><h1 id="网络安全的演变史"><a href="#网络安全的演变史" class="headerlink" title="网络安全的演变史"></a>网络安全的演变史</h1><h2 id="通信保密阶段"><a href="#通信保密阶段" class="headerlink" title="通信保密阶段"></a>通信保密阶段</h2><p>数千年的时间里,军事领域对信息安全的需求使古典密码学诞生和发展。</p><p>现代通信保密阶段普遍认为是从1949年香农Shannon发表的《保密系统的信息理论》，将密码学的研究纳入了科学的轨道上</p><p>主要安全问题是窃听和分析</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204261651336.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h2><p><strong>20世纪70年代，美国国家标准局公布了数据加密标准(DES)、美国国防部(DoD)工作面了《可信计算机系统评估准则》(TCSEC)</strong></p><ol><li><p>互联网出现,互联网早期发展阶段的思维方式遵守Postel法则:严于律己，宽以待人。为之后的各种网络安全事件埋下了伏笔</p></li><li><p>Morris蠕虫1988年11月2日Morris 蠕虫的发布极大的改变了互联网的开放性，据估计造成10%的节点下线(6000个节点，当时网络估计有60000个节点)。</p></li><li><p>网络防火墙的最早期形式开发于20世纪90年代末,包过滤在旦联网很小、只包含60000个节点的时候是理想的手段，但网络的快速增长使其很快就不再实用。</p></li></ol><h2 id="信息系统安全"><a href="#信息系统安全" class="headerlink" title="信息系统安全"></a>信息系统安全</h2><p>20世纪90年后，信息系统安全成为网络安全的核心内容。</p><p>通信和计算机技术相互依存，安全的需求不断的向社会的各个领域扩展，人们的关注对象从计算机转向更具本质性的信息本身,进而更关注信息系统的安全</p><p>这一阶段除了强调保密性、完整性、可用性，人们还关注<strong>不可否认性</strong></p><p>1993年6月，美国政府同加拿大及欧共体共同起草单一的通用准则(CC标准)并将其推到国际标准。<strong>制定CC标准的目的是建立一个各国都能接受的通用的信息安全产品和系统的安全性评估准则。</strong></p><p>在美国的TCSEC、欧洲的ITSEC、加拿大的CTCPEC、美国的FC等信息安全准则的基础上，由6个国家7方(美国国家安全局和国家技术标准研究所、加、英、法、德、荷)共同提出了“信息技术安全评价通用准则(The Common Criteriafor Information Technology security Evaluation,CC )，简称CC标准，它综合了已有的信息安全的准则和标准，形成了一个更全面的框架。</p><h2 id="网络空间安全"><a href="#网络空间安全" class="headerlink" title="网络空间安全"></a>网络空间安全</h2><p>进入21世纪，网络逐渐成为继海、陆、空、天之后的第五大人类生存空间。</p><p>网络空间安全引起各国的高度关注，发达国家普遍将其视为国家安全基础,上升到国家安全的高度去认识和对待。</p><p>仅从传统的保密性、完整性、可用性来理解显然不太够，更需要关注国家层面的政治、经济、文化、军事等影响。</p><hr><h1 id="网络安全体系结构"><a href="#网络安全体系结构" class="headerlink" title="网络安全体系结构"></a>网络安全体系结构</h1><p>参照开放系统互联安全体系结构,<strong>lSO 7498-2标准</strong>,其核心内容是:为保证异构计算机进程之间远距离交换信息的安全，定义了系统应当提供的<strong>5种安全服务</strong>和<strong>8种安全机制</strong>，确定了安全服务与安全机制之间的关系，以及在ISO参考模型中安全服务和安全机制的配置。</p><h2 id="安全服务"><a href="#安全服务" class="headerlink" title="安全服务"></a>安全服务</h2><p>安全服务可以理解为安全需求的一种表示</p><h3 id="鉴别"><a href="#鉴别" class="headerlink" title="鉴别"></a>鉴别</h3><p><strong>鉴别服务是对通信中的对等实体和数据来源的鉴别</strong></p><p>对待实体鉴别是确认通信中的对等实体是所需要的实体，这种服务在建立连接时或在数据传送阶段提供使用，以证实连接实体的身份，此类服务确保一个实体没有试图冒充其它实体</p><p>数据鉴别服务本质上是要对数据的来源进行确认</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>访问控制决定了什么实体可以访问什么资源，以防止未授权的实体访问系统内的资源。这里<strong>访问</strong>是一个广义的，包含对各类资源的不同访问，如通信资源，读、写、删信息资源等。</p><p>当我们打开文件夹，新建文件时，可能没有权限，这是一种典型的访问控制机制</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>数据完整性服务用来对付试图破坏、篡改信息资源的主动威胁，从而能够防止或检测信息资源受到篡改等破坏。</p><p>从技术手段而言，有的完整性服务可在数据被篡改后予以恢复，有些则只能检测到被自发的情况</p><h3 id="数据保密性"><a href="#数据保密性" class="headerlink" title="数据保密性"></a>数据保密性</h3><p>数据保密性服务是对数据提供保护、使之不被非授权地泄露。</p><p>具体包括对用户数据进行加密，或使用攻击者无法通过观察通信业务流量而推断出其中的保密信息</p><h3 id="抗抵赖"><a href="#抗抵赖" class="headerlink" title="抗抵赖"></a>抗抵赖</h3><p>抗抵赖也称<strong>不可否认性</strong>，主要表现以下两种形式:</p><ol><li><p>原发抗抵赖，即数据发送者无法否认其发送数据的事实。如A向发B发信事后，A不能否认该信是其发送的</p></li><li><p>接收抗抵赖，即数据接收者事后无法否认其收到过这些数据。如A向B发信，事后B不能否认其收到了该信</p></li></ol><h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>安全机制是能够提供一种或多种安全服务的、与具体的实现方式无关且一般不能再细分的安全技术的抽象表示。安全机制是一般是<strong>原子</strong>级，很少交叉</p><h3 id="加密机制"><a href="#加密机制" class="headerlink" title="加密机制"></a>加密机制</h3><p>加密即能为<strong>数据</strong>提供保密性，也能为<strong>通信业务流信息</strong>提供保密性</p><h3 id="数字签名机制"><a href="#数字签名机制" class="headerlink" title="数字签名机制"></a>数字签名机制</h3><p>数字签名机制分为两个过程：</p><ol><li><p>签名过程<br>签名过程是使用签名者所私有的信息，以保证签名的唯一性。</p></li><li><p>验证签名过程<br>验证签名过程所用的程序与信息是公之与众的，以便每个人都可以验证该签名，但无法从签名中推断出签名者的私有信息。</p></li></ol><h3 id="访问控制机制"><a href="#访问控制机制" class="headerlink" title="访问控制机制"></a>访问控制机制</h3><p>访问控制即是一种服务，也是一种具体的机制。为了判断一个实体是否具有访问权,访问控制机制可以使用该实体已经鉴别过的身份（如登录系统后的身份、或实体属于某个已知具有权限的组织）进行访问控制。</p><p>如果该实体试图访问非授权的资源,那么访问控制功能会拒绝其企图还会产生日志等告警</p><p>访问控制建立在以下几种手段之上:</p><ol><li>访问控制列表</li><li>试图访问的持续时间</li><li>鉴别信息</li><li>试图访问的地址</li><li>试图访问的时间</li></ol><h3 id="数据完整性机制"><a href="#数据完整性机制" class="headerlink" title="数据完整性机制"></a>数据完整性机制</h3><p>数据完整性分两个方面:</p><ol><li><p>数据单元的完整性<br>数据单元完整性涉及两个过程，一是发送实体，另一个是接收实体。发送实验给数据单元附加上一个量（通常是哈希值)，且这个量本身可以被加密;接收实体根据数据单元产生一个相应的量，且与发送方的量进行比较，以此确定发送的数据单元是否受到篡改。</p></li><li><p>是数据流的完整性<br>数据流完整性可以采取顺序号、时间标记或密码链等手段</p></li></ol><h3 id="鉴别交换机制"><a href="#鉴别交换机制" class="headerlink" title="鉴别交换机制"></a>鉴别交换机制</h3><p>鉴别交换是通信过程中一方鉴别另一方身份的过程。常见的实现方式有:口令鉴别、数据加密确认、通信中的“握手”协议、数字签名和公让机辩认，以及通过利用该实体特征鉴别(如语言、指纹)</p><h3 id="通信业务填充机制。"><a href="#通信业务填充机制。" class="headerlink" title="通信业务填充机制。"></a>通信业务填充机制。</h3><p>通信业务填充机制是指在正常通信流中增加冗余信息，能抵抗通信业务分析。这种机制往往提供通信业务的保密性服务</p><h3 id="路由选择控制机制"><a href="#路由选择控制机制" class="headerlink" title="路由选择控制机制"></a>路由选择控制机制</h3><p>路由能动态地设定，以便物理上安全的子网络、中继站或链路使用。在使用时可基于安全属性，禁止某些属性的数据通过某子网络、中继站或链路,以确保这些通信网络的安全</p><h3 id="公证机制"><a href="#公证机制" class="headerlink" title="公证机制"></a>公证机制</h3><p>公证机制是指由于第一方和第二方互不相信，于是寻找一个双万都信任的第三方，通过第三方背书在第一方和第二方之间建立信任。在网络中，数据完整性，发送方身份、时间和目的方身份都能通过公证机制得到确保。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204261717060.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="网络安全产品"><a href="#网络安全产品" class="headerlink" title="网络安全产品"></a>网络安全产品</h1><p>安全产品是一种或多种安全机制的具体实现</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>防火墙类似一道护栏隔在内部网络和不安全的外部网络之间，是一种保护机制，阻断来自外部的网络入侵，保护内部网络安全。</p><p>所有进入内部的通信，必须经过防火墙，所有经过防火墙的通信，必须经过安全策略，防火墙自身是安全可靠，不易攻破。</p><p><strong>防火墙的功能</strong></p><blockquote><p>访问控制功能，是防火墙最基本也是最重要的功能内容控制功能，如过滤垃圾邮件</p><p>安全日志功能，可以记录网络通信情况，包括什么用户在什么时间进行了什么操作</p><p>集中管理功能，在一个组织中可能有多台防火墙需要集中统一管理，避免出现配置上的安全漏洞。</p><p>其它功能:如VPN(虚拟专用网络)、NAT(网络地址转换)</p></blockquote><h2 id="入侵检测系统-Intrusion-Detection-System-IDS"><a href="#入侵检测系统-Intrusion-Detection-System-IDS" class="headerlink" title="入侵检测系统(Intrusion Detection System,IDS)"></a>入侵检测系统(Intrusion Detection System,IDS)</h2><p>IDS通过监视受保护系统或网络的状态，可发现正进行或已发生的网络攻击。</p><p><strong>IDS功能</strong></p><blockquote><p>监视用户和系统的活动，IDS通过获取进出某台主机的数据、或某网段的数据或某主机的日志等监视用户和系统的活动</p><p>发现入侵行为，包含两方面</p><ol><li><p>通过分析用户和系统的活动，判断是否存在对系统的入侵行为</p></li><li><p>评估系统关键资源和数据文件的完整性，判断系统是否遭到入侵</p></li></ol><p>记录和报警，IDS在检测到入侵行为后，记录入侵行为的基本情况，并采取相应措施发出报警，甚至<strong>实现防火墙的联动</strong></p></blockquote><p><strong>入侵检测系统分类</strong></p><blockquote><p>基于主机的IDS。基于主机的IDS用于保护运行关键应用的主机。它通过监视与分析主机的审计记录和日志文件来检测入侵。日志中包含发生在系统上的不寻常和不期望的活动证据</p><p>基于主机的IDS优点:能确定攻击是否成功、监视粒度更精细、配置灵活、适用于加密网络、不需要额外硬件</p></blockquote><blockquote><p>基于网络的IDS。基于网络的IDS主要用于实时监测网络关键路径的信息，通过侦听网络上的所有分组来分析入侵行为。</p><p>基于网络IDS优点:实时提供网络保护、可检测面向网络的攻击、不会影响现有网络的性能、更全面的监视企业网络、操作维护相对简单。</p><p>基于网络IDS的缺点:无法在加密环境中使用</p></blockquote><h2 id="恶意代码防护"><a href="#恶意代码防护" class="headerlink" title="恶意代码防护"></a>恶意代码防护</h2><p><strong>恶意代码就是一个计算机程序或一段程序代码，执行后完成特定的功能，但这些功能是恶意的，有破坏作用的，如计算机病毒。</strong></p><p><strong>恶意代码分类</strong></p><blockquote><p>病毒:一种靠修改其他程序来插入或进行自身复制，从而感染其他程序的一段程序，具有传染性、隐蔽性、潜伏性、多态性和破坏性等特征</p><p>蠕虫是利用操作系统漏洞进行传播，可以算是病毒的一种发展。</p><p>特洛伊木马，指一个隐藏在合法程序中的非法程序。该非法程序似用二仕个和情的情况下执行。隐身的木马程序能实现一些功能，如删除又件、反达消息.</p><p>逻辑炸弹，可以理解为特定逻辑条件满足时实施破坏的计算机程序，不具有类似病毒的传播性。</p></blockquote><hr><h1 id="网络安全事件"><a href="#网络安全事件" class="headerlink" title="网络安全事件"></a>网络安全事件</h1><h2 id="APT-攻击特征"><a href="#APT-攻击特征" class="headerlink" title="APT 攻击特征"></a>APT 攻击特征</h2><ol><li><p>潜伏性<br>可能在用户环境中存在一年以上或更久，他们不断收集各种信息，直到收集到重要情报</p></li><li><p>持续性<br>由于APT攻击具有持续性甚至长达数年的特征，这让企业的管理人员无从察觉</p></li><li><p>单点隐蔽性<br>为了躲避传统检测设备，APT更加注重动态行为和静态文件的隐蔽性。例如通过隐蔽通道、加密通道避免网络行为被检测</p></li><li><p>攻击渠道多样性<br>社交攻击、0day漏洞利用、物理摆渡等方式层出不穷</p></li><li><p>针对特定目标<br>针对特定政府或企业，长期进行有计划性、组织性的窃取情报及破坏行为</p></li></ol><h2 id="伊朗“震网”事件"><a href="#伊朗“震网”事件" class="headerlink" title="伊朗“震网”事件"></a>伊朗“震网”事件</h2><p><strong>“震网”的由来</strong></p><p>2010年6月，白俄罗斯的一家安全公司 VirusBlokAda 受邀为一些伊朗客户检查系统，调查他们电脑的死机和重启问题。技术人员在客户电脑中发现了一种新的蠕虫病毒。根据病毒代码中出现的特征字“stux”，新病毒被命名为“震网病毒( stuxnet) ”，并加入到公共病毒库，公布给业界人士研究</p><p><strong>“震网”病毒的特点</strong></p><ol><li><p>针对性<br>是世界上第一例针对工控系统的病毒,是专门针对伊朗纳坦兹核工厂量身定做的病毒武器</p></li><li><p>不经过互联网<br>震网病毒只凭借某个用户用U盘从一台计算机传播到另一台计算机或者通过局域网传播</p></li><li><p>4个win 0day<br>利用的漏洞是软件开发者和反病毒公司还没发现的，这意味着根本没有补丁。</p></li><li><p>有截止日期<br>震网给自己的行动设定了终止日期:2012年6月24日。当震网病毒进入一台新的计算机，都会检查日期，如果晚于这个日期，病毒就会停下来，放弃感染</p></li></ol><h2 id="WannaCry-勒索病毒事件"><a href="#WannaCry-勒索病毒事件" class="headerlink" title="WannaCry 勒索病毒事件"></a>WannaCry 勒索病毒事件</h2><p><strong>病毒爆发</strong><br>2017年5月12日，”WannaCry”勒索病毒在全球范围内爆发，本次事件波及150多个国家和地区。国内企事业单位以及教育网成为重灾区，该病毒利用NSA泄露“永恒之蓝”黑客武器攻击windows系统的445端口。</p><h3 id="“永恒之蓝”-EternalBlue"><a href="#“永恒之蓝”-EternalBlue" class="headerlink" title="“永恒之蓝”(EternalBlue)"></a>“永恒之蓝”(EternalBlue)</h3><p>美国国家安全局(NSA)研发的网络武器</p><p>用于攻击特定的政府企业目标(NSA曾通过该武器控制了几乎整个中东的银行和金融机构)</p><p>4月被黑客组织“影子经纪人”公开</p><p>利用微软Windows SMB协议漏洞，远程控制系统只要目标系统接入互联网&#x2F;局域网，就可能受到攻击。目前影响XP ~ Windows 8系统</p><h3 id="勒索病毒的传播和技术特点"><a href="#勒索病毒的传播和技术特点" class="headerlink" title="勒索病毒的传播和技术特点"></a>勒索病毒的传播和技术特点</h3><ol><li>2013年首次出现的新型病毒模式加密用户的文件后勒索赎金</li><li>通常3~7天内不支付赎金，作者将“撕票”</li><li>交易和勒索过程极难被追踪，FBI悬赏300万美元未果过去主要通过邮件、挂马传播</li><li>从15年开始进入爆发期，目前有超过100种家族仅CryptoWall家族的一个变种就收到23亿赎金</li><li>近几年苹果电脑、安卓和iPhone手机也出现勒索病毒</li></ol><h2 id="重大安全事件回顾"><a href="#重大安全事件回顾" class="headerlink" title="重大安全事件回顾"></a>重大安全事件回顾</h2><h3 id="丰收行动"><a href="#丰收行动" class="headerlink" title="丰收行动"></a>丰收行动</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262243704.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="摩诃草事件"><a href="#摩诃草事件" class="headerlink" title="摩诃草事件"></a>摩诃草事件</h3><p><strong>摩诃草组织（APT-C-09）</strong>是一个来自于南亚地区的境外APT组织，该组织已持续活跃了7年。摩诃草组织主要针对中国、巴基斯坦等亚洲地区国家进行网络间谍活动，其中以窃取敏感信息为主。相关攻击活动最早可以追溯到2009年11月，至今还非常活跃。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262245703.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="鱼叉攻击"><a href="#鱼叉攻击" class="headerlink" title="鱼叉攻击"></a>鱼叉攻击</h3><p>鱼叉攻击是针对特定组织的网络欺诈行为,目的是不通过授权来访问机密数据，最常见的方法是将木马程序作为电子邮件发送给特定目标，并诱使打开附件。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262246256.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h3><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204262247979.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><p>参考深信服产业教育平台</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax学习</title>
      <link href="/2022/04/24/ajax%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/24/ajax%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a><strong>AJAX</strong> <strong>简介</strong></h2><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。 </p><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 </p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a><strong>XML</strong> <strong>简介</strong></h2><p>XML 可扩展标记语言。 </p><p>XML 被设计用来传输和存储数据。 </p><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签， </p><p>全都是自定义标签，用来表示一些数据。</p><p>现在已经被JSON取代了 </p><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h4 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h4><ol><li><p>可以无需刷新页面而与服务器端进行通信。 </p></li><li><p>允许你根据用户事件来更新部分页面内容。</p></li></ol><h4 id="AJAX的缺点"><a href="#AJAX的缺点" class="headerlink" title="AJAX的缺点"></a>AJAX的缺点</h4><ol><li>没有浏览历史，不能回退 </li><li>存在跨域问题(同源) </li><li>SEO 不友好 (爬虫爬不到)</li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。<br>约定, 规则</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p><strong>重点是格式与参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">行      POST  /s?ie=utf-8  HTTP/1.1 </span><br><span class="line">头      Host: atguigu.com</span><br><span class="line">        Cookie: name=guigu</span><br><span class="line">        Content-type: application/x-www-form-urlencoded</span><br><span class="line">        User-Agent: chrome 83</span><br><span class="line">空行</span><br><span class="line">体      username=admin&amp;password=admin</span><br></pre></td></tr></table></figure><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">行      HTTP/1.1  200  OK</span><br><span class="line">头      Content-Type: text/html;charset=utf-8</span><br><span class="line">        Content-length: 2048</span><br><span class="line">        Content-encoding: gzip</span><br><span class="line">空行    </span><br><span class="line">体      &lt;html&gt;</span><br><span class="line">            &lt;head&gt;</span><br><span class="line">            &lt;/head&gt;</span><br><span class="line">            &lt;body&gt;</span><br><span class="line">                &lt;h1&gt;啦啦啦&lt;/h1&gt;</span><br><span class="line">            &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Node-js-express-框架"><a href="#Node-js-express-框架" class="headerlink" title="Node.js express 框架"></a>Node.js express 框架</h2><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>这里我推荐使用 nvm 来管理 node 的版本,因为在我做项目过程中，可能需要维护别人的老项目，所以node版本经常不匹配，使用 nvm 进行node 版本的管理，可用方便的切换不同版本的 node 。</p><p>windows的话，可以在<a href="https://github.com/coreybutler/nvm-windows/releases">github上下载nvm</a> 打开我们可以看到两个版本</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290935478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>nvm的具体安装和使用<a href="https://www.jianshu.com/p/96f9317db0b5">简书Do_Du</a>有详细的步骤，可以进行参考</p><h4 id="使用express框架"><a href="#使用express框架" class="headerlink" title="使用express框架"></a>使用express框架</h4><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供一系列强大特性帮助你创建各种Web应用</p><p>在文件夹路径下的cmd中，初始化项目<code> npm init --yes</code>  </p><p>安装 express ： <code> npm i express</code></p><p>使用express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express基本使用.js</span></span><br><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO EXPRESS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写好文件后，在文件所在路径的cmd中 使用 node 来启动服务器：<code>node express基本使用.js</code> 可以看到服务已经启动，cmd中打印出了 “<code>服务已经启动, 8000 端口监听中....</code>” 字样</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p>在下文前端的代码中，发送请求要用的文件为 <code>server.js</code> 是使用 <code>express</code> 框架搭建的，全部代码在如下，跑起来 <code>node</code> 服务后就可以进行 <code>ajax</code> 请求的发送</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX - 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以接收任意类型的请求 </span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON 响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应一个数据</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//对对象进行字符串转换</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对 IE 缓存</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO IE - 5&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/delay&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;延时响应&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/axios-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/fetch-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.send(&#x27;Hello jQuery AJAX&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>&#125;;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonp服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;尚硅谷atguigu&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户名检测是否存在</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/check-username&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//接收 callback 参数</span></span><br><span class="line">    <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h2><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>启动写好的<code>server.js</code> : <code>node server.js</code></p><p>点击按钮 ，获取响应显示在div中</p><blockquote><p> 创建一个 XMLHttpRequest() 对象</p><p>使用 open方法，初始化请求方法和url （对于需要传参数的get请求，直接在url后面拼接参数）</p><p>使用send方法来发送请求</p><p>绑定onreadystatechange事件，处理返回的结果</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取button元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1. 创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//2. 初始化 设置请求方法和 url</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">    <span class="comment">//3. 发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">//4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">    <span class="comment">//onreadystatechange事件：</span></span><br><span class="line">    <span class="comment">//      on              when 当....时候</span></span><br><span class="line">    <span class="comment">//      readystate      是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="comment">//      change          改变</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="comment">//判断 (服务端返回了所有的结果 这个时候状态是 4 )</span></span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">            <span class="comment">// 2xx 成功</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                <span class="comment">//处理结果  行 头 空行 体</span></span><br><span class="line">                 <span class="comment">//响应 </span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);<span class="comment">//状态码</span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>);<span class="comment">//状态字符串</span></span><br><span class="line">                     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>());<span class="comment">//所有响应头</span></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);<span class="comment">//响应体</span></span><br><span class="line">                   <span class="comment">//设置 result 的文本</span></span><br><span class="line">                    result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><p>过程和get请求差不多，</p><p>设置参数的时候，在send方法中设置，</p><p>不论get还是post 都可以设置请求头，不过post常用，通过 setRequestHeader来设置请求头</p><p>server.js 前端人员不用管其实。但是如果设置了自定义字段的请求头。server.js需要添加<code>response.setHeader(&#39;Access-Control-Allow-Headers&#39;, &#39;*&#39;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//1. 创建对象</span></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            <span class="comment">//2. 初始化 设置类型与 URL</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">            <span class="comment">//设置请求头</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;atguigu&#x27;</span>);</span><br><span class="line">            <span class="comment">//3. 发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">            <span class="comment">// xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);</span></span><br><span class="line">            <span class="comment">// xhr.send(&#x27;1233211234567&#x27;);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//4. 事件绑定</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        <span class="comment">//处理服务端返回的结果</span></span><br><span class="line">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="处理服务端返回的json数据"><a href="#处理服务端返回的json数据" class="headerlink" title="处理服务端返回的json数据"></a>处理服务端返回的json数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span><br><span class="line">        <span class="comment">//绑定键盘按下事件</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">//设置响应体数据的类型</span></span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">//事件绑定</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                  <span class="comment">//</span></span><br><span class="line">                  <span class="comment">// console.log(xhr.response);</span></span><br><span class="line">                  <span class="comment">// result.innerHTML = xhr.response;</span></span><br><span class="line">                  <span class="comment">// 1. 手动对数据转化</span></span><br><span class="line">                  <span class="comment">// let data = JSON.parse(xhr.response);</span></span><br><span class="line">                  <span class="comment">// console.log(data);</span></span><br><span class="line">                  <span class="comment">// result.innerHTML = data.name;</span></span><br><span class="line">                  <span class="comment">// 2. 自动转换</span></span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                  result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>.<span class="property">name</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对于处理服务端返回的json格式字符串，我们有两种方法来处理</p><ol><li><p>手动处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JSON parse 方法 把json格式字符串转换为json 实现字符串转json ，然后就可以操作json数据了</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">result.<span class="property">innerHTML</span> = data.<span class="property">name</span>;</span><br></pre></td></tr></table></figure></li><li><p>自动处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用XMLHttpRequest 对象自带的方法，设置接收的响应为json格式，那么response会自动转换为json格式，直接操作json格式的response就好了</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="IE-缓存问题"><a href="#IE-缓存问题" class="headerlink" title="IE 缓存问题"></a>IE 缓存问题</h4><p>ie 浏览器会把 ajax 请求缓存起来，下次再请求的话，就会请求本地的数据，对于时效性强的页面不好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#result&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">     xhr.<span class="title function_">send</span>();</span><br><span class="line">     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于缓存问题，只有请求的东西完全一样才会走缓存，所以我们给请求加上一个时间戳参数<code>Date.now()</code>，这样就每次都是去服务器请求数据。</p><h4 id="超时和网络异常问题"><a href="#超时和网络异常问题" class="headerlink" title="超时和网络异常问题"></a>超时和网络异常问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#result&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//超时设置 2s 设置</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">//超时回调</span></span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;网络异常, 请稍后重试!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//网络异常回调</span></span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;你的网络似乎出了一些问题!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span>&lt; <span class="number">300</span>)&#123;</span><br><span class="line">                result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这个案例中，server.js 中设置了延迟响应来模拟响应超时。</p><p>通过 XMLHttpRequest 的timeout 来设置超时的时间，即超过这个时间，就判定它是超时的。</p><p>通过 ontimeout 来设置超时的回调函数，即超时后怎么处理<br>通过 onerror 来设置断网的回调函数。</p><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abort</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 XMLHttpRequest 的abort方法来请求数据</p><h4 id="重复请求问题"><a href="#重复请求问题" class="headerlink" title="重复请求问题"></a>重复请求问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//标识变量</span></span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>; <span class="comment">// 是否正在发送AJAX请求</span></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//判断标识变量</span></span><br><span class="line"><span class="keyword">if</span>(isSending) x.<span class="title function_">abort</span>();<span class="comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//修改 标识变量的值</span></span><br><span class="line">    isSending = <span class="literal">true</span>;</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">    x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">              <span class="comment">//修改标识变量</span></span><br><span class="line">              isSending = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个标识变量，如果请求已经发送了，正在加载，就停止后面重复发送的请求。</p><h2 id="JQuery-中的ajax请求"><a href="#JQuery-中的ajax请求" class="headerlink" title="JQuery 中的ajax请求"></a>JQuery 中的ajax请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发送get 请求， 第四个参数是设置响应的数据类型</span></span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,<span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// post请求，只用把get换成post就好了</span></span><br><span class="line">     $.<span class="title function_">post</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的请求方法 ajax</span></span><br><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="comment">//url</span></span><br><span class="line">         <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line">         <span class="comment">//参数</span></span><br><span class="line">         <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">         <span class="comment">//请求类型</span></span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">         <span class="comment">//响应体结果</span></span><br><span class="line">         <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">         <span class="comment">//成功的回调</span></span><br><span class="line">         <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//超时时间</span></span><br><span class="line">         <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">         <span class="comment">//失败的回调</span></span><br><span class="line">         <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错啦!!&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//头信息</span></span><br><span class="line">           <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="attr">c</span>:<span class="number">300</span>,</span><br><span class="line">                <span class="attr">d</span>:<span class="number">400</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="axios-发送-ajax-请求"><a href="#axios-发送-ajax-请求" class="headerlink" title="axios 发送 ajax 请求"></a>axios 发送 ajax 请求</h2><p>axios 是目前发送ajax 请求比较热门的工具包</p><p>可以安装也可以直接通过链接引入<code>&lt;script crossorigin=&quot;anonymous&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置 baseURL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//GET 请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">//url中拼接的参数</span></span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">             <span class="attr">id</span>: <span class="number">100</span>,</span><br><span class="line">             <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//请求头信息</span></span><br><span class="line">         <span class="attr">headers</span>: &#123;</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span>,</span><br><span class="line">             <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发送post请求 请求体放在第二个参数的位置，</span></span><br><span class="line">     axios.<span class="title function_">post</span>(<span class="string">&#x27;/axios-server&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">          <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">                <span class="comment">//url 中拼接的参数</span></span><br><span class="line">                <span class="attr">params</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">200</span>,</span><br><span class="line">                    <span class="attr">vip</span>: <span class="number">9</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//请求头参数</span></span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">                    <span class="attr">weight</span>: <span class="number">180</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">axios</span>(&#123;</span><br><span class="line">                <span class="comment">//请求方法</span></span><br><span class="line">                method : <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="comment">//url</span></span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/axios-server&#x27;</span>,</span><br><span class="line">                <span class="comment">//url参数</span></span><br><span class="line">                <span class="attr">params</span>: &#123;</span><br><span class="line">                    <span class="attr">vip</span>:<span class="number">10</span>,</span><br><span class="line">                    <span class="attr">level</span>:<span class="number">30</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//头信息</span></span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="attr">a</span>:<span class="number">100</span>,</span><br><span class="line">                    <span class="attr">b</span>:<span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//请求体参数</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                    <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//响应状态码</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">                <span class="comment">//响应状态字符串</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">                <span class="comment">//响应头信息</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">                <span class="comment">//响应体</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Fetch函数发送请求"><a href="#Fetch函数发送请求" class="headerlink" title="Fetch函数发送请求"></a>Fetch函数发送请求</h2><p>fetch函数属于全局对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文档地址</span></span><br><span class="line"><span class="comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;</span><br><span class="line">         <span class="comment">//请求方法</span></span><br><span class="line">         <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">         <span class="comment">//请求头</span></span><br><span class="line">         <span class="attr">headers</span>: &#123;</span><br><span class="line">               <span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//请求体</span></span><br><span class="line">          <span class="attr">body</span>: <span class="string">&#x27;username=admin&amp;password=admin&#x27;</span></span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// return response.text();</span></span><br><span class="line">        <span class="comment">// 就看响应的是什么 可以用json直接解析出json字符串</span></span><br><span class="line">          <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h4><p>同源策略(Same-Origin Policy)最早由 Netscape 公司提出，是浏览器的一种安全策略</p><p><strong>同源</strong>： 协议、域名、端口号 必须完全相同。 </p><p>违背同源策略就是跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//响应一个页面</span></span><br><span class="line">    response.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;用户数据&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>lalal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击获取用户数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里因为是满足同源策略的, 所以 url 可以简写</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;/data&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">            x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">response</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="jsonp-解决跨域"><a href="#jsonp-解决跨域" class="headerlink" title="jsonp 解决跨域"></a>jsonp 解决跨域</h4><p>JSONP 是什么 </p><ul><li>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。</li></ul><p>JSONP 怎么工作的？ </p><ul><li>在网页有一些标签天生具有跨域能力，比如：img  link  iframe  script。 </li><li>JSONP 就是利用 script 标签的跨域能力来发送请求的</li></ul><p>JSONP 的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取 input 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明 handle 函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;solid 1px #f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//修改 p 标签的提示文本</span></span></span><br><span class="line"><span class="language-javascript">            p.<span class="property">innerHTML</span> = data.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取用户的输入值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//向服务器端发送请求 检测用户名是否存在</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1. 创建 script 标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2. 设置标签的 src 属性</span></span></span><br><span class="line"><span class="language-javascript">            script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8000/check-username&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3. 将 script 插入到文档中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过js 创建一个script 标签，在标签的src中写入需要跨域的路径，然后服务器返回一个js格式的数据实现跨域效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="comment">//用户名检测是否存在</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/check-username&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;用户名已经存在&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过jquery实现 jsonp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery-jsonp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#result</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#089</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送 jsonp 请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">getJSON</span>(<span class="string">&#x27;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;#result&#x27;</span>).<span class="title function_">html</span>(<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    名称: <span class="subst">$&#123;data.name&#125;</span>&lt;br&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    校区: <span class="subst">$&#123;data.city&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                `</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发送请求的时候，需要加一个callback参数，返回的时候，获取到该参数，改参数就是getjson里面的回调函数的意思，返回对回调函数的调用，就可以实现对数据的渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-jsonp-server&#x27;</span>,<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// response.send(&#x27;console.log(&quot;hello jsonp&quot;)&#x27;);</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//接收 callback 参数</span></span><br><span class="line">    <span class="keyword">let</span> cb = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><p>CORS 是什么？ </p><ul><li>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源</li></ul><p>CORS 怎么工作的？ </p><ul><li>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</li></ul><p>CORS 的使用 </p><p>前端就按照ajax 的方法写就好了，cors 是在后端的处理。在后端设置一个响应头，允许跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cors-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello CORS&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ptext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用v-text, 属性值为要渲染的数据的键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text会把原来的内容覆盖掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ptext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;.ptext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p v-text="username">yjr1100</p>            <p v-text="gender">你猜</p>        </div>    </div></div>]]></content>
      
      
      <categories>
          
          <category> JS高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite的使用</title>
      <link href="/2022/04/23/vite%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/23/vite%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<img src="https://vitejs.cn/logo.svg" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="vite-与-vue-cli"><a href="#vite-与-vue-cli" class="headerlink" title="vite 与 vue-cli"></a>vite 与 vue-cli</h1><p>相比于 <code>vue-cli</code> ,<code>vite</code> 只支持 <code>Vue3.x</code> 的项目的创建，不是基于 <code>webpack</code> 的打包工具 运行速度比较快，比较小巧，实际开发中还是 <code>vue-cli</code> 使用比较多</p><h1 id="vite的基本使用"><a href="#vite的基本使用" class="headerlink" title="vite的基本使用"></a>vite的基本使用</h1><p>下面使用vite来创建vue3的项目</p><ol><li><p>初始化项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite-app 项目名称</span><br></pre></td></tr></table></figure></li><li><p>运行vue3的项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 项目名称</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h1 id="vite-构建的项目结构"><a href="#vite-构建的项目结构" class="headerlink" title="vite 构建的项目结构"></a>vite 构建的项目结构</h1><h2 id="整体结构图"><a href="#整体结构图" class="headerlink" title="整体结构图"></a>整体结构图</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204231648325.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h2 id="src目录结构"><a href="#src目录结构" class="headerlink" title="src目录结构"></a>src目录结构</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204231650269.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h1 id="vite项目的运行流程"><a href="#vite项目的运行流程" class="headerlink" title="vite项目的运行流程"></a>vite项目的运行流程</h1><p>在工程化的项目中，vue要做的就是通过<code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 的指定取域中</p><p>其中：</p><ol><li><code>App.vue</code> 用来编写待渲染的模板结构</li><li><code>index.html</code> 中需要预留一个el区域</li><li><code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 所预留的区域中</li></ol><p>看一下main.js 中进行渲染的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 从vue中按需导入 createApp函数</span></span><br><span class="line"><span class="comment">// createApp函数的作用，是创建 Vue 的单页面应用程序实例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 导入待渲染的 App 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 调用 createApp() 函数，返回值是“单页面应用程序的实例”，用常量 spa_app 进行接收，同时把App组件座位参数传给 createApp 函数，表示把App渲染 index.html 页面上</span></span><br><span class="line"><span class="keyword">const</span> spa_app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 调用spa_app 实例的mount 方法，用来指定 vue实际要控制的区域</span></span><br><span class="line">spa_app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/2022/04/10/vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/04/10/vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="路由的概念和原理"><a href="#路由的概念和原理" class="headerlink" title="路由的概念和原理"></a>路由的概念和原理</h1><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><p><strong>路由（英文：router）就是对应关系</strong></p><h2 id="SPA和路由"><a href="#SPA和路由" class="headerlink" title="SPA和路由"></a>SPA和路由</h2><p>SPA（单页面应用程序） 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。此时，不同组件之间的切换需要通过前端路由来实现。</p><p>在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！</p><h2 id="前端路由的工作方式"><a href="#前端路由的工作方式" class="headerlink" title="前端路由的工作方式"></a>前端路由的工作方式</h2><ol><li>用户点击了页面上的路由链接</li><li>导致了 URL 地址栏中的 Hash 值发生了变化</li><li>前端路由监听了到 Hash 地址的变化</li><li>前端路由把当前 Hash 地址对应的组件渲染都浏览器中</li></ol><hr><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="什么是-vue-router"><a href="#什么是-vue-router" class="headerlink" title="什么是 vue-router"></a>什么是 vue-router</h2><p>vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目中组件的切换。</p><p><a href="https://router.vuejs.org/zh/">vue-router 的官方文档地址</a></p><h2 id="vue-router-安装和配置"><a href="#vue-router-安装和配置" class="headerlink" title="vue-router 安装和配置"></a>vue-router 安装和配置</h2><ol><li>安装 vue-router 包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.2 -S</span><br></pre></td></tr></table></figure></li><li>创建路由模块<br>在 src 源代码目录下，新建 router&#x2F;index.js 路由模块，并初始化如下的代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 vue 和 vuerouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用 Vue.use()函数, 把 VueRouter 安装为 Vue的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外共享router实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li>导入并挂载路由模块<br>在<code> src/main.js</code> 入口文件中，导入并挂载路由模块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App2.vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由模块，目的：拿到路由的实例对象</span></span><br><span class="line"><span class="comment">// 在进行模块化导入的时候，如果给定的是文件夹，则默认导入这个文件夹下，名字叫做 index.js 的文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 在 Vue 项目中，要想把路由用起来，必须把路由实例对象，通过下面的方式进行挂载</span></span><br><span class="line">  <span class="comment">// router: 路由的实例对象</span></span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>声明路由链接和占位符 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;App2 组件&lt;/h1&gt;</span><br><span class="line">    &lt;!--路由链接---&gt;</span><br><span class="line">    &lt;!-- 当安装和配置了 vue-router 后，就可以使用 router-link 来替代普通的 a 链接了 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!-- 只要在项目中安装和配置了 vue-router，就可以使用 router-view 这个组件了 --&gt;</span><br><span class="line">    &lt;!-- 它的作用很单纯：路由的占位符 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li>定义路由规则<br> 在 <code>src/router/index.js</code> 路由模块中，通过 <code>routes</code> 数组声明路由的匹配规则 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入需要展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Movie.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由实例的时候，写入路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/movie&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Movie</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure> 这样以后，通过路由连接就可以显示对应的组件了</li></ol><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由实例的时候，写入路由规则</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="attr">routes</span>:[</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,<span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Home</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/movie&#x27;</span>,<span class="attr">component</span>:<span class="title class_">Movie</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,<span class="attr">component</span>:<span class="title class_">About</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>通过路由实现组件的嵌套展示，叫做嵌套路由。</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204102331681.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>下面我们来实现嵌套路由</p><h3 id="声明子路由链接和子路由占位符"><a href="#声明子路由链接和子路由占位符" class="headerlink" title="声明子路由链接和子路由占位符"></a>声明子路由链接和子路由占位符</h3><p>想要使用嵌套路由，那么子组件中就需要有路由链接和路由占位符，下面在 <code>About.vue</code> 中声明子路由链接和子路由占位符</p><blockquote><p>注意在声明路由链接时，前面需要加上<strong>该组件的路由</strong>然后再跟<strong>子路由</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>About 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子级路由链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子级路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明子路由规则"><a href="#声明子路由规则" class="headerlink" title="声明子路由规则"></a>声明子路由规则</h3><p>在 <code>src/router/index.js</code> 路由模块中，导入需要的组件，并使用 <code>children</code> 属性声明子路由规则</p><blockquote><p>注意子路由写的时候，path习惯不写前面的<code>/</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="默认子路由"><a href="#默认子路由" class="headerlink" title="默认子路由"></a>默认子路由</h3><p>在上面的子路由规则写好后，我们直接点击定位到<code>about</code>发现子路由的组件没有显示，我们可以通过设置重定向来让它显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/about/tab1&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除了重定向我们可以使用<strong>默认子路由</strong>来实现,如果 <code>childre</code> 数组中，某个路由规则 path 值为空字符串，则这条路由规则叫做“<strong>默认子路由</strong>”</p><blockquote><p>注意，使用默认子路由后，在写组件的子路由链接时，默认的子路由不要再加后边的路径，直接<code>&lt;router-link to=&quot;/about&quot;&gt;tab1&lt;/router-link&gt;</code> 就好</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 子路由规则</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;tab2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>如果我们需要根据不同的电影id来访问电影详情，写下如下的路由链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/1&quot;</span>&gt;</span>洛基<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/2&quot;</span>&gt;</span>雷神<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/3&quot;</span>&gt;</span>复联<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了不给每个连接都定义一个路由规则，提高路由规则的复用性，我们就需要使用动态路由匹配</p><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。</p><p>在 vue-router 中使用英文的冒号<code>:</code>来定义路由的参数项。通过<code>props</code>属性开启 props 传参，方便拿到动态参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// routes 是一个数组，作用：定义 “hash 地址” 与 “组件” 之间的对应关系</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 重定向的路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 路由规则</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    <span class="comment">// 需求：在 Movie 组件中，希望根据 id 的值，展示对应电影的详情信息</span></span><br><span class="line">    <span class="comment">// 可以为路由规则开启 props 传参，从而方便的拿到动态参数的值</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/:mid&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>既然需要根据不同的id来显示<code>Movie</code>组件的内容，那么我们就需要在movie组件中得到id的动态值</p><p>我们通过打印 Movie组件的 <code>this</code> 来看路由相关的信息,并且使用 <code>props</code> 来接收传来的动态的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this.$route 是路由的“参数对象” --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this.$router 是路由的“导航对象” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Movie 组件 --- &#123;&#123; $route.params.mid &#125;&#125; --- &#123;&#123; mid &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Movie&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接收 props 数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;mid&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由的两种参数"><a href="#路由的两种参数" class="headerlink" title="路由的两种参数"></a>路由的两种参数</h2><p>路径参数: 在 hash 地址中， &#x2F; 后面的参数项 比如 <code>/movie/1</code></p><p>查询参数: 在 hash 地址中，? 后面的参数项 比如 <code>/movie/2?name=zs&amp;age=20</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意1：在 hash 地址中， / 后面的参数项，叫做“路径参数” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在路由“参数对象”中，需要使用 this.$route.params 来访问路径参数 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意2：在 hash 地址中，? 后面的参数项，叫做“查询参数” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在路由“参数对象”中，需要使用 this.$route.query 来访问查询参数 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意3：在 this.$route 中，path 只是路径部分；fullPath 是完整的地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /movie/2?name=zs&amp;age=20 是 fullPath 的值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /movie/2 是 path 的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/1&quot;</span>&gt;</span>洛基<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/2?name=zs&amp;age=20&quot;</span>&gt;</span>雷神<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/3&quot;</span>&gt;</span>复联<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ptext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用v-text, 属性值为要渲染的数据的键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text会把原来的内容覆盖掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ptext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;.ptext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p v-text="username">yjr1100</p>            <p v-text="gender">你猜</p>        </div>    </div></div><h2 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h2><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航。例如：<br>⚫ 普通网页中点击 <code>&lt;a&gt;</code> 链接、vue 项目中点击 <code>&lt;router-link&gt;</code> 都属于<strong>声明式导航</strong></p><p>在浏览器中，调用 API 方法实现导航的方式，叫做编程式导航。例如：<br>⚫ 普通网页中调用 location.href 跳转到新页面的方式，属于<strong>编程式导航</strong></p><h3 id="vue-router-中编程式导航API"><a href="#vue-router-中编程式导航API" class="headerlink" title="vue-router 中编程式导航API"></a>vue-router 中编程式导航API</h3><p>vue-router 提供了许多编程式导航的 API，其中最常用的导航 API 分别是：</p><blockquote><p>this.$router.push(‘hash 地址’)<br>⚫ 跳转到指定 hash 地址，展示对应组件，并增加一条历史记录</p></blockquote><blockquote><p>this.$router.replace(‘hash 地址’)<br>⚫ 跳转到指定的 hash 地址，展示对应组件，并替换掉当前的历史记录</p></blockquote><blockquote><p>this.$router.go(数值 n)<br>⚫ 可以在浏览历史中前进和后退 n 个页面</p></blockquote><blockquote><p>$router.back()<br>⚫ 在历史记录中，后退到上一个页面</p></blockquote><blockquote><p>$router.forward()<br>⚫ 在历史记录中，前进到下一个页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoLk&quot;</span>&gt;</span>通过 push 跳转到“洛基”页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoLk2&quot;</span>&gt;</span>通过 replace 跳转到“洛基”页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在行内使用编程式导航跳转的时候，this 必须要省略，否则会报错！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.back()&quot;</span>&gt;</span>back 后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.forward()&quot;</span>&gt;</span>forward 前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">gotoLk</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过编程式导航 API，导航跳转到指定的页面</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/movie/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">gotoLk2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/movie/1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">goback</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// go(-1) 表示后退一层</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果后退的层数超过上限，则原地不动</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p><strong>导航守卫可以控制路由的访问权限</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111331215.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>在 <code>src/router/index.js</code> 中使用 <code>router.beforeEach(fn)</code> 给路由对象设置全局前置守卫,其中 fn 为全局前置守卫的回调函数</p><blockquote><p>fn回调函数有三个形参 to\from\next:</p><ol><li>to 表示将要访问的路由的信息对象</li><li>from 表示将要离开的路由的信息对象</li><li>next() 函数表示放行的意思</li></ol></blockquote><blockquote><p>我们通过操作 to &#x2F; from 就可以进行路由守卫的工作，下面例子中实现必须登录后才可以进入主页</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js 就是当前项目的路由模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入需要的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Main.vue&#x27;</span></span><br><span class="line"><span class="comment">// 把 VueRouter 安装为 Vue 项目的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">// 创建路由的实例对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Login</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Main</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 为 router 实例对象，声明全局前置导航守卫</span></span><br><span class="line"><span class="comment">// 只要发生了路由的跳转，必然会触发 beforeEach 指定的 function 回调函数</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="comment">// to 表示将要访问的路由的信息对象</span></span><br><span class="line">  <span class="comment">// from 表示将要离开的路由的信息对象</span></span><br><span class="line">  <span class="comment">// next() 函数表示放行的意思</span></span><br><span class="line">  <span class="comment">// 分析：</span></span><br><span class="line">  <span class="comment">// 1. 要拿到用户将要访问的 hash 地址</span></span><br><span class="line">  <span class="comment">// 2. 判断 hash 地址是否等于 /main。</span></span><br><span class="line">  <span class="comment">// 2.1 如果等于 /main，证明需要登录之后，才能访问成功</span></span><br><span class="line">  <span class="comment">// 2.2 如果不等于 /main，则不需要登录，直接放行  next()</span></span><br><span class="line">  <span class="comment">// 3. 如果访问的地址是 /main。则需要读取 localStorage 中的 token 值</span></span><br><span class="line">  <span class="comment">// 3.1 如果有 token，则放行</span></span><br><span class="line">  <span class="comment">// 3.2 如果没有 token，则强制跳转到 /login 登录页</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/main&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 要访问后台主页，需要判断是否有 token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有登录，强制跳转到登录页</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">      <span class="comment">// 没有的登录，强制停留在当前页面</span></span><br><span class="line">      <span class="comment">// next(false)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><hr><h1 id="使用vue-cil创建有路由的项目"><a href="#使用vue-cil创建有路由的项目" class="headerlink" title="使用vue-cil创建有路由的项目"></a>使用vue-cil创建有路由的项目</h1><p>创建的主要步骤和之前大致相同，详细可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/">vue-cil的使用</a></p><p>这里主要说两点和路由相关的不同的地方</p><ol><li>创建时选择路由</li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111639109.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><ol start="2"><li>使用哈希路径的路由</li></ol><p>下面是询问你是否使用 <code>history</code> 形式的路由模式，我们选择 <code>NO</code>，我们用的是hash的（即使用 <code>#</code> 开头的）</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111641180.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><strong>创建完后，会发现项目结构和之前有一点不同 <code>src</code> 目录下除了 <code>components</code> 还多了一个 <code>views</code>文件夹</strong></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204111646180.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p><code>views</code> 文件夹也是放组件的，通过路由切换的组件一般都放在这里</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件推荐</title>
      <link href="/2022/04/10/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2022/04/10/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h2 id="ESLint插件"><a href="#ESLint插件" class="headerlink" title="ESLint插件"></a>ESLint插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101627459.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESLint插件配置</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Prettier-Code-formatter-插件"><a href="#Prettier-Code-formatter-插件" class="headerlink" title="Prettier - Code formatter 插件"></a>Prettier - Code formatter 插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101630476.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prettier配置</span></span><br><span class="line"><span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span><span class="comment">//每行文字数超过此限制会被迫换行</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span><span class="comment">//单引号替换双引号</span></span><br><span class="line"><span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span><span class="comment">//当箭头函数只有一个参数时加上括号</span></span><br></pre></td></tr></table></figure><p>我们也可以直接创建一个 <code>.perttierrc</code>文件，将下面的内容放进去,并在 <code>settings.json</code>中加入<code>&quot;prettier.configPath&quot;: &quot;C:\\Users\\YJR\\.prettierrc&quot;,</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint使用</title>
      <link href="/2022/04/10/Eslint%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/10/Eslint%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是ESLint"><a href="#什么是ESLint" class="headerlink" title="什么是ESLint"></a>什么是ESLint</h1><p><a href="https://eslint.org/">官网传送门</a></p><p><a href="https://eslint.bootcss.com/">中文传送门</a></p><p><strong>ESLint 是用来规范代码风格的，特别是团队开发时，一般都会使用ESLint</strong></p><h2 id="在项目中使用ESLint"><a href="#在项目中使用ESLint" class="headerlink" title="在项目中使用ESLint"></a>在项目中使用ESLint</h2><p>下面通过使用 vue-cil 来创建包含 ESLint 的项目，不清楚 vue-cil 可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/">vue-cil的使用</a></p><ol><li><p>创建新项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure></li><li><p>选择最后的一项进行项目定义</p><p>前面的三个一个是之前创建vue2的时候用的，另外两个是自带的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101510063.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>选择需要的包，记得把css预处理器加上</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101514782.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p> 回车后，选择vue的版本 我还是创建 vue2项目</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021901698.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p> 在选择CSS预处理时，我使用的是 less</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021903613.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/></li><li><p>下面就是选择ESLint规范了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101518296.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们选择倒数第二项，标准规范</p><p>回车后会询问我们是在保存的时候触发 <code>Lint</code> 还是提交时触发</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101522904.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>一般我们就保存时触发代码规划的检查就好了</p></li><li><p>剩下的操作和之前的就一样了</p><p> 选择将配置文件独立开，以及选择是否保存预设，是否保存这个无所为，看需求</p></li></ol><p>在项目根目录下，我们会看到 <code>。eslintrc.js</code> 这个文件，可以用来配置规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>rules</code> 节点下有两个规则 <code>no-console</code> 和 <code>no-debugger</code></p><h2 id="ESLint-报错"><a href="#ESLint-报错" class="headerlink" title="ESLint 报错"></a>ESLint 报错</h2><p>当我们语法格式不规范时，就会触发ESLint的报错</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101554722.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>此时我们可以通过看后边提示的错误信息 比如 ： <code>no-trailing-spaces</code> 和 <code>no-multiple-empty-lines</code> 我们可以去官网的<a href="https://eslint.org/docs/rules/">规则</a>中查找改错误是对应的哪条规则 </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101556218.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>并且根据行号来进行修改</p><h2 id="常见的ESLint规则"><a href="#常见的ESLint规则" class="headerlink" title="常见的ESLint规则"></a>常见的ESLint规则</h2><table><thead><tr><th>规则名称</th><th>规则约束</th></tr></thead><tbody><tr><td>quotes</td><td>强制使用一致的反勾号、双引号或单引号</td></tr><tr><td>key-spacing</td><td>强制在对象字面量的属性中键和值之间使用一致的间距</td></tr><tr><td>comma-dangle</td><td>要求或禁止末尾逗号</td></tr><tr><td>no-multiple-empty-lines</td><td>禁止出现多行空行</td></tr><tr><td>no-trailing-spaces</td><td>禁用行尾空格</td></tr><tr><td>eol-last</td><td>要求或禁止文件末尾存在空行</td></tr><tr><td>spaced-comment</td><td>强制在注释中 &#x2F;&#x2F; 或 &#x2F;* 使用一致的空格</td></tr><tr><td>indent</td><td>强制使用一致的缩进</td></tr><tr><td>space-before-function-paren</td><td>强制在 function的左括号之前使用一致的空格</td></tr><tr><td>space-infix-ops</td><td>要求操作符周围有空格</td></tr><tr><td>import&#x2F;first</td><td>import必须在顶部</td></tr></tbody></table><h2 id="修改ESLint规则"><a href="#修改ESLint规则" class="headerlink" title="修改ESLint规则"></a>修改ESLint规则</h2><p>如果我们不想遵守默认的规则，我们可以在<code>.eslintrc.js</code> 中进行修改</p><p>修改方式我们参考官网的文档进行</p><blockquote><p>比如我不想遵守 <code>space-before-function-paren</code> 这个规则，我们可以在<a href="https://eslint.bootcss.com/docs/rules/">规则文档</a>中找到它并进入详情页面查看如何修改</p></blockquote><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101621833.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>在<code>.eslintrc.js</code> 中按照文档提示进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/standard&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@babel/eslint-parser&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="vscode相关插件和配置"><a href="#vscode相关插件和配置" class="headerlink" title="vscode相关插件和配置"></a>vscode相关插件和配置</h1><h2 id="ESLint插件"><a href="#ESLint插件" class="headerlink" title="ESLint插件"></a>ESLint插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101627459.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ESLint插件配置</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Prettier-Code-formatter-插件"><a href="#Prettier-Code-formatter-插件" class="headerlink" title="Prettier - Code formatter 插件"></a>Prettier - Code formatter 插件</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101630476.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>安装插件后，进入vscode的<code>settings</code> 进行配置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204101628814.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prettier配置</span></span><br><span class="line"><span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span><span class="comment">//每行文字数超过此限制会被迫换行</span></span><br><span class="line"><span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span><span class="comment">//单引号替换双引号</span></span><br><span class="line"><span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span><span class="punctuation">,</span><span class="comment">//当箭头函数只有一个参数时加上括号</span></span><br></pre></td></tr></table></figure><p>我们也可以直接创建一个 <code>.perttierrc</code>文件，将下面的内容放进去,并在 <code>settings.json</code>中加入<code>&quot;prettier.configPath&quot;: &quot;C:\\Users\\YJR\\.prettierrc&quot;,</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态组件 &amp; 插槽 &amp; 自定义指令</title>
      <link href="/2022/04/06/%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6-%E6%8F%92%E6%A7%BD-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/04/06/%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6-%E6%8F%92%E6%A7%BD-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><h2 id="什么是动态组件"><a href="#什么是动态组件" class="headerlink" title="什么是动态组件"></a>什么是动态组件</h2><p>动态组件指的是动态切换组件的显示与隐藏</p><h2 id="动态组件的渲染"><a href="#动态组件的渲染" class="headerlink" title="动态组件的渲染"></a>动态组件的渲染</h2><p>vue 提供了一个内置的 <code>&lt;component&gt;</code> 组件，专门用来实现动态组件的渲染，它就相当于组件的占位符，提供一个 <code>is</code> 属性用来指定该位置实际需要渲染的组件，通过控制 <code>is</code> 属性的值可以实现组件的切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Left&#x27;&quot;</span>&gt;</span>展示 Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;comName = &#x27;Right&#x27;&quot;</span>&gt;</span>展示 Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件和 Right 组件 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1. component 标签是 vue 内置的，作用：组件的占位符 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2. is 属性的值，表示要渲染的组件的名字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// comName 表示要展示的组件的名字</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">comName</span>: <span class="string">&#x27;Left&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Right</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-keep-alive-保持动态组件状态"><a href="#使用-keep-alive-保持动态组件状态" class="headerlink" title="使用 keep-alive 保持动态组件状态"></a>使用 keep-alive 保持动态组件状态</h2><p>在上面使用<code>&lt;component&gt;</code> 标签来切换组件时，默认情况下，被切换的组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组<br>件的状态,在使用时，我们只需要使用<code>&lt;keep-alive&gt;</code>将<code>&lt;component&gt;</code> 组件包裹起来就好了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- keep-alive 会把内部的组件进行缓存，而不是销毁组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span>   </span><br></pre></td></tr></table></figure><h3 id="keep-alive-的生命周期"><a href="#keep-alive-的生命周期" class="headerlink" title="keep-alive 的生命周期"></a>keep-alive 的生命周期</h3><p>当组件被keep-alive包裹时，会多两个生命周期函数 <code>deactivated</code> 和 <code>activated</code></p><blockquote><p>当组件被缓存时，会自动触发组件的 deactivated 生命周期函数。<br>当组件被激活时，会自动触发组件的 activated 生命周期函数。</p></blockquote><p>我们只需要给<strong>被包含的组件</strong>定义这两个函数就可以进行使用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Left 组件被创建了！&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Left 组件被销毁了~~~&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当组件第一次被创建的时候，既会执行 created 生命周期，也会执行 activated 生命周期</span></span><br><span class="line">  <span class="comment">// 当时，当组件被激活的时候，只会触发 activated 生命周期，不再触发 created。因为组件没有被重新创建</span></span><br><span class="line">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被激活了，activated&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件被缓存了，deactivated&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="keep-alive-的include和exclude属性"><a href="#keep-alive-的include和exclude属性" class="headerlink" title="keep-alive 的include和exclude属性"></a>keep-alive 的include和exclude属性</h3><p><code>include</code> 属性用来指定：只有<strong>名称匹配的组件</strong>会被缓存。多个组件名之间使用<code>英文的逗号</code>分隔<br><code>exclude</code> 属性用来指定：<strong>名称匹配的组件</strong>不会被缓存。多个组件名之间使用<code>英文的逗号</code>分隔</p><blockquote><p>不要同时使用 include 和 exclude 这两个属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在使用 keep-alive 的时候，可以通过 include 指定哪些组件需要被缓存； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者，通过 exclude 属性指定哪些组件不需要被缓存；但是：不要同时使用 include 和 exclude 这两个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;MyRight&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的声明和注册名称"><a href="#组件的声明和注册名称" class="headerlink" title="组件的声明和注册名称"></a>组件的声明和注册名称</h3><p>注册名称：就是我们在<strong>使用该组件</strong>时，父组件的 <code>components</code> 节点中写的名称</p><p>声明名称：我们可以在组件声明（即编写封装组件的<code>.vue</code>文件时）通过 <code>name</code> 节点来给组件指定的名称，我们建议每个封装的组件都有自己的<strong>声明的名称</strong></p><p>如果在<strong>声明组件</strong>的时候，没有为组件指定 name 名称，则<strong>组件的名称</strong>默认就是<strong>注册时候的名称</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 在App这个根组件中使用其他组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// comName 表示要展示的组件的名字</span></span><br><span class="line">      <span class="attr">comName</span>: <span class="string">&#x27;Left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// 如果在“声明组件”的时候，没有为组件指定 name 名称，则组件的名称默认就是“注册时候的名称”</span></span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 声明组件时通过name来给组件声明名称</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 当提供了 name 属性之后，组件的名称，就是 name 属性的值</span></span><br><span class="line">  <span class="comment">// 对比：</span></span><br><span class="line">  <span class="comment">// 1. 组件的 “注册名称” 的主要应用场景是：以标签的形式，把注册好的组件，渲染和使用到页面结构之中</span></span><br><span class="line">  <span class="comment">// 2. 组件声明时候的 “name” 名称的主要应用场景：结合 &lt;keep-alive&gt; 标签实现组件缓存功能；以及在调试工具中看到组件的 name 名称</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MyRight&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽（Slot）是 vue 为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。</p><p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><h2 id="插槽快速使用"><a href="#插槽快速使用" class="headerlink" title="插槽快速使用"></a>插槽快速使用</h2><p>在封装组件时，可以通过 <slot> 元素定义插槽，从而为用户预留内容占位符</p><blockquote><p>在声明<code>left.vue</code>组件时，通过 <code>&lt;slot&gt;</code> 来定义插槽</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明一个插槽区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>app.vue</code> 组件中使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;left&gt;</span><br><span class="line">&lt;p&gt;这是在left组件的内容区域生命的p标签&lt;/p&gt;</span><br><span class="line">&lt;/left&gt;</span><br></pre></td></tr></table></figure><h2 id="v-slot-指令"><a href="#v-slot-指令" class="headerlink" title="v-slot 指令"></a>v-slot 指令</h2><p>我们定义插槽时，官方规定每个插槽都要有一个 <code>name</code> 名称,如果省略了 slot 的 <code>name</code> 属性，则有一个默认名称叫做 <code>default</code>,默认情况下，在使用组件的时候，提供的内容都会被填充到名字为 <code>default</code> 的插槽之中，当我们有很多插槽时，我们应该给每个插槽一个不同的 <code>name</code> ，这样有自己名字的插槽叫做 <strong>具名插槽</strong></p><p>在定义插槽时，可以通过在<code>slot</code>标签内部写入信息，指定该插槽的后备内容，当使用了该插槽但没有指定插入内容时，会显示后备内容</p><blockquote><p>比如在声明<code>left.vue</code>组件时，通过 <code>name</code> 来定义插槽名称</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明一个插槽区域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue 官方规定：每一个 slot 插槽，都要有一个 name 名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果省略了 slot 的 name 属性，则有一个默认名称叫做 default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是 default 插槽的后备内容<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们有很多插槽时，我们可以通过v-slot指令来指定需要进行操作的插槽</p><blockquote><p>v-slot: 指令不能直接用在元素身上，必须用在 template 标签上</p><p>v-slot: 指令的简写形式是 # </p></blockquote><p>在<code>app.vue</code> 组件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件和 Right 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 如果要把内容填充到指定名称的插槽中，需要使用 v-slot: 这个指令 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. v-slot: 后面要跟上插槽的名字 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3. v-slot: 指令不能直接用在元素身上，必须用在 template 标签上 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4. template 这个标签，它是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的 html 元素 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 5. v-slot: 指令的简写形式是 # --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是在 Left 组件的内容区域，声明的 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>在封装组件时，为预留的<code>slot</code>提供属性对应的值，这种用法叫做<strong>作用域插槽</strong></p><blockquote><p>在下方实例中，给<code>slot</code>提供了msg这个属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在封装组件时，为预留的 &lt;slot&gt; 提供属性对应的值，这种用法，叫做 “作用域插槽” --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello vue.js&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 首字母要大写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;Article&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userinfo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们使用时，可以通过 <code>=</code> 来接收该属性值和其数据,<code>scope</code>就是个形参变量，想写什么都好，习惯使用 <code>scope</code> </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; scope.msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>同样，也可以使用解构赋值的方法来使用该数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #content=&quot;&#123; msg, user &#125;&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="什么是自定义指令"><a href="#什么是自定义指令" class="headerlink" title="什么是自定义指令"></a>什么是自定义指令</h2><p>vue 官方提供了 v-text、v-for、v-model、v-if 等常用的指令。除此之外 vue 还允许开发者自定义指令。</p><h2 id="自定义指令的分类"><a href="#自定义指令的分类" class="headerlink" title="自定义指令的分类"></a>自定义指令的分类</h2><p>vue 中的自定义指令分为两类，分别是：</p><ol><li><p><strong>私有</strong>自定义指令</p></li><li><p><strong>全局</strong>自定义指令</p></li></ol><h2 id="私有自定义指令"><a href="#私有自定义指令" class="headerlink" title="私有自定义指令"></a>私有自定义指令</h2><p>在每个vue组件之中，可以在 <code>directives</code> 节点下声明私有自定义指令</p><blockquote><p>在下面代码中，自定义一个 <code>v-color</code> 指令来改变标签颜色</p><p>当指令第一次被绑定到元素上的时候，会立即触发 <code>bind</code> 函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="为自定义指令动态绑定参数值"><a href="#为自定义指令动态绑定参数值" class="headerlink" title="为自定义指令动态绑定参数值"></a>为自定义指令动态绑定参数值</h2><p>在 template 结构中使用自定义指令时，可以通过等号（&#x3D;）的方式，为当前指令动态绑定参数值</p><p>并且在声明自定义指令时，可以通过形参中的第二个参数，来接收指令的参数值,习惯性的第二个参数我们叫做 <code>binding</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令的update函数"><a href="#指令的update函数" class="headerlink" title="指令的update函数"></a>指令的update函数</h2><p>bind 函数只调用 1 次：当指令第一次绑定到元素时调用，当 DOM 更新时 <code>bind</code> 函数不会被触发。 <code>update</code> 函数会在每次 DOM 更新时被调用。</p><blockquote><p>下面实现点击按钮后，颜色数据改变，同时页面标签颜色渲染改变,指令的 <code>update</code>函数，当元素变化时，所有使用该指令的组件都会触发update函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color = &#x27;green&#x27;&quot;</span>&gt;</span>改变 color 的颜色值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义名为 color 的指令，指向一个配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当指令第一次被绑定到元素上的时候，会立即触发 bind 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 形参中的 el 表示当前指令所绑定到的那个 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 bind 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在 DOM 更新的时候，会触发 update 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">update</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了 v-color 的 update 函数&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义指令的简写"><a href="#自定义指令的简写" class="headerlink" title="自定义指令的简写"></a>自定义指令的简写</h2><p>我们会发现 <code>bind</code> 和 <code>update</code> 这两个函数，除了函数名不同，其他都相同，写两遍比较麻烦，所以vue提供了自定义指令的简写方式</p><p>如果 <code>bind</code> 和 <code>update</code> 函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color = &#x27;green&#x27;&quot;</span>&gt;</span>改变 color 的颜色值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 私有自定义指令的节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">color</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(binding)</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h2><p>上面在组件的<code>.vue</code> 文件中定义的指令只能在自己的组件中使用，我们可以像定义全局过滤器一样在<code>main.js</code>中定义全局自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局自定义指令</span></span><br><span class="line"><span class="comment">/* Vue.directive(&#x27;color&#x27;, &#123;</span></span><br><span class="line"><span class="comment">  bind(el, binding) &#123;</span></span><br><span class="line"><span class="comment">    el.style.color = binding.value</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  update(el, binding) &#123;</span></span><br><span class="line"><span class="comment">    el.style.color = binding.value</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件的生命周期和数据共享</title>
      <link href="/2022/04/03/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/"/>
      <url>/2022/04/03/%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><h2 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h2><p>生命周期（Life Cycle）是指一个组件从<strong>创建 -&gt; 运行 -&gt; 销毁</strong>的整个阶段，强调的是一个时间段。</p><p>当我们想要在组件的生命周期过程中进行一些操作时，我们就需要使用<code>生命周期函数</code>来进行操作</p><p><code>生命周期函数</code>：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。</p><p>注意：生命周期强调的是时间段，生命周期函数强调的是时间点。</p><h2 id="生命周期函数的分类"><a href="#生命周期函数的分类" class="headerlink" title="生命周期函数的分类"></a>生命周期函数的分类</h2><ol><li><p>创建阶段</p><ol><li>beforeCreate</li><li><strong>created</strong><br> 发起 Ajax 最早的时机，请求数据，还不可以操作DOM元素</li><li>beforeMount</li><li><strong>mounted</strong><br> 组件第一次被渲染到浏览器中<br> 操作 DOM 的最早的时机</li></ol><blockquote><p>创建阶段的生命周期函数只执行一次</p></blockquote></li><li><p>运行阶段</p><ol><li>beforeUpdate</li><li><strong>updated</strong><br> 能够操作到最新的 DOM 元素</li></ol><blockquote><p>运行阶段的生命周期函数可以执行多次</p></blockquote></li><li><p>销毁阶段</p><ol><li>beforeDestroy</li><li>destroyed</li></ol></li></ol><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/vuelifecycle.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><hr><h1 id="组件的数据共享"><a href="#组件的数据共享" class="headerlink" title="组件的数据共享"></a>组件的数据共享</h1><p>在开发中，组件之间的关系一般分为 <code>父子关系</code> 和 <code>兄弟关系</code></p><h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><p>通过在子组件中定义自定义属性，在父组件中绑定数据后将值传给子组件</p><table><tr><th> 父组件</th><th> 子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; userinfo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">:msg</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;hello yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userinfo</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;yjr1100&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Left 组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>msg 的值是：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>user 的值是：&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;user&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><blockquote><p>在这个过程中，对于基本数据类型，就是复制了一份真的值传了过来，但是对于<code>对象类型数据</code>，传的是对数据的引用，如果直接对子组件中的对象数据赋值，那么该对象就指向了新的对象，如果是修改子组件中的对象的属性，那么父组件中对象的属性也会改变。</p><p>当然我们之前就说了，不建议直接修改props中的数据，如果我们需要使用，建议复制一份进行操作</p></blockquote><h2 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h2><p>子组件向父组件传递值，需要使用自定义事件</p><ol><li>在子组件中使用 <code>$emit()</code> 来触发<strong>自定义事件</strong>，<code>$emit()</code>接收两个参数，第一个参数是一个<strong>字符串</strong>代表<strong>事件名称</strong>，第二个参数是要传递的数据</li><li>父组件中给子组件标签绑定其<strong>自定义事件</strong>，并定义事件处理函数（<em>这里可以把子组件的<strong>自定义事件</strong>名称看作类似于 <code>click</code> 这样的，我们也可以像 <code>@click=&quot;btnclick&quot;</code> 一样使用<code>@</code>绑定<strong>自定义事件</strong>，并且定义一个事件处理函数</em>）</li></ol><table><tr><th> 父组件</th><th> 子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App 根组件 --- &#123;&#123; countFromSon &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染  Right 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Right</span> @<span class="attr">numchange</span>=<span class="string">&quot;getNewCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义 countFromSon 来接收子组件传递过来的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">countFromSon</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取子组件传递过来的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getNewCount</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numchange 事件被触发了！&#x27;</span>, val)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">countFromSon</span> = val</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Right</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Right 组件 --- &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 子组件自己的数据，将来希望把 count 值传给父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 让子组件的 count 值自增 +1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 把自增的结果，传给父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;numchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">count</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><h2 id="兄弟组件之间的数据共享"><a href="#兄弟组件之间的数据共享" class="headerlink" title="兄弟组件之间的数据共享"></a>兄弟组件之间的数据共享</h2><p>在vue2.x中兄弟组件之间数据共享的方案是 <code>EventBus</code> </p><p><code>EventBus</code> 是我们自己定义的一个<strong>js模块</strong>，用来向外共享一个<strong>Vue实例对象</strong></p><p><code>EventBus</code> 的使用步骤</p><ol><li><p>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象</p></li><li><p>在数据发送方，调用 bus.$emit(‘事件名称’, 要发送的数据) 方法触发<strong>自定义事件</strong></p></li><li><p>在数据接收方，调用 bus.$on(‘事件名称’, 事件处理函数) 方法注册一个<strong>自定义事件</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventBus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><tr><th> Legt发送子组件</th><th> Right接收子组件 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;send&quot;</span>&gt;</span>把好诗发给 Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 导入 eventBus.js 模块</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">str</span>: <span class="string">`这是Left子组件发给Right子组件的数据`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 通过 eventBus 来发送数据</span></span></span><br><span class="line"><span class="language-javascript">      bus.$emit(<span class="string">&#x27;share&#x27;</span>, <span class="variable language_">this</span>.<span class="property">str</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgFromLeft &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 1. 导入 eventBus.js 模块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msgFromLeft</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 为 bus 绑定自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    bus.$on(<span class="string">&#x27;share&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在 Right 组件中定义的 share 被触发了！&#x27;</span>, val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">msgFromLeft</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="ref-引用"><a href="#ref-引用" class="headerlink" title="ref 引用"></a>ref 引用</h1><p>在vue中，程序员本意是不需要操作DOM，只需要把数据维护好就可以了，在<strong>vue项目</strong>中，不建议安装和使用 <code>jQuery</code> ，假设我们需要在<strong>vue项目</strong>之中操作DOM，我们可以使用ref引用。</p><h2 id="什么是ref引用"><a href="#什么是ref引用" class="headerlink" title="什么是ref引用"></a>什么是ref引用</h2><p>ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。</p><p>每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下，组件的 $refs 指向一个空对象</p><h2 id="ref获取DOM"><a href="#ref获取DOM" class="headerlink" title="ref获取DOM"></a>ref获取DOM</h2><p>我们只需要在标签中添加<code>ref属性</code>，就可以通过 Vue 的 <code>$refs</code> 得到该DOM元素，注意<code>ref</code>的名字不要冲突了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;myh12&quot;</span>&gt;</span>App 根组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showThis&quot;</span>&gt;</span>打印 this,颜色改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* updated() &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    this.$refs.iptRef.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  &#125;, */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showThis</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this 是当前 App 组件的实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myh12</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref获取组件"><a href="#ref获取组件" class="headerlink" title="ref获取组件"></a>ref获取组件</h2><p>同样的，我们只需要在页面对应组件中写入 <code>ref</code> 属性，就可以使用该属性得到组件，并且访问组件内的数据和函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onReset&quot;</span>&gt;</span>重置 Left 组件的 count 值为 0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">ref</span>=<span class="string">&quot;comLeft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，重置 Left 组件的 count 值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onReset</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">comLeft</span>.<span class="title function_">resetCount</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.$refs.comLeft.count = 0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="利用-this-nextTick-cb-和-ref-实现切换"><a href="#利用-this-nextTick-cb-和-ref-实现切换" class="headerlink" title="利用 this.nextTick(cb) 和 ref  实现切换"></a>利用 <code>this.nextTick(cb)</code> 和 <code>ref</code>  实现切换</h2><blockquote><p>下面的案例实现点击按钮，显示文本框，并且文本框自动获取焦点，当文本框失去焦点的时候，显示按钮</p></blockquote><p>组件的 <code>$nextTick(cb)</code> 方法，会把 callback 回调推迟到下一个 DOM 更新周期之后执行。通俗的理解是：等组件的<br>DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;inputVisible&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;showButton&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;iptRef&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">&quot;showInput&quot;</span>&gt;</span>展示输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 渲染 Left 组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Left</span> <span class="attr">ref</span>=<span class="string">&quot;comLeft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 控制输入框和按钮的按需切换；</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 默认值为 false，表示默认展示按钮，隐藏输入框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">inputVisible</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮，展示输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showInput</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 切换布尔值，把文本框展示出来</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">inputVisible</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 让展示出来的文本框，自动获取焦点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   如果直接这样写，是不可以获得该组件的，因为这个函数执行结束前</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   页面并没有渲染，还没有这个组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.$refs.iptRef.focus()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">iptRef</span>.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">showButton</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">inputVisible</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Left</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不使用 <code>updated()</code> 生命周期函数是因为每次数据变化都会调用 <code>updated</code> ,当该元素被隐藏不存在时也会执行，此时就会报错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件入门</title>
      <link href="/2022/04/03/vue%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/03/vue%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><h2 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h2><p>组件化开发指的是：根据封装的思想，把页面上可重用的UI 结构封装为组件，从而方便项目的开发和维护。</p><h2 id="vue-中的组件化开发"><a href="#vue-中的组件化开发" class="headerlink" title="vue 中的组件化开发"></a>vue 中的组件化开发</h2><p>vue 是一个支持组件化开发的前端框架。</p><p>vue 中规定：组件的后缀名是.vue。之前接触到的App.vue 文件本质上就是一个 vue 的组件。</p><h2 id="vue-组件的三个组成部分"><a href="#vue-组件的三个组成部分" class="headerlink" title="vue 组件的三个组成部分"></a>vue 组件的三个组成部分</h2><p>每个.vue 组件都由3 部分构成，分别是：</p><ol><li><code>template</code> -&gt; 组件的模板结构 </li><li><code>script</code>-&gt; 组件的JavaScript 行为</li><li><code>style</code> -&gt; 组件的样式</li></ol><p>其中每个组件中必须包含 <code>template</code> 模板结构，而 <code>script</code> 行为和 <code>style</code> 样式是可选的组成部分。</p><blockquote><p>三个完整部分组成的组件如下</p><p>注意：<code>.vue </code>组件中的 <code>data</code> 不能指向对象，组件中的 <code>data</code> 必须是一个函数，在函数中 <code>return</code> 一个对象用来定义数据</p><p>在组件中 <code>this</code> 指向的是当前组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;d1&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是我定义的test.vue模板结构 --- &#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;change&quot;&gt;点击用户名会变&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 默认导出</span><br><span class="line">export default&#123;</span><br><span class="line">    //data</span><br><span class="line">    // 注意.vue 组件中的data不能指向对象，</span><br><span class="line">    /* data:&#123;</span><br><span class="line">        username:&quot;heiheih&quot;</span><br><span class="line">    &#125; */</span><br><span class="line">    // 组件中的data 必须是一个函数</span><br><span class="line">    data()&#123;</span><br><span class="line">        // return一个对象，用来定义数据</span><br><span class="line">        return &#123;username:&quot;yjr1100&quot;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change()&#123;</span><br><span class="line">            // 在vue 组件中this就表示当前组件的实例对象</span><br><span class="line">            this.username=&quot;yjr-1100&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 当前组件的侦听器</span><br><span class="line">    watch:&#123;&#125;,</span><br><span class="line">    // 当前组件中的计算属性</span><br><span class="line">    computd:&#123;&#125;,</span><br><span class="line">    // 当前组件中的过滤器 注意这个只有vue2中有</span><br><span class="line">    filter:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .d1&#123;</span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 组件必须要有唯一的根源素(即我们组件对外只能有一个div，其他的标签都应该被它包裹)</p></blockquote><h2 id="在组件中使用less"><a href="#在组件中使用less" class="headerlink" title="在组件中使用less"></a>在组件中使用less</h2><p>我们只需要在<code>style</code> 标签上添加 <code>lang</code> 属性,值为 <code>less</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="组件的关系"><a href="#组件的关系" class="headerlink" title="组件的关系"></a>组件的关系</h1><p>当我们封装好几个组件后（一般<code>App.vue</code>放在src根目录中，其他组件放在<code>components</code>文件夹下），组件之间并没有关系，我们只是默认把 <code>App.vue</code> 渲染到了<code>index.html</code> 中，其他组件都没有使用，想要将组件都利用起来，我们必须合理<strong>使用组件</strong>，让他们之间形成嵌套关系，比如：父子关系或兄弟关系</p><h2 id="组件使用的三个步骤"><a href="#组件使用的三个步骤" class="headerlink" title="组件使用的三个步骤"></a>组件使用的三个步骤</h2><ol><li><p>在 <code>App.vue</code> 根组件中使用import语法导入其他组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入需要使用的 .vue 组件</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Left.vue&#x27;</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Test.vue&quot;</span></span><br><span class="line"> <span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Right.vue&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>components</code> 节点中注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">flag</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 2. 注册组件</span></span><br><span class="line">  <span class="comment">// 当建和值相同的时候，可以简写</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span>,</span><br><span class="line">    <span class="title class_">Test</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以标签形式使用组件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Left</span>&gt;</span><span class="tag">&lt;/<span class="name">Left</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Right</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="components节点"><a href="#components节点" class="headerlink" title="components节点"></a>components节点</h2><p>使用<code>components</code>节点注册的是私有组件，比如在 <code>组件A</code> 中注册了 <code>组件F</code>，那么<code>组件F</code>只能在<code>组件A</code>中使用，而在<code>组件B</code>中不能使用</p><h2 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h2><p>当某个节点需要频繁经常被使用的时候，如果我们每次都使用 <code>components</code> 来注册私有组件比较麻烦</p><p>我们通过 <code>vue</code> 项目的 <code>main.js</code> 入口文件中，使用 <code>Vue.component()</code> 方法，注册全局组件，注意不要在组件自己里面使用自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入需要被全局注册的那个组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Count.vue&#x27;</span></span><br><span class="line"><span class="comment">// 第一个参数是字符串组件的名字</span></span><br><span class="line"><span class="comment">// 第二个参数就是组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyCount&#x27;</span>, <span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h1><p><code>props</code> 是组件的自定义属性，在封装通用组件的时候，合理地使用 <code>props</code> 可以极大的提高组件的复用性</p><p>在我们封装的组件中，添加 <code>props</code> 节点，该节点是一个数组&#x2F;对象，可以自定义组件的属性</p><p>props 中的数据，可以直接在模板结构中被使用</p><p><strong>注意</strong>：props 是只读的，不要直接修改 <code>props</code> 的值，否则终端会报错</p><p>使用的时候，我们需要在组件的标签中给自定义属性动态传入值<code>&lt;MyCount init=&quot;9&quot;&gt;&lt;/MyCount&gt;</code>,直接在标签里这样写传给组件的是一个字符串9，所以我们利用 <code>v-bind</code> 绑定属性时写入的是js表达式这一特性，让 9 变为数字9.所以我们这样写 <code>&lt;MyCount :init=&quot;9&quot;&gt;&lt;/MyCount&gt;</code></p><p>当我们需要给自定义属性一个初始值时，<code>props</code> 就需要定义为对象,并在其中定义<code>自定义属性</code>，对于<code>自定义属性</code>我们可以定义它的配置选项， 比如 <code>default</code>，<code>type</code> ， <code>required</code> 等</p><table><tr><th> 数组形式的props</th><th> 对象形式的props </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// props 是&quot;自定义属性&quot;，允许使用者通过自定义属性，为当前组件指定初始值</span></span><br><span class="line">  <span class="comment">// 自定义属性的名字，是封装者自定义的（只要名称合法即可）</span></span><br><span class="line">  <span class="comment">// props 中的数据，可以直接在模板结构中被使用</span></span><br><span class="line">  <span class="comment">// 注意：props 是只读的，不要直接修改 props 的值，否则终端会报错！</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;init&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 把 props 中的 init 值，转存到 count 上</span></span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">init</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义属性A : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="comment">// 自定义属性B : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="comment">// 自定义属性C : &#123; /* 配置选项 */ &#125;,</span></span><br><span class="line">    <span class="attr">init</span>: &#123;</span><br><span class="line">      <span class="comment">// 如果外界使用 Count 组件的时候，没有传递 init 属性，则默认值生效</span></span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="comment">// init 的值类型必须是 Number 数字</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="comment">// 必填项校验，代表使用组件时必须传入该属性</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 把 props 中的 init 值，转存到 count 上</span></span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">init</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></td></tr></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyCount</span> <span class="attr">:init</span>=<span class="string">&quot;9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">MyCount</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件的样式冲突"><a href="#组件的样式冲突" class="headerlink" title="组件的样式冲突"></a>组件的样式冲突</h1><h2 id="使用-scoped-属性"><a href="#使用-scoped-属性" class="headerlink" title="使用 scoped 属性"></a>使用 scoped 属性</h2><p>默认情况下，写在 <code>.vue</code> 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p><p>导致组件之间样式冲突的根本原因是：</p><ol><li><p>单页面应用程序中，所有组件的 DOM 结构，都是基于唯一的 index.html 页面进行呈现的</p></li><li><p>每个组件中的样式，都会影响整个 index.html 页面中的 DOM 元素</p></li></ol><p>解决思路，使用属性选择器给当前组件里的标签都添加同一个自定义属性，每个不同的组件都使用不同的自定义属性，这样就会把样式限制在当前组件中了</p><p>事实上，如果让我们每次写标签的时候手动添加一个自定义属性会非常麻烦，只要我们在<code>.vue</code> 组件中的<code>style</code> 标签上添加一个 <code>scoped</code> 属性，在编译生成时，vue就会自动实现上面的功能,为我们的标签添加一个 <code>data-v-xxxx</code> 这样的自定义属性来避免组件之间的样式冲突</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-x2F-deep-x2F-样式穿透"><a href="#使用-x2F-deep-x2F-样式穿透" class="headerlink" title="使用 &#x2F;deep&#x2F; 样式穿透"></a>使用 &#x2F;deep&#x2F; 样式穿透</h2><p>当我们在父组件中想要修改子组件的样式时，如果我们的父组件添加了 <code>scoped</code> 属性，那么修改的样式并不能在子组件中生效，但如果我们不加 <code>scoped</code> 属性 那么样式又会在全局生效，影响布局，因此我们需要使用 <code>/deep/</code> 来达到 <strong>在父组件中修改子组件样式的目的</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">// <span class="selector-tag">h5</span><span class="selector-attr">[data-v-3c83f0b7]</span></span></span><br><span class="line"><span class="language-css">// <span class="selector-attr">[data-v-3c83f0b7]</span> <span class="selector-tag">h5</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">// 当使用第三方组件库的时候，如果有修改第三方组件默认样式的需求，需要用到 /deep/</span></span><br><span class="line"><span class="language-css">/deep/ <span class="selector-tag">h5</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>/deep/ </code> 的原理是：在选择器前面添加一个属性选择器，代表该属性选择器包裹下的对应选择器使用该样式。当然添加的这个属性选择器，就是我们每个组件的自定义属性 <code>data-v-xxx</code> </p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cil的使用</title>
      <link href="/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/02/vue-cil%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h1><p>单页面应用程序(Single Page Application) 简称 SPA，指一个Web网站中只有唯一的一个HTML页面，所有的功能与交互都在这个唯一的一个页面完成</p><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><p><code>vue-cli</code> 是Vue.js 开发的标准工具。它简化了程序员基于webpack 创建工程化的Vue 项目的过程</p><p><a href="https://cli.vuejs.org/zh/">官网传送</a></p><h2 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h2><p><code>vue-cli</code> 是 <code>npm</code> 上的一个全局包，使用 <code>npm install</code> 命令，即可方便的把它安装到自己的电脑上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>在命令行输入<code>vue -V</code> 如果回显 <code>@vue/cli 版本号</code> 就说明安装成功了</p><p>如果之前安装过低版本的可以通过下面两个命令来卸载重装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g vue-cli</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="vue-cli-的使用"><a href="#vue-cli-的使用" class="headerlink" title="vue-cli 的使用"></a>vue-cli 的使用</h2><ol><li><p>在终端下运行如下的命令，创建指定名称的项目,注意我们项目名称最好是英文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue cerate 项目的名称</span><br></pre></td></tr></table></figure><p>输入后我们会看到控制台有一些提示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021851371.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们可以通过控制方向键来选择创建项目使用的vue版本，其中前两个就是创建vue2 和 vue3 的项目，项目里默认安装 <code>babel</code> 和 <code>eslint</code> ，最后一项就是我们可以自己选择创建的版本和需要安装的包</p><p>我们选择最后一项并且更具自己需要选择要安装的包，选择最后一项后可以看到如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021855310.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>如果项目中使用 <code>less</code> 我们需要选则 <code>CSS Pre-processors</code> css 预处理器,至于 <code>Linter / Formatter</code> 是用来规范代码风格的，如果我们现在安装上可能就不会写代码了，最下面两个 <code>Unit Testing</code> 和 <code>E2E Testing</code> 是进行组件测试单元测试的，目前还不需要，先不勾选</p><p>确认无误按下回车后，就会进入选择vue版本的界面，目前学习 vue2 ，就选择 vue2 就好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021901698.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>对于使用的css预处理器，我们也需要进行一次选择，这里我选择 <code>less</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021903613.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们还需要选择 <code>bable</code> <code>，ESLint</code> <code>，webpack</code> 等插件的配置文件的位置，第一个是指每个单独一个配置文件，下面是指都放在 <code>package.json</code> 中,选择第一个让他们独立开</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021907579.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>最后一个是询问要不要把刚才的配置存为一个预设，如果存的话就输入 <code>y</code> ，我们存一下，防止以后每次都选比较麻烦,这里我们还需要给预设起名字，这个自己知道就好</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021909142.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>上面都做完回车后，就开始下载相关依赖和创建项目了，这个时候我们不要动这个窗口，如果我们用鼠标点了一下，会阻断运行，如果不小心阻断了运行，可以通过 <code>Ctrl+c</code> 来恢复.</p><p>全部创建结束后，会提示我们怎么把项目跑起来如下图</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021915218.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><p>我们看一下项目目录结构是什么样子的</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202204021927132.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><blockquote><p><code>node_modules</code>是一些包，我们不用在意<br>public 中放的就是我们的单页面，里面的<code>favicon.ico</code>浏览器标签栏要显示的小图标<br>除了一些配置文件和包文件，其他值得我们注意的就是 <code>src</code> 目录</p></blockquote></li><li><p>vue 项目中 src 目录的构成：</p><blockquote><p>assets 文件夹：存放项目中用到的静态资源文件，例如：css 样式表、图片资源<br>components 文件夹：程序员封装的、可复用的组件，都要放到 components 目录下<br>main.js 是项目的入口文件。整个项目的运行，要先执行 main.js<br>App.vue 是项目的根组件。</p></blockquote></li></ol><h2 id="vue-项目的执行流程"><a href="#vue-项目的执行流程" class="headerlink" title="vue 项目的执行流程"></a>vue 项目的执行流程</h2><p>在工程化项目中，vue 要做的事情很单纯：通过 <code>main.js</code> 把 <code>App.vue</code> 渲染到 <code>index.html</code> 的指定区域</p><blockquote><p>比如在下面的例子中，我自己写一个vue模板结构渲染到 <code>index.html</code> 中去</p><ol><li>首先创建自己的 <code>Test.vue</code> 文件 ，随便写两行</li><li>在 <code>main.js</code> 中引入自己写的 <code>Test.vue</code> </li><li>在 <code>main.js</code> 的 Vue 构造函数中，把<code>render</code>属性指向我们的文件</li></ol></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >main.js</li>        <li class="yjr_menuItem" >Test.vue</li>    </ul>    <div class="yjr_code">        <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue 包，得到Vue的构造函数</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入 App.vue 根组件，将来把 App.vue 中的模板结构渲染到 HTML页面中</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;./Test.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 创建vue的实例对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// el:&#x27;#app&#x27;,</span></span><br><span class="line">    <span class="comment">// 把render函数指定的组件，渲染到HTML页面中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">Test</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 这里没有使用 `el` 而是用了 &#x27;$mount()&#x27; 方法来指定替换的控件</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;这是我定义的test.vue模板结构&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>        </div>    </div></div>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise 、async、await 的学习</title>
      <link href="/2022/04/02/async%E5%92%8Cawait/"/>
      <url>/2022/04/02/async%E5%92%8Cawait/</url>
      
        <content type="html"><![CDATA[<h1 id="js的同步和异步"><a href="#js的同步和异步" class="headerlink" title="js的同步和异步"></a>js的同步和异步</h1><p>首先我们需要复习一下 js 的同步和异步</p><p>JavaScript是一门单线程的语言，因此，JavaScript在同一个时间只能做一件事，单线程意味着，如果在同个时间有多个任务的话，这些任务就需要进行排队，前一个任务执行完，才会执行下一个任务，为了防止 ajax 这类任务执行等待时间过长，javascrpit 就设计了同步和异步任务</p><blockquote><p>同步任务</p><p>同步任务是指在主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务，当我们打开网站时，网站的渲染过程，比如元素的渲染，其实就是一个同步任务</p></blockquote><blockquote><p>异步任务</p><p>异步任务是指不进入主线程，而进入任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程，当我们打开网站时，像图片的加载，音乐的加载，其实就是一个异步任务</p></blockquote><hr><h1 id="Es6的Promise异步规范"><a href="#Es6的Promise异步规范" class="headerlink" title="Es6的Promise异步规范"></a>Es6的Promise异步规范</h1><p>在 Es6 的 Promise 出来之前，我们一般都是使用回调函数来处理异步任务 ，在Promise规范提出后，异步编程就变的相对简单一些</p><p>Promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</p><p>Promise并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</p><p>Promise包括以下几个规范</p><blockquote><ol><li>一个promise可能有三种状态：等待<code>pending</code> 、已完成<code>fulfilled</code> 、已拒绝<code>rejected</code></li><li>一个promise的状态只可能从 <code>等待</code> 转到 <code>完成</code> 态或者 <code>拒绝</code> 态，不能逆向转换，同时 <code>完成</code> 态和 <code>拒绝</code> 态不能相互转换</li><li>promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致(即链式的then方法调用)</li><li>then方法接受两个参数，(一般我们叫第一个回调参数为<code>res</code>、第二个为 <code>err</code>) ，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由 <code>等待</code> 态转换到 <code>拒绝</code> 态时调用，同时，<code>then</code> 可以接受另一个 <code>promise</code> 传入，也接受一个“类then”的对象或方法，即thenable对象</li></ol></blockquote><p>我们可以通过 <code>if(typeof(Promise)===&quot;function&quot;)</code> 来测试浏览器是否支持<code>promise</code></p><p>通过 <code>new Promise</code> 来进行 <code>Promise</code> 对象的创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 一段耗时的异步操作</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>) <span class="comment">// 数据处理完成</span></span><br><span class="line">    <span class="comment">// reject(&#x27;失败&#x27;) // 数据处理出错</span></span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;,  <span class="comment">// 成功</span></span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125; <span class="comment">// 失败</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Promise.then()</code>的链式调用示例，<code>then</code> 被按照顺序组织起来，一个一个的执行，每个执行完后就会变成 <code>完成</code> 状态并进行下一个</p><p>前面也提到了，then方法其实是接受两个参数，虽然大部分时候我们都比较关注成功时的回调，但第二个参数失败的回调可以帮我们处理一些异常，除此之外，我们还可以使用<code>catch</code>来捕获错误，<code>reject</code> 的东西一定进入 <code>then</code> 的第二个回调,当没有写第二个回调的时候，会进入<code>catch</code>,如果没有<code>then</code>， 也可以直接进入<code>catch</code>。</p><p><code>err处理异常</code>和<code>catch</code>都会返回一个promise实例，并且是resolved状态所以不会影响后续的<code>then</code>的执行,否则将会把后续的<code>then</code>的状态变为<code>rejected</code> 并且不会执行他们所登记的异步函数</p><table><tr><th> then的链式调用 </th><th> 出错的then的链式调用 </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//  参数val = &#x27;hello&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 参数val = &#x27;world&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res+<span class="string">&quot;这是第一个then&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第一个then return 了&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;如果第一个出错，执行这个&quot;</span>)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="comment">// 假装第二个then输出第一个then的值后出错了</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;这是第二个then抛出的错误&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第三个then&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第三个then的第二个回调&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//上一个then第二个回调处理完异常后，不影响这个的执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第四个then执行了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;第四个then的return&quot;</span></span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第四个then的err&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第五个then执行了&quot;</span>)</span><br><span class="line">    <span class="comment">// 假装第五个then出错了</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;这是第五个then抛出的错误&quot;</span>)</span><br><span class="line">  &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err+<span class="string">&quot;这是第五个then的err&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后的catch执行了&quot;</span>+err)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch不影响下一个then的状态&quot;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><blockquote><p><code>async</code> 是作为函数的修饰符放在函数的前面 ， 它的调用会返回一个 <code>promise</code> 对象,并且 <code>Promise</code> 还有 <code>PromiseStatus</code> 和 <code>promiseValue</code>，如果 <code>async</code> 函数本身返回值，当调用该函数成功时内部会调用 <code>Promise.solve()</code> 方法把它转化成一个 <code>promise</code> 对象作为返回，如果  函数内部抛出错误，就会调用 <code>Promise.reject()</code> 返回一个 <code>promise</code> 对象,<code>想要获取到async</code> 函数的执行结果，就要调用promise的 <code>then</code> 或 <code>catch</code> 来给它注册回调函数</p><p>总结一下，<code>async</code> 函数的执行会返回一个 <code>promise</code> 对象，并且把内部的值进行 <code>promise</code> 的封装。如果 <code>promise</code> 对象通过 <code>then</code> 或 <code>catch</code> 方法又注册了回调函数，<code>async</code> 函数执行完以后，注册的回调函数就会放到异步队列中，等待执行</p></blockquote><blockquote><p><code>await</code> 关键字只能放到 <code>async</code> 函数里面，<code>await</code> 是等待的意思,等待直到<code>Promise</code>对象<code>resolve</code>，得到<code>resolve</code>的值作为<code>await</code>表达式的运算结果,我们一般在需要拿到请求数据后再操作的情况下使用。</p></blockquote><p>执行下面的代码我们可以看到每等2秒会输出一个值，6秒后 三个数的和 和 第三个数几乎一起输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 2s 之后返回双倍的值</span><br><span class="line">function doubleAfter2seconds(num) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(2 * num)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125; )</span><br><span class="line">&#125;</span><br><span class="line">async function testResult() &#123;</span><br><span class="line">    let first = await doubleAfter2seconds(30);</span><br><span class="line">    console.log(first);</span><br><span class="line">    let second = await doubleAfter2seconds(50);</span><br><span class="line">    console.log(second);</span><br><span class="line">    let third = await doubleAfter2seconds(30);</span><br><span class="line">    console.log(third);</span><br><span class="line">    console.log(first + second + third);</span><br><span class="line">&#125;</span><br><span class="line">testResult()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Es6 </tag>
            
            <tag> Es7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门学习</title>
      <link href="/2022/04/01/vue%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/01/vue%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Watch侦听器"><a href="#Watch侦听器" class="headerlink" title="Watch侦听器"></a>Watch侦听器</h1><p>watch侦听器允许开发者监视数据的变化，从而对数据的变化做出特定的操作</p><p>所有的侦听器，都应该被定义到 <code>watch</code> 节点下,侦听器本质上是一个函数</p><blockquote><p>一个常用的场景是输入用户名后发送ajax请求判断用户名是否重复，下面的案例在控制台看代码输出</p></blockquote><h2 id="方法格式的侦听器"><a href="#方法格式的侦听器" class="headerlink" title="方法格式的侦听器"></a>方法格式的侦听器</h2><blockquote><p>要监视哪个数据的变化，就把数据名作为方法名</p><p>侦听器接受两个参数，旧的数据值和新的数据值，其中新的数据值是第一个参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 侦听器本质上是一个函数，要监视哪个数据的变化，就把数据名作为方法名即可</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 新值在前，旧值在后</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">username</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (newVal === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 调用 jQuery 中的 Ajax 发起请求，判断 newVal 是否被占用！！！</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">get</span>(<span class="string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法格式的侦听器无法在刚进入页面的时候就自动触发，并且当data是对象格式的数据时，监听数据对象本身无法监听到对象属性的变化</strong></p><h2 id="对象格式的侦听器"><a href="#对象格式的侦听器" class="headerlink" title="对象格式的侦听器"></a>对象格式的侦听器</h2><h3 id="进入页面就触发"><a href="#进入页面就触发" class="headerlink" title="进入页面就触发"></a>进入页面就触发</h3><blockquote><p><code>handler</code> 作为对象格式侦听器的处理函数,同样接受两个参数</p><p>通过控制对象的 <code>immediate</code> 属性来控制侦听器是否自动触发一次</p><p>immediate 属性的默认值是 false</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义对象格式的侦听器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 侦听器的处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// immediate 选项的默认值是 false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// immediate 的作用是：控制侦听器是否自动触发一次！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">immediate</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="深度侦听器对象格式的数据"><a href="#深度侦听器对象格式的数据" class="headerlink" title="深度侦听器对象格式的数据"></a>深度侦听器对象格式的数据</h3><blockquote><p>当我们的数据 <code>data</code> 是一个对象的时候，我们需要监听的是对象的属性变化，通过对象格式监听器的 <code>deep</code> 属性来控制对 <code>对象形式数据</code> 属性的深度监听</p><p>只要<code>数据对象</code>中任何一个属性变化了，就会触发对<code>对象的侦听器</code></p><p>这样的写法每次需要操作还需要在方法内部使用 <code>.</code> 来访问对象属性</p><p>如果我们想直接侦听对象中的属性，我们可以直接写一个表达式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.address.city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用户的信息对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的侦听器，都应该被定义到 watch 节点下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal.<span class="property">address</span>.<span class="property">city</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(newVal.username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 开启深度监听，只要对象中任何一个属性变化了，都会触发“对象的侦听器”</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果要侦听的是对象的子属性的变化，则必须包裹一层单引号</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 函数格式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#x27;info.username&#x27;(newVal) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(newVal)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对象格式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;info.username&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性就是指通过一些系列计算后，最终得到一个<code>属性值</code>,这个动态计算出来的属性值可以被模板结构或 <code>methodes</code> 方法使用</p><blockquote><p>比如实现修改rgb的值让盒子的背景色达到自动变色的效果</p><p>当不使用计算属性时，我们对于<code>backgroundcolor</code>属性需要每次动态计算我们对 <code>style</code> 绑定的就是一个{ }样式对象，每次使用模板字符串动态计算其值，把计算结果给 <code>style</code> 属性，<strong>注意在vue中 v-bind 还有插值语法中可以写js表达式</strong></p></blockquote><table><tr><th> 没使用计算属性的代码 </th><th> 使用计算属性的代码 </th></tr><tr><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>R：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;r&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>G：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;g&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>B：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 专门用户呈现颜色的 div 盒子 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在属性身上，: 代表  v-bind: 属性绑定 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- :style 代表动态绑定一个样式对象，它的值是一个 &#123;  &#125; 样式对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)` &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)` &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 红色 绿色 蓝色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">g</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 点击按钮，在终端显示最新的颜色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>R：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;r&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>G：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;g&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>B：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- :style 代表动态绑定一个样式对象，它的值是一个 &#123;  &#125; 样式对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当前的样式对象中，只包含 backgroundColor 背景颜色 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: rgb &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; rgb &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 红色 绿色 蓝色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">r</span>: <span class="number">0</span>, <span class="attr">g</span>: <span class="number">0</span>, <span class="attr">b</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 点击按钮，在终端显示最新的颜色</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rgb</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的计算属性，都要定义到 computed 节点之下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 计算属性在定义的时候，要定义成“方法格式”</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// rgb 作为一个计算属性，被定义成了方法格式，</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 最终，在这个方法中，要返回一个生成好的 rgb(x,x,x) 的字符串</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">rgb</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>, <span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在控制台看打印出来的vue对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></td></tr></table><blockquote><p>特点：</p><ol><li>定义的时候，要被定义为“方法”</li><li>在使用计算属性的时候，当普通的属性使用即可,就类似于该vue对象多了一个叫 <code>rgb</code> 的数据</li></ol><p>好处：</p><ol><li>实现了代码的复用</li><li>只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值</li></ol></blockquote><hr><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>axios 是一个专注于网络请求的库！</p></blockquote><p><a href="https://www.npmjs.com/package/axios">axios传送门</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般我们在vue中使用 <code>axios</code> 时都会使用下面的命令来安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure><p>并且使用前通过 <code>import axios from &#39;axios&#39;</code> 来导入</p><h2 id="axios的GET请求"><a href="#axios的GET请求" class="headerlink" title="axios的GET请求"></a>axios的GET请求</h2><blockquote><p>直接使用 axios 发送 Get 请求 在控制台查看输出</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// http://www.liulongbin.top:3006/api/getbooks</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 调用 axios 方法得到的返回值是 Promise 对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 请求的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// GET 请求参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">id</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios的POST请求"><a href="#axios的POST请求" class="headerlink" title="axios的POST请求"></a>axios的POST请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPost&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="axios-配合-async-和-await-使用"><a href="#axios-配合-async-和-await-使用" class="headerlink" title="axios 配合 async 和 await 使用"></a>axios 配合 async 和 await 使用</h2><p>对于<strong>Es7</strong>的 <code>async</code> 和 <code>await</code> 可以看 <a href="https://yjr1100blog.jerryfirst.top/2022/04/02/async%E5%92%8Cawait/">Promise 、async、await 的学习</a></p><p>在下面的例子中，通过 <code>async/await</code> 和 解构赋值 来使 <code>axios</code> 的操作更加方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnPost&quot;</span>&gt;</span>发起POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnGet&quot;</span>&gt;</span>发起GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果调用某个方法的返回值是 Promise 实例，则前面可以添加 await</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// await 只能用在被 async “修饰”的方法中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnGet&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解构赋值的时候，使用 : 进行重命名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 调用 axios 之后，使用 async/await 进行简化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 使用解构赋值，从 axios 封装的大对象中，把 data 属性解构出来</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 把解构出来的 data 属性，使用 冒号 进行重命名，一般都重命名为 &#123; data: res &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们还可以直接通过 <code>axios.get()</code> 和 <code>axios.post()</code> 来进行 get 和 post 请求的发送</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="axios挂载在vue原型下"><a href="#axios挂载在vue原型下" class="headerlink" title="axios挂载在vue原型下"></a>axios挂载在vue原型下</h2><p>不论是通过<code>import axios from &#39;axios&#39;</code> 还是通过 <code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code> 每个组件都需要单独引入并且使用，这样太麻烦了</p><p>我们可以在 <code>main.js</code> 中导入 axios 并且挂载在vue原型中，并且在挂载前设置请求根路径，这样我们就使用或修改服务器地址后进行维护都比较方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span>=<span class="string">&#x27;请求根路径&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br></pre></td></tr></table></figure><p>在这之后我们在每个组件中使用时，只需要通过 <code>this.$http</code> 就可以使用了,这里 <code>$http</code> 是一个习惯，也可以写成别的名字</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20文件桌面启动</title>
      <link href="/2022/04/01/Ubuntu20%E6%96%87%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/04/01/Ubuntu20%E6%96%87%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打开终端（ctrl+alt+t）键入 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/.local/share/applications</span><br></pre></td></tr></table></figure><blockquote><p>usr 是我们自己的用户名</p></blockquote></li><li><p>新建<code>.desktop</code>文件, sudo gedit XXX.desktop,启动文件一般包含下面几项</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=           #程序名字</span><br><span class="line">Comment=           #程序注释</span><br><span class="line">Exec=               #可执行文件的路径</span><br><span class="line">Terminal=           #是否打开终端</span><br><span class="line">Type=               #应用类型，常用有Application等</span><br><span class="line">Icon=                   #图标，支持png 格式图片</span><br><span class="line">Categories=               #分类</span><br><span class="line">Path=                          # 设置当前工作目录</span><br><span class="line">X-GNOME-Autostart-enabled=true # 设置开机自启动</span><br></pre></td></tr></table></figure><blockquote><p>默认当前工作目录是&#x2F;home&#x2F;用户名</p></blockquote></li><li><p>给文件权限 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x xxx.desktop</span><br></pre></td></tr></table></figure></li><li><p>将新建.desktop文件复制到桌面文件夹， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> xxx.desktop ~/Desktop/</span><br></pre></td></tr></table></figure></li><li><p>将新建.desktop文件复制到开机自启动， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> xxx.desktop /home/用户名/.config/autostart</span><br></pre></td></tr></table></figure></li><li><p>桌面找到启动快捷方式，右键允许启动。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu20 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2过滤器的学习</title>
      <link href="/2022/03/31/Vue2%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/31/Vue2%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>过滤器（Filters） 是vue为开发者提供的功能，用于文本的格式化，过滤器可以在 <code>插值表达式</code> 和 <code>v-bind</code> 属性绑定使用</p><p>过滤器应该被卸载 JavaScript 表达式的尾部，由<code>|</code> 符号来调用</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>message 的值是：&#123;&#123; message | capi &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>message 的值是：&#123;&#123; message | capi &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用 Vue.filter() 定义全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capi&#x27;</span>, <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> first = str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> other = str.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> first + other + <span class="string">&#x27;~~~&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;hello vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 过滤器函数，必须被定义到 filters 节点之下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 过滤器本质上是函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 注意：过滤器函数形参中的 val，永远都是“管道符”前面的那个值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">capi</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串有 charAt 方法，这个方法接收索引值，表示从字符串中把索引对应的字符，获取出来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// val.charAt(0)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> first = val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 字符串的 slice 方法，可以截取字符串，从指定索引往后截取</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> other = val.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 强调：过滤器中，一定要有一个返回值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> first + other</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;heima&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <p>message 的值是：Hello vue.js</p>        <p>message 的值是：Heima~~~</p>    </div></div><p><strong>过滤器的注意点</strong></p><blockquote><ol><li>要定义到 <code>filters</code> 节点下，<strong>本质是一个函数</strong></li><li>在过滤器函数中，<strong>一定要有 return 值</strong></li><li>在过滤器的形参中，可以获取到“管道符”前面待处理的那个值</li><li>如果全局过滤器和私有过滤器名字一致，此时按照“<strong>就近原则</strong>”，调用的是”私有过滤器“</li></ol></blockquote><h2 id="品牌列表案例优化"><a href="#品牌列表案例优化" class="headerlink" title="品牌列表案例优化"></a>品牌列表案例优化</h2><p>我们可以写一个过滤器把《品牌列表案例》中的时间进行格式化</p><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.time | dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明格式化时间的全局过滤器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;dateFormat&#x27;</span>, <span class="keyword">function</span> (<span class="params">time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 对 time 进行格式化处理，得到 YYYY-MM-DD HH:mm:ss</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 把 格式化的结果，return 出去</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接调用 dayjs() 得到的是当前时间</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// dayjs(给定的日期时间) 得到指定的日期</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> dtStr = <span class="title function_">dayjs</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> dtStr</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203312039448.png"  style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/>        </div>    </div></div><h2 id="过滤器的一些其他事项"><a href="#过滤器的一些其他事项" class="headerlink" title="过滤器的一些其他事项"></a>过滤器的一些其他事项</h2><h3 id="连续调用过滤器"><a href="#连续调用过滤器" class="headerlink" title="连续调用过滤器"></a>连续调用过滤器</h3><p>过滤器可以串联起来进行调用，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把 message 的值交给 filterA 处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把 filterA处理后的值交给 filterB 处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把 filterB处理后的值渲染在页面中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; message | filterA | filterB &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器调用传参"><a href="#过滤器调用传参" class="headerlink" title="过滤器调用传参"></a>过滤器调用传参</h3><p>过滤器本质是一个Javascript的函数，因此可以接受参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- arg1和arg2 是传递给 filterA的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message | filterA(arg1,arg2) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//过滤器处理函数的形参列表中：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一个参数：永远都是 &quot;|&quot; 前面待处理的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 从第二个参数开始，才是通过管道过滤器传递过来的 arg1 和 arg2 参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="function">(<span class="params">msg,arg1,arg2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//代码处理</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基本用法</title>
      <link href="/2022/03/30/vue%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2022/03/30/vue%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Chrome-vue-调试工具"><a href="#安装-Chrome-vue-调试工具" class="headerlink" title="安装 Chrome vue 调试工具"></a>安装 Chrome vue 调试工具</h1><p>打开谷歌应用商店搜索 <code>Vue.js devtools</code> 并添加至 Chrome</p><p>在谷歌浏览器扩展程序页面找到刚才添加的扩展程序，点击详情</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302022419.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>在下面找到 <code>允许访问文件网址</code> 打开这个设置</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302024071.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>在渲染vue页面的时候，打开控制台，可以看到vue选项，就可以开始使用 <code>Vue.js devtools</code> 了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203302141121.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><hr><h1 id="什么是Vue？"><a href="#什么是Vue？" class="headerlink" title="什么是Vue？"></a>什么是Vue？</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vue是构建用户界面的框架</p><p>学习vue，就是在学习vue框架中规定的用法，框架是一套现成的解决方案，程序员只能遵守框架的规范去编写自己的功能。我们需要学习vue的指令，组件，路由，Vuex，vue组件库等</p><h2 id="Vue特性"><a href="#Vue特性" class="headerlink" title="Vue特性"></a>Vue特性</h2><ol><li><p>数据驱动视图</p><p>vue会监听数据的变化，从而自动重新渲染页面的结构</p><p>数据驱动视图是单向的数据绑定</p></li><li><p>双向数据绑定</p><p>js数据的变换会被自动渲染到页面</p><p>页面表单变化后不需要手动操作DOM，就可以获取表单的值</p></li><li><p>MVVM</p><p>Model：表示当前页面渲染所依赖的数据源</p><p>View：表示当前页面所渲染的DOM结构</p><p>ViewModel：表示vue的实例，他是MVVM的核心</p><p>data中的所有属性，最后都出现在了vm上</p><p>vm上所有属性，以及Vue原型上的所有属性在Vue模板中都可以直接使用。</p></li></ol><hr><h1 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>我们可以去vue官网下载vue.js 文件，并在 <code>script</code> 标签中导入使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        1.想让vue工作，就必须创建一个vue实例，传入一个配置对象</span></span><br><span class="line"><span class="comment">        2.root 容器里的代码依然符合html规范，只不过混入了一些特殊的vue语法</span></span><br><span class="line"><span class="comment">        3.root容器里的代码称为 【vue 模板】</span></span><br><span class="line"><span class="comment">        4.vue实例和容器是一一对应的</span></span><br><span class="line"><span class="comment">        5.真实开发中只有一个vue实例，并且会配合组件一起使用</span></span><br><span class="line"><span class="comment">        6.&#123;&#123;xxx&#125;&#125; 中的xxxx 要写js表达式且xxx可以自动读取到data中的所有属性</span></span><br><span class="line"><span class="comment">        7.一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1+2的结果是&#123;&#123;1+2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125; 反转后是：&#123;&#123;name.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  导入vue的库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止Vue的生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例，传入配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//el 用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data中存储数据，数据供el所指定的容器去使用，值可以是对象也可以是函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;张三是我呀&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><p>指令是vue为开发者提供的<strong>模板语法</strong>，用于辅助开发者渲染页面的基本结构u</p><h3 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h3><p>常见的内容渲染指令有</p><blockquote><p><code>v-text</code>：指令会覆盖元素内部的原有内容</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ptext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 使用v-text, 属性值为要渲染的数据的键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text会把原来的内容覆盖掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ptext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;.ptext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p v-text="username">yjr1100</p>            <p v-text="gender">你猜</p>        </div>    </div></div><blockquote><p><code>&#123;&#123;&#125;&#125;</code> 插值表达式：只是内容的占位符，不会覆盖原有内容 </p><p>只能用在内容节点，不可以用在属性节点，在插值表达式中还可以进行javascript的操作，如调用函数，加减运算，字符串拼接等</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chazhitext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 插值语法： Mustache</span></span><br><span class="line"><span class="comment">    功能：用于解析标签体内容</span></span><br><span class="line"><span class="comment">    写法：&#123;&#123;xxxx&#125;&#125; xxxx是js表达式，可以直接读取到data中的所有属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> chazhitext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#chazhitext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;yjr1100&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;你猜&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p>姓名：yjr1100</p>            <p>性别：你猜</p>        </div>    </div></div><blockquote><p><code>v-html</code>：把带有标签的字符串，渲染为html标签</p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;htmltext&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    使用v-html 可以将标签渲染成html标签，上面两个只能渲染成文本内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> htmltext = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#htmltext&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">info</span>:<span class="string">&#x27;&lt;h4 style=&quot;color:red;font-weight:bold;&quot;&gt;我是yjr1100&lt;/h4&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">&lt;/scrip&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <div class="ptext">            <p style="color:red;font-weight:bold;">我是yjr1100</p>        </div>    </div></div><h3 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h3><blockquote><p>功能：用于解析标签(包括：标签属性，标签体内容，绑定事件。。。)</p><p>例子：<code>v-bind:placeholder=&quot;xxx&quot;</code> 或简写 <code>:placeholder=&quot;xxx&quot;</code>,xxx同样js表达式， 可以读取到data中的数据</p><p>备注：Vue中有很多的指令，且形式都是v-？？？，此处拿<code>v-bind</code>举例子</p><p>如果绑定的内容需要动态拼接，则字符串外面需要用单引号包裹，比如：<br><code>&lt;div :title=&quot;&#39;box&#39;+index&quot;&gt;我的title动态计算出是 box3&lt;/div&gt;</code></p></blockquote><div class="yjr_wrap">    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    功能：用于解析标签(包括：标签属性，标签体内容，绑定事件。。。)</span></span><br><span class="line"><span class="comment">    例子：v-bind:placeholder=&quot;xxx&quot; 或简写 :placeholder=&quot;xxx&quot;,xxx同样js表达式， 可以读取到data中的数据</span></span><br><span class="line"><span class="comment">    备注：Vue中有很多的指令，且形式都是v-？？？，此处我们只是拿v-bind举例子</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;tips&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;poto&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:80px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;&#x27;box&#x27;+index&quot;</span>&gt;</span>我的title动态计算出是 box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">index</span>:<span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tips</span>:<span class="string">&quot;请输入用户名&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">poto</span>:<span class="string">&quot;https://cn.vuejs.org/images/logo.svg&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true">        <input type="text" placeholder="请输入用户名">        <img src="https://cn.vuejs.org/images/logo.svg" alt="" style="width:80px">        <div title="box3">我的title动态计算出是 box3</div>    </div></div><h3 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h3><blockquote><p>v-on 事件绑定</p><p>辅助DOM元素的绑定事件监听</p><p>v-on:click &#x3D; “xxxx” xxxx是事件处理函数的名字 ,可以<code>v-on:</code>简写为 <code>@</code></p><p>下面实现给按钮绑定一个事件，点击后 count+1</p><p>在绑定事件后，可以在小括号中进行传参</p></blockquote><div class="yjr_wrap" >    <ul class="yjr_menu yjr_clearfix">        <li class="yjr_itemSelected yjr_menuItem" >代码</li>        <li class="yjr_menuItem" >效果</li>    </ul>    <div class="yjr_code">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件绑定 </span></span><br><span class="line"><span class="comment">    v-on 事件绑定</span></span><br><span class="line"><span class="comment">    辅助DOM元素的绑定事件监听</span></span><br><span class="line"><span class="comment">    v-on:click = &quot;xxxx&quot; xxxx是事件处理函数的名字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值是：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;add(2)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#fff&quot;</span>&gt;</span>+2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;sub&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#fff&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> +=a;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sub</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> -=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div>    <div class="yjr_effect" hidden="true" >        <p id="resultp">count的值是：1</p>        <button id="addbtn" style="background-color:#fff">+2</button>        <button id="subbtn" style="background-color:#fff">-1</button>    </div></div><script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script><script>    var count = 1;    let resultp = document.querySelector;    $("#addbtn").click(function(){        count = count +2;        $('#resultp').text("count的值是："+count);    })    $("#subbtn").click(function(){        count = count -1;        $('#resultp').text("count的值是："+count);    })</script><p><strong>事件绑定对象</strong></p><blockquote><p>在我们没有给绑定函数传参时，默认有一个事件对象e,如果事件传参了，那么事件对象e就会被覆盖</p><p>想要再次获取到事件对象e，vue 提供了内置变量，名字叫做<code>$event</code>，就是原生对象</p><p>我们如果传参后还想拿到事件对象，那么我们需要把 <code>$event</code> 传入函数中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件对象$event</span></span><br><span class="line"><span class="comment">    vue 提供了内置变量，名字叫做$event，就是原生对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>count的值是：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">&quot;add(1,$event)&quot;</span>&gt;</span>+N<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params">n,e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span> +=n;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 判断count是奇数还是偶数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">count</span>%<span class="number">2</span>===<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27; &#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>事件修饰符</strong></p><blockquote><p>当我们点击a链接的时候，默认会发生网页的跳转</p><p>如果我们想要阻止默认行为，除了使用 <code>event.stopPropagation()</code> 和 <code>event.preventDefault()</code> 我们就可以使用 <code>vue</code> 的事件修饰符，把修饰符通过 <code>.</code> 夹在绑定事件的后面，方便对事件出发的控制</p><p>常用事件修饰符：<br>  <code>.prevent</code> 阻止默认行为<br>  <code>.stop</code> 阻止事件冒泡<br>  <code>.capture</code> 以捕获模式触发当前的事件处理函数<br>  <code>.once</code> 绑定的事件只触发1次<br>  <code>.self</code> 只有当 event.target 是当前元素自身时出发事件处理函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;show&quot;</span>&gt;</span>跳转到百度首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">show</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;点击了a连接&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h3><blockquote><p>vue 中有2种数据绑定的方式：</p><ol><li><p>单向绑定（<code>v-bind</code>）：数据只能从data流向页面。</p></li><li><p>双向绑定（<code>v-model</code>）：数据不仅能从data流向页面，还可以从页面流向data<br> <code>v-model</code> 只能用于表单类元素的数据双向绑定，<code>v-model</code> 默认收集的就是value值。可以简写</p></li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 双向数据绑定</span></span><br><span class="line"><span class="comment">        vue 中有2种数据绑定的方式：</span></span><br><span class="line"><span class="comment">            1.单向绑定（v-bind）：数据只能从data流向页面。</span></span><br><span class="line"><span class="comment">            2.双向绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data</span></span><br><span class="line"><span class="comment">                v-model 只能用于表单类元素的数据双向绑定，v-model 默认收集的就是value值。可以直接简写为v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    单向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span> = <span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    双向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>= <span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>长沙<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-model</code> 有一些特定的修饰符，来方便对用户输入的内容进行处理</p><p><code>.number</code> 将用户输入的值转为数值类型</p><p><code>.trim</code> 将用户输入的首位空白字符过滤掉</p><p><code>.lazy</code> 在“change”时而不是“input”的时候进行数据更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>+<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n2&quot;</span>&gt;</span> = <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;n1+n2&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy.trim</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>控制台显示用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n1</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n2</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`用户名是：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h3><p>条件渲染用来帮助开发者按照控制需求来控制DOM元素的隐藏和显示</p><blockquote><p><code>v-if</code> :每次会动态的移除和添加元素</p><p><code>v-show</code> :通过display属性来控制元素隐藏和显示</p><p>如果要频繁的显示和隐藏，<code>v-show</code> 的性能好一些，如果刚进入页面某些元素不需要展示并且后期也可能不需要展示使用 <code>v-if</code> </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果flag为true就显示为false就隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>v-if的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果flag为false就显示为true就隐藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;!flag&quot;</span>&gt;</span>v-show的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果flag为true就显示为false就隐藏</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>和 <code>v-if</code> 配套使用的还有 <code>v-else-if</code> 和 <code>v-else</code></p></blockquote><h3 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h3><p>对于数字和对象这样的数据,需要创建重复的页面结构，我们一般使用列表渲染指令来减少代码的书写</p><blockquote><p>列表数据需要在什么标签进行渲染，就把 <code>v-for</code> 写在哪个标签上</p><p>官方建议，只要使用到了<code>v-for</code>命令，那么一定绑定一个 <code>:key</code> 属性</p><p>而且尽量把 <code>id</code> 作为 <code>key</code> 的值,使用 <code>index</code> 的值当作 <code>key</code> 没有意义</p><p>官方对 <code>key</code> 的值的类型要求只能是：字符串或者数字</p><p><code>key</code> 的值必须是唯一的，不可重复</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>索引<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.phone&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&quot;yjr1100&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;1234566&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&quot;yjrfirst&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;178984566&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&quot;yjrblog&quot;</span>, <span class="attr">phone</span>:<span class="string">&quot;1756789566&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><blockquote><p>按键修饰符在触发特定的按键时使用,下面使用<code>esc</code>，<code>enter</code>，<code>a</code> 的按键修饰符进行演示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clearinput&quot;</span> @<span class="attr">keyup.enter</span> = <span class="string">&quot;commitAjax&quot;</span> @<span class="attr">keyup.a</span>=<span class="string">&quot;aisin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods的作用就是定义事件处理函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clearinput</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">commitAjax</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了ajax方法&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aisin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aisin&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一个小案例"><a href="#一个小案例" class="headerlink" title="一个小案例"></a>一个小案例</h1><p>案例来自黑马程序员《品牌列表案例》</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203311944675.gif" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px auto"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>品牌列表案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    user-select: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -ms-flexbox;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-clip</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.125</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">0.25rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card-body</span> &#123;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">min-height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">1.25rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.card-header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0.75rem</span> <span class="number">1.25rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.125</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mb-2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">0.5rem</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.form-row</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -ms-flexbox;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      -ms-<span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.col-auto</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 卡片区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">        添加品牌</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加品牌的表单区域 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- form 表单元素有 submit 事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-row align-items-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入品牌名称&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-auto&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary mb-2&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-control custom-switch&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 使用 v-model 实现双向数据绑定 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-input&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.status&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 使用 v-if 结合 v-else 实现按需渲染 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.status&quot;</span>&gt;</span>已启用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;custom-control-label&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;&#x27;cb&#x27; + item.id&quot;</span> <span class="attr">v-else</span>&gt;</span>已禁用<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-2.6.12.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用户输入的品牌名称</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">brand</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// nextId 是下一个，可用的 id</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">nextId</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 品牌的列表数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;宝马&#x27;</span>, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;奥迪&#x27;</span>, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击链接，删除对应的品牌信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">remove</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止表单的默认提交行为之后，触发 add 方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果判断到 brand 的值为空字符串，则 return 出去</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">brand</span> === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;必须填写品牌名称！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果没有被 return 出去，应该执行添加的逻辑</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1. 先把要添加的品牌对象，整理出来</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">nextId</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">brand</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">status</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2. 往 this.list 数组中 push 步骤 1 中得到的对象</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(obj)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 3. 清空 this.brand；让 this.nextId 自增 +1</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">nextId</span>++</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客折腾记录</title>
      <link href="/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/29/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><hr><p>在一开始我是在CSDN上写博客，记录一些学习过程，由于每次写完 markdown 再发布的过程比较麻烦，又不想花大价钱租服务器，所以暂时想到了是使用 github page 来做个人博客，进行学习过程的记录</p><h1 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h1><hr><h2 id="有一个github账号"><a href="#有一个github账号" class="headerlink" title="有一个github账号"></a>有一个github账号</h2><p>这方面的相关博客和教程比较多，这里就不再过多赘述了，其实一步一步来就可以</p><p>放一个官网链接 <a href="https://github.com/">github传送门</a></p><h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290838195.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px; margin:15px 0"/><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290839586.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>上面两种方式都可以进入仓库创建界面，进入后显示如下</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290846639.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>这里需要注意，仓库的名字必须是 XXX.github.io , 其中XXX 要和你前面的用户名相同，仓库的discription 自己想写什么就写什么，就的对仓库的一个描述，最后点击 Create repository 就可以了</p><hr><h2 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h2><div style="display:flex;"><img style="margin:0 5px 0 25px;" alt="os " src="https://img.shields.io/badge/System-windows10-orange"/><img style="margin-right:5px;" alt="node version" src="https://img.shields.io/badge/node-v14.18.1-green"/><img style="margin-right:5px;" alt="npm version" src="https://img.shields.io/badge/npm-v6.14.15-green"/><img style="margin-right:5px;" alt="hexo version" src="https://img.shields.io/badge/hexo-v6.1.0-blue"/></div><h3 id="安装git工具"><a href="#安装git工具" class="headerlink" title="安装git工具"></a>安装git工具</h3><p><a href="https://git-scm.com/"><img src="https://git-scm.com/images/logo@2x.png" alt="git官网"></a></p><p>点击上方 logol 传送去git官网，选择和系统相符的git版本进行下载安装，安装过程中想改安装位置的可以改一下，其他的一直下一步就好了</p><p>如果</p><p>安装好后，我们右键可以看到 git bash 和 git gui 就已经安装好了</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290944249.png" style="box-shadow: 5px 5px 10px #9da0de;margin:15px auto;"/><p>对于git的使用和安装可以看 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师的官网</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>这里我推荐使用 nvm 来管理 node 的版本,因为在我做项目过程中，可能需要维护别人的老项目，所以node版本经常不匹配，使用 nvm 进行node 版本的管理，可用方便的切换不同版本的 node 。</p><p>windows的话，可以在<a href="https://github.com/coreybutler/nvm-windows/releases">github上下载nvm</a> 打开我们可以看到两个版本</p><ul><li><p>nvm-noinstall.zip：绿色免安装版，但使用时需进行配置</p></li><li><p>nvm-setup.zip：安装版，推荐使用</p></li></ul><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203290935478.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px 0;"/><p>nvm的具体安装和使用<a href="https://www.jianshu.com/p/96f9317db0b5">简书Do_Du</a>有详细的步骤，可以进行参考</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><a href="https://hexo.io/zh-cn/"><img src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg#small" style="heigth:100px;width:100px;margin:15px auto;"/></a></p><p>点击上方 logo 可以去官网了解更多Hexo的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>复制上面这句代码，在一个没有中文的路径下新建一个文件夹做为博客的目录</p><p>进入文件夹中，右键 git bash here,并粘贴代码回车运行</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291502604.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到updated 1 package 就安装好了</p><hr><h2 id="初始化和本地博客的搭建"><a href="#初始化和本地博客的搭建" class="headerlink" title="初始化和本地博客的搭建"></a>初始化和本地博客的搭建</h2><h3 id="初始化本地博客"><a href="#初始化本地博客" class="headerlink" title="初始化本地博客"></a>初始化本地博客</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>在刚才初始化的窗口分别键入上面两句代码，对本地博客进行初始化</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291512237.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>当看到图中的信息后，你的本地博客就初始化完成了，可以进入刚才博客的文件夹（这里我的文件夹名字是blog），发现多了很多文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog/</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>使用上面第一条命令进入文件夹内，<code>blog</code>需要替换为自己的文件夹名称</p><p>进入后使用第二条命令进行依赖的安装</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291518460.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到如上图信息就安装成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在博客的根目录下（即刚才博客的文件夹下）输入上面的命令，启动博客</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291523547.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>可以看到如图的输出信息，我们可以在 localhost:4000去看一下我们博客现在的样子,大概就是下面这样</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291524034.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>停止运行我们只需要输入 Ctrl+C 就可以了</p><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p><strong>如果不是第一次使用git可以跳过这一步</strong></p><p>在刚才的git bash 中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示 <code>No such file or directory </code> 说明你是第一次使用git</p><p>先配置使用git人的身份，在git bash 中分别输入下面两个命令，<code>用户名</code> 用github的用户名就好 <code>邮箱</code> 也使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;这里换上你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>再进行git的ssh配置,同样 <code>邮箱</code> 使用注册github的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>命令执行后需要进行三次确认，按回车就完了</p><p>命令执行完成后，在用户目录(就的c盘下User里你用户名的目录)的 <code>.ssh目录</code> 下会生成2个名为id_rsa和id_rsa.pub的文件</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291539979.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>打开github 点击右上角你的头像，进入settings</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543730.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>选择 SSH and GPG keys</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291543087.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>点击<code>New SSH key</code>，并把之前生成的<code>id_rsa.pub</code>文件，用记事本打开，将内容复制到<code>key</code>下的文本框,title的话自己随便写一个自己明白的就好，最后点击 <code>Add SSH key</code> </p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291546856.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>回到git bash 输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291548466.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>看到 access 就成功了，如果是第一次，可能需要确认一下，输入yes后回车，就会提示成功</p><h3 id="安装deployer插件"><a href="#安装deployer插件" class="headerlink" title="安装deployer插件"></a>安装deployer插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在博客文件夹目录下，的git bash中输入上面的命令进行安装</p><h3 id="发布博客到-github-io"><a href="#发布博客到-github-io" class="headerlink" title="发布博客到 github.io"></a>发布博客到 github.io</h3><p>想要发布博客到XXX.github.io 首先要让hexo 知道你的github位置，进入本地博客根目录修改一些配置，在博客的文件夹下打开<code>_config.yml</code> 开始编辑</p><ol><li><p>修改url:</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291556245.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>修改deploy,注意红标的地方写自己的github名称，branch默认的话现在是<code>main</code>，之前好多博客中写的是<code>master</code>这是之前的分支名称，如果没有改过，那么就是<code>main</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291559182.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><p>修改配置后，在git bash 中分别输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待命令执行完成，就发布成功了，可以打开你的地址进行查看<code>https://XXX.github.io</code> 这里XXX 就是你的用户名，比如我的 <a href="https://yjr-1100.github.io/">https://yjr-1100.github.io</a></p><hr><h2 id="配置好看的主题，并写博客"><a href="#配置好看的主题，并写博客" class="headerlink" title="配置好看的主题，并写博客"></a>配置好看的主题，并写博客</h2><p>又到了最麻烦和最开心的时刻，配置好看的主题让你的博客变的独一无二吧</p><h3 id="安装butterfly主题"><a href="#安装butterfly主题" class="headerlink" title="安装butterfly主题"></a>安装butterfly主题</h3><p>你可以在 <a href="https://hexo.io/themes/">hexo的主题库</a> 中找到自己喜欢的主题，这里我用的是 <a href="https://butterfly.js.org/"><code>butterfly</code> 主题 </a></p><p>打开主题的主页，里面其实有很多详细的教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>在你的博客根目录下执行上面的代码，下载主题</p><p>为了使这个主题可用，我们还需要安装几个插件，再博客的根目录下运行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h3 id="配置butterfly主题"><a href="#配置butterfly主题" class="headerlink" title="配置butterfly主题"></a>配置butterfly主题</h3><p><strong>注意在进行下面配置过程中随时执行 <code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 来确保没有出错，并且注意<code>:</code> 后面都会有空格，如果报错即时检查</strong></p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><p>我们需要继续配置 <code>_config.yml</code> 文件来应用我们的主题，在<code>_config.yml</code> 文件中找到 <code>theme</code> 填写我们主题的名字</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291613160.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p>并且在博客文件夹根目录下新建一个<code>_config.butterfly.yml</code> 的文件，将主题的配置文件复制进去，目前这个版本的主题配置文件在 <code>/themes/butterfly/_config.yml</code></p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291620320.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><h4 id="创建几个页面"><a href="#创建几个页面" class="headerlink" title="创建几个页面"></a>创建几个页面</h4><p>这里我只创建了几个目前我需要的，可以根据主题官方的说明进行其他的配置</p><ol><li><p>标签页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;tags&#x2F;index.md 的头部添加 <code>type: &quot;tags&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291657267.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code> 就是页面中间显示的内容，自己根据喜好写就好</p><p> <code>top_img</code> 就是页面顶部的背景图片</p></li><li><p>分类页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;categories&#x2F;index.md 的头部添加 <code>type: &quot;categories&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700318.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> <p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>友情链接页</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;link&#x2F;index.md 的头部添加 <code>type: &quot;link&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291700366.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p><p> 对于友情链接的设置我们需要在 <code>source</code> 目录下新建一个<code>_data</code> 文件夹，并创建一个 <code>link.yml</code> ，按照下面的内容进行修改</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">没问题，就是学习</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery之家</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">http://www.htmleaf.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/jqueryhome.jpg</span></span><br><span class="line">  <span class="attr">descr:</span> <span class="string">自由分享jQuery、html5和css3的插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jquery插件库</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.jq22.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://www.jq22.com/img/logo.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">jquery插件库</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AcWing</span></span><br><span class="line">     <span class="attr">link:</span> <span class="string">https://www.acwing.com/</span></span><br><span class="line">     <span class="attr">avatar:</span> <span class="string">https://cdn.acwing.com/media/activity/surface/logo100x100.png</span></span><br><span class="line">     <span class="attr">descr:</span> <span class="string">算法刷题</span></span><br></pre></td></tr></table></figure></li><li><p>关于我页面</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p> 执行上面代码并在source&#x2F;about&#x2F;index.md 的头部添加 <code>type: &quot;about&quot;</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291705857.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><p> <code>title</code>  <code>top_img</code>  和上面一样</p></li><li><p>404页面</p><p> 主题内部内置了一个404，我们只需要打开就好，进入<code>_config.butterfly.yml</code> 找到下面的设置，把 <code>enable</code> 改为 <code>true</code></p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291719404.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li></ol><h4 id="修改浏览器标签栏Icon"><a href="#修改浏览器标签栏Icon" class="headerlink" title="修改浏览器标签栏Icon"></a>修改浏览器标签栏Icon</h4><p>在themes&#x2F;butterfly&#x2F;source&#x2F;img&#x2F; 文件夹下，放一个自己的icon ，在 <code>_config.butterfly.yml</code> 文件中，找到 <code>favicon</code> 进行编辑，改为自己图片的路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.ico</span></span><br></pre></td></tr></table></figure><h4 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>menu</code> 进行编辑</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">链接||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h4 id="设置主页的头部图片和背景图片"><a href="#设置主页的头部图片和背景图片" class="headerlink" title="设置主页的头部图片和背景图片"></a>设置主页的头部图片和背景图片</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>index_img</code> 和 archive_img ，在后面写上图片的url,其他的有兴趣也可以设置,找到<code>background</code> 在后面写上背景图片的url</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203291726233.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/bizhi3.jpg)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置页脚开启页脚背景"><a href="#设置页脚开启页脚背景" class="headerlink" title="设置页脚开启页脚背景"></a>设置页脚开启页脚背景</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>footer</code> 修改 <code>enable</code> 为 <code>true</code>，找到 <code>footer_bg</code> 修改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">这里可以加一些自己的话</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="开启页面美化"><a href="#开启页面美化" class="headerlink" title="开启页面美化"></a>开启页面美化</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>beautify</code> 修改 <code>enable</code> 为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="comment"># &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="comment"># &#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置首页动态打字效果"><a href="#设置首页动态打字效果" class="headerlink" title="设置首页动态打字效果"></a>设置首页动态打字效果</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>subtitle</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>sub</code> 下写自己的想打的句子</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">人生没有白走的路，弯路也算数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">总有一天，你会渐渐活出写满答案的人生</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">今天不想跑，所以才去跑，这才是长距离跑者的思维方式</span></span><br></pre></td></tr></table></figure><h4 id="修改侧边栏"><a href="#修改侧边栏" class="headerlink" title="修改侧边栏"></a>修改侧边栏</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>aside</code> 修改 <code>enable</code> 为 <code>true</code> ,并在 <code>card_announcement</code> 下修改公告内容，在 <code>card_author</code> 下修改自己的Github链接，找到 <code>busuanzi</code> 打开访问人数 ，找到 <code>runtimeshow</code> 打开网页运行时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Follow Me</span><br><span class="line">      link: https://github.com/yjr-1100</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 总要记些什么证明我来过</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    # sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"></span><br><span class="line"># busuanzi count for PV / UV in site</span><br><span class="line"># 訪問人數</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (網頁運行時間)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 3/28/2022 00:00:00</span><br></pre></td></tr></table></figure><h4 id="设置社交账号"><a href="#设置社交账号" class="headerlink" title="设置社交账号"></a>设置社交账号</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>social</code> 修改,冒号前面的是图标，使用的图标库是  <a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>,冒号后边是网址和名称</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/yjr-1100</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:jiaruiyang221@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure><h4 id="开启繁简体切换和阅读模式"><a href="#开启繁简体切换和阅读模式" class="headerlink" title="开启繁简体切换和阅读模式"></a>开启繁简体切换和阅读模式</h4><p>在 <code>_config.butterfly.yml</code> 文件中，找到 <code>translate</code> 修改 <code>enable</code> 为 <code>true</code> ，找到 <code>readmode</code> 修改为 <code>true</code> </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;简&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Mode (阅读模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="写文章和发布博客"><a href="#写文章和发布博客" class="headerlink" title="写文章和发布博客"></a>写文章和发布博客</h3><p>配置好后，再运行下面三个命令，打开本地博客看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>当我们需要写博客的时候，我们可以使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 文章名</span><br></pre></td></tr></table></figure><p>来创建一个文件，改文件的位置就在 <code>/source/_posts</code> 下，我们可以打开新建好的 <code>.md</code> 文件进行编辑。</p><p><code>hexo new post</code> 命令使用的就是post模板，可以在<code>/scaffolds</code> 文件夹下找到改模板，我们可以编辑模板的头部，方便以后生成。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img: https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/background_</span>4k.jpg</span><br><span class="line"><span class="section">cover:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><blockquote><p><code>tags</code> 用来写新增文章的标签</p></blockquote><blockquote><p><code>categories</code> 指明文章的分类，这个指明后会自动在分类页面被归类</p></blockquote><blockquote><p><code>description</code> 描述本篇文章，类似摘要</p></blockquote><blockquote><p><code>top_img</code> 指定文章头部的图片</p></blockquote><blockquote><p><code>cover</code> 指定文章在首页展示时的缩略图</p></blockquote><blockquote><p><code>keywords</code> 就是页面关键字</p></blockquote><p>我们写好后，就可以在本地博客看到新写的博客了，再次执行下面的命令，就可以发布到github.io 中了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="一些其他的设置"><a href="#一些其他的设置" class="headerlink" title="一些其他的设置"></a>一些其他的设置</h2><h3 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h3><ol><li><p>购买一个域名 可以去<a href="https://wanwang.aliyun.com/domain/tld?spm=5176.22941746.J_2447957890.22.4989a5f6oZeH4j#.com">阿里云</a> 进行域名注册</p></li><li><p>为域名设置解析 拿阿里云为例，进入控制台，选择域名解析</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292049998.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>添加CNMA解析，我这里添加的是二级域名，</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292053416.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/> </li><li><p>在xxx.github.io的仓库中新建文件名为<code>CNAME</code>，写入你刚才解析的域名</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292101397.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>在仓库的 <code>settings</code> 里找到 <code>pages</code> 进行设置，下面的那个对勾需要等一会才能勾选</p> <img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292104475.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>等一会就可以使用这个域名进行访问了，比如我可以通过 <code>https://yjr1100blog.jerryfirst.top/</code> 进行博客的访问</p></li><li><p>使用<code>hexo d</code> 的时候一般会把这个CNAME文件覆盖掉，所以我们可以在本地的<code>source</code>文件夹下创建一个<code>CNAME</code>文件把刚才的内容写进去，这样在进行<code>hexo d</code> 的时候，就也会同时进行上传</p></li></ol><h3 id="进行文件更替"><a href="#进行文件更替" class="headerlink" title="进行文件更替"></a>进行文件更替</h3><p>我们xxxx.github.io仓库里的文件只有 <code>hexo g</code> <code>hexo d</code>后的内容，没有源文件，加入我们电脑坏了，数据丢了，我们的博客就没了，所以我们建一个私有仓库进行我们原文件的更替</p><ol><li><p>在github 中建立一个私有仓库</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292228483.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/></li><li><p>在博客文件夹下创建 <code>.gitignore</code> 文件，内容入下</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br><span class="line">/.idea/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure></li><li><p>在博客的文件夹下 执行 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p> 如果执行 <code>git add .</code> 提示</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hint: You&#x27;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the     contents of</span><br><span class="line">hint: the embedded repository and will not know how to    obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes/butterfly</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it    from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes/butterfly</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 这个意思因为 <code>themes/butterfly/</code> 下也有一个 <code>.git</code> 文件夹 ,git 认为 <code>themes/butterfly</code> 是子仓库，但是对于子仓库还需要配置其他东西才可以进行 add 所以有了这个提示</p><p> 如果想要提交 <code>themes/butterfly</code> 中的内容，那我们可以选择删了 <code>themes/butterfly</code> 下的 <code>.git</code> 文件，并执行<code> git rm -f --cached themes/butterfly</code> 先删了add 里的这个文件，再添加一次</p></li><li><p>添加好后，依次执行下面的命令，完成源文件上传,其中<code>git@github.com:yjr-1100/blogdata.git</code> 要改成自己仓库的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:yjr-1100/blogdata.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p>以后我们改完文件执行进行提交就好了</p></li></ol><h2 id="其它一些注意事项"><a href="#其它一些注意事项" class="headerlink" title="其它一些注意事项"></a>其它一些注意事项</h2><h3 id="github-io-没有更新的问题"><a href="#github-io-没有更新的问题" class="headerlink" title="github.io 没有更新的问题"></a>github.io 没有更新的问题</h3><p>如果<code>git bash</code> 中执行 <code>hexo d</code> 没有报错，仓库里的东西也更新了，但是你的xxx.github.io 却没有立刻得到更新，请耐心等一等，也可能github pages还在deploy</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203292117345.png" style="margin:15px auto;box-shadow: 5px 5px 10px #9da0de;"/>]]></content>
      
      
      <categories>
          
          <category> bolg折腾踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/28/webpack%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h1><p>webpack是前端工程化的具体解决方案。</p><p>主要功能：提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端javaScript的兼容性、性能优化等强大的功能</p><hr><h1 id="快速使用-webpack"><a href="#快速使用-webpack" class="headerlink" title="快速使用 webpack"></a>快速使用 webpack</h1><ol><li><p>新建项目空目录，运行 npm init -y 命令，初始化包管理配置文件 package.json</p></li><li><p>新建src源码目录</p></li><li><p>新建src-index.html 首页文件 和 src-&gt;index.js脚本文件</p></li><li><p>初始化首页基本的结构</p></li><li><p>运行npm install jquery -S 安装 jQuery 这个命令执行后，会把这个包和对应的版本记录到 <code>package.json</code> 中的 <code>dependencies</code> 节点下</p></li></ol><p>在上面的五个步骤结束后，会产生下面这样的目录结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">     |- node_modules</span><br><span class="line">     |- src</span><br><span class="line">         |- index.js</span><br><span class="line">         |- index.html</span><br><span class="line">     |- package-lock.json</span><br><span class="line">     |- package.json</span><br></pre></td></tr></table></figure><p>我们在 <code>index.html</code> 和 <code>index.js</code> 中写一些代码,使用ES6高级语法，去尝试一下webpack</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 1 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 2 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 3 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 4 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 5 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 6 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 7 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 8 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 9 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用ES6 导入 jQuery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义jQuery的入口函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 3. 实现奇数行变色</span></span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接用浏览器打开，运行报错，因为ES6的import高级语法不兼容</p><p><strong>下面需要使用webpack来解决它</strong></p><p><strong>1. 安装:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@5.42.1 webpack-cli@4.9.1 -D</span><br></pre></td></tr></table></figure><p>​运行上面的命令后，在 <code>package.json</code> 中 <code>devDependencies</code> 记录这两个包 <code>devDependencies</code> 中的包只在开发中有用</p><p><strong>2. 配置:</strong></p><ol><li><p>在项目根目录中，创建名为 <code>webpack.config.js</code> 的 webpack 配置文件，并初始化如下配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&quot;development&quot;</span><span class="comment">// mode 用来指定构建模式，可选值为development 和 production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>package.json</code> 的<code>scripts</code>节点下，新增dev脚本如下：</p><p> script 节点下的脚本，通过<code>npm run</code> 执行，比如 <code>npm run dev</code> 注意不要在 <code>package.json</code> 中写注释</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">&quot;dev&quot;:&quot;webpack&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在终端执行 <code>npm run dev</code> 进行打包</p><p> 打包后，会在项目根目录下生成一个dist文件夹，在dist文件夹下生成一个 <code>main.js</code>,此时的目录结构如下</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">    |- dist</span><br><span class="line">        |- main.js</span><br><span class="line">    |- node_modules</span><br><span class="line">    |- src</span><br><span class="line">        |- index.js</span><br><span class="line">        |- index.html</span><br><span class="line">    |- package-lock.json</span><br><span class="line">    |- package.json</span><br><span class="line">    |- webpack.config.js</span><br></pre></td></tr></table></figure><p> 我们在 <code>index.html</code> 中引入 <code>main.js</code> </p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时再用浏览器打开，就可以看到隔行变色的效果了</p><blockquote><p>webpack.config.js 的配置文件中，module 的 production模式会有代码压缩效果，生成时间长，但是代码体积小</p></blockquote><blockquote><p>webpack 4.x和5.x默认的打包入口文件为 <code>src-&gt;index.js</code> 默认的输出文件路径为 <code>dist-&gt; main.js</code></p></blockquote></li></ol><p>修改 <code>webpack.config.js</code> 中打包的默认约定，将下面的代码写入 <code>webpack.config.js</code> 进行输入输出文件的修改，这样输出的文件就会命名为 <code>index1.js</code> ,记得改完生成文件的路径和名称后要去html代码中修改引入的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="webpack的插件"><a href="#webpack的插件" class="headerlink" title="webpack的插件"></a>webpack的插件</h1><p>在体会了webpack的使用后，我们还需要了解一些让webpack用起来更加方便的插件</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>每次我们修改完代码，想要在浏览器中产看效果前，都需要进行打包，很不方便</p><p>这个插件就是达到一个每当修改了源代码，就会自动进行项目打包的目的</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>执行下面的命令后，将 <code>webpack-dev-server</code> 安装在 <code>devDependencies</code> 节点下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server@3.11.2 -D</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>修改 <code>package.json-&gt;scripts</code> 中的dev命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack server&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>再次运行npm run dev 命令进行项目打包</p></li></ol><p>在浏览器访问<a href="http://localhost:8080/">http://localhost:8080</a> 可以看到我们根目录的一个文件结构，进入src目录下，就可以看到html页面的效果了</p><p>现在我们修改js代码，会发现页面并没有自动同步变化，仔细阅读控制台提示</p><img src="https://cdn.jsdelivr.net/gh/yjr-1100/Photobag/githubioimg/202203301640483.png" style="box-shadow: 5px 5px 10px #9da0de;border-radius:10px;margin:15px auto;"/><p>发现插件把生成的文件放在根目录中，但是我们在文件夹中却也看不到，其实这个插件是把生成的文件放在了内存中，在浏览器访问 <code>http://localhost:8080/index1.js</code> 就可以看到 (这里是因为我之前把输出文件的名字改成了 <code>index1.js</code>)</p><p>所以想要看到最新效果，就要在html中引入根目录下的 <code>index1.js</code> （这个文件在文件夹中看不到，它在内存中，引入的代码如下所示） ,再次保存刷新，就可以在浏览器看到修改后的效果了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用的是 webpack 插件放在内存中的js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="webpack-dev-plugin"><a href="#webpack-dev-plugin" class="headerlink" title="webpack-dev-plugin"></a>webpack-dev-plugin</h2><p>我们打包完成后，还需要进入 <code>src</code> 目录下才可以看到页面，使用这个插件可以将页面复制一份，放在根目录中</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>运行下面的命令进行插件安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 中进行配置</p><ol><li><p>导入插件，得到一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建 HTML 插件的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>把实例对象挂在plugins下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 把实例对象挂在plugins下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个插件复制的文件也是在内存中的，并且还会自动在文件中注入生成的<code>js</code>文件，我们就不用手动修改引用的js文件的路径了</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><h2 id="devserver节点"><a href="#devserver节点" class="headerlink" title="devserver节点"></a>devserver节点</h2><p>在<code>webpack.config.js</code>配置文件中，可以通过 <code>devServer</code> 节点对<code>webpack-dev-server</code>插件进行更多的配置</p><p>配置每次打包完成后自动打开页面，这样我们就不需要手动去打开页面了</p><p>对webpack 的节点操作，都是在 <code>webpack.config.js</code> 的 <code>module.explort</code> 里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">open:true,//初次打包完后，自动打开浏览器</span><br><span class="line">host:&#x27;127.0.0.1&#x27;,//实时打包使用的主机地址</span><br><span class="line">port:8080,// 实时打包使用的端口号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：凡是修改了<code>webpack.config.js</code>配置文件，或者修改了<code>package.json</code>配置文件，必须重新启动打包的服务</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 这个是nodejs中的东西要引入一下</span></span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//实时打包使用的主机地址</span></span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="webpack-中的-loader"><a href="#webpack-中的-loader" class="headerlink" title="webpack 中的 loader"></a>webpack 中的 loader</h1><h2 id="loader概述"><a href="#loader概述" class="headerlink" title="loader概述"></a>loader概述</h2><p>在实际开发中，webpack默认只能打包处理.js 后缀结尾的模块，其他非.js 结尾的模块，webpack默认处理不了，需要调用loader加载器才可以正常打包，否则会报错</p><p>loader加载器的作用：协助webpack 打包处理待定的文件模块。比如：</p><ul><li>css-loader 可以打包.css文件</li><li>less-loader 可以打包.less文件</li><li>babel-loader 可以打包处理webpack无法处理的高级js语法</li></ul><h2 id="打包处理css文件"><a href="#打包处理css文件" class="headerlink" title="打包处理css文件"></a>打包处理css文件</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader@3.0.0 css-loader@5.2.6 -D</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>​    在 <code>webpack.config.js</code> 中的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写,从后往前执行的</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="打包处理less文件"><a href="#打包处理less文件" class="headerlink" title="打包处理less文件"></a>打包处理less文件</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@10.0.1 less@4.1.1 -D</span><br></pre></td></tr></table></figure><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p> 在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="打包处理样式表中与url路径相关的文件"><a href="#打包处理样式表中与url路径相关的文件" class="headerlink" title="打包处理样式表中与url路径相关的文件"></a>打包处理样式表中与url路径相关的文件</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装需要的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>:&#123; </span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>? 后面是loader的参数，limit用来指定图片大小，单位字节，只有小于等于limit大小的图片，才会被转成base64格式的图片</p><h2 id="5-打包处理js高级语法"><a href="#5-打包处理js高级语法" class="headerlink" title="5. 打包处理js高级语法"></a>5. 打包处理js高级语法</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令安装 <code>babel-loader</code> 相关的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 @babel/preset-env @babel/plugin-transform-runtime-D</span><br></pre></td></tr></table></figure><h3 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 的 <code>module-&gt;rules</code> 数组中，添加loader规则如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>exclude 用来排除第三方包中的js文件</p></blockquote><p>使用 <code>babel-loader</code> 的时候，需要定义Babel的配置项</p><p>在项目根目录下创建一个 <code>babel.config.js</code> 的配置文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="comment">// 声明babel可用的插件</span></span><br><span class="line"><span class="attr">plugins</span>:[[<span class="string">&#x27;@bable/plugin-proposal-decorators&#x27;</span>,&#123;<span class="attr">legacy</span>:<span class="literal">true</span>&#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这些 loader 都配置完后，<code>webpack.config.js</code> 可能就变成了下面的样子</p><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//实时打包使用的主机地址</span></span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><p>我们可以在 <code>src</code> 下面新建 <code>css</code> 文件夹，和 <code>image</code> 文件夹 放入对应文件图片，并使用 ES6 语法引入后打包查看效果</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用的是webpack 插件放在内存中的js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 1 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 2 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 3 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 4 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 5 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 6 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 7 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 8 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第 9 个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用ES6 导入 jQuery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="comment">// 导入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.less&#x27;</span></span><br><span class="line"><span class="comment">// 导入图片</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./images/logol.png&#x27;</span></span><br><span class="line"><span class="comment">// 给图片动态赋值</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>,logo)</span><br><span class="line"><span class="comment">// 2. 定义jQuery的入口函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 3. 实现奇数行变色</span></span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js高级语法  装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">target</span>)&#123;</span><br><span class="line">    <span class="comment">// 为目标添加静态属性info</span></span><br><span class="line">    target.<span class="property">info</span> = <span class="string">&#x27;Person info&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@info</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="webpack的打包发布"><a href="#webpack的打包发布" class="headerlink" title="webpack的打包发布"></a>webpack的打包发布</h1><p>前面都是生产环境中打包测试，自己查看效果，当项目做完后，我们就需要进行打包发布，这个时候，我们还需要一些额外的配置</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>在 <code>package.json</code> 文件的 <code>scripts</code> 节点下面新增build命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p><code>--mode</code> 是一个参数，用来指定webpack 的运行模式，production代表生产环境,这里 <code>--modle</code> 指定的运行模式会覆盖 <code>webpack.config.js</code> 中的定义</p></blockquote><p>在命令行运行 npm run build就好了</p><h2 id="把生成的包各类文件，放在同一个文件夹"><a href="#把生成的包各类文件，放在同一个文件夹" class="headerlink" title="把生成的包各类文件，放在同一个文件夹"></a>把生成的包各类文件，放在同一个文件夹</h2><p>为了让文件生成后不是挤在一个文件夹中，我们可以分别在 <code>webpack.config.js</code> 文件中修改下面两个地方，来让文件放在不同的文件夹中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;js/index1.js&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在 outputPath 后写的文件夹中</span></span><br><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&amp;outputPath=images&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-自动删除上次生成的文件"><a href="#3-自动删除上次生成的文件" class="headerlink" title="3. 自动删除上次生成的文件"></a>3. 自动删除上次生成的文件</h2><p>为了防止之前生成的文件干扰我们我们需要安装 <code>clean-webpack-plugin</code> 插件</p><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><p>使用下面的命令进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h3><p>在 <code>webpack.config.js</code> 文件和 <code>plugins</code> 节点数组中增加下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一项插件配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>() ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><p><code>Source Map</code> 是一个信息文件，里面存储着位置信息，存着压缩后的代码的行号和原来的行号</p><p>默认报错显示压缩后的行号，调试不方便，改一下配置</p><p>在 <code>webpack.config.js</code> 中添加如下配置，保证运行时报错的行号和源代码的一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><tr><th> 旧的 webpack.config.js </th><th> 修改后的 webpack.config.js </th></tr><tr><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; </span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td><td>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin,<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">     <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">     <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="attr">port</span>:<span class="number">8080</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:<span class="string">&#x27;babel-loader&#x27;</span>,<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></table><hr><h1 id="improt路径优化"><a href="#improt路径优化" class="headerlink" title="improt路径优化"></a>improt路径优化</h1><p>我们的代码在<code>src</code> 文件夹中，每次引入文件和代码的时候，都需要使用 <code>../</code> 来进行路径查找，这样从内往外查找很不清楚，我们使用下面的配置，来优化路径查找方式</p><p>在 <code>webpack.config.js</code> 节点中添加 <code>resolve</code> 节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>:&#123;</span><br><span class="line">    <span class="comment">// 这个配置说明@ 代表 src文件夹目录，在js中improt 可以通过@来查找路径，从外向里查找</span></span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过所有的配置，我们最后的项目结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- quickwebpack</span><br><span class="line">    |- dist</span><br><span class="line">        |- main.js</span><br><span class="line">    |- node_modules</span><br><span class="line">    |- src</span><br><span class="line">        |- css</span><br><span class="line">            |- index.css</span><br><span class="line">            |- index.less</span><br><span class="line">        |- images</span><br><span class="line">            |- logol.png</span><br><span class="line">        |- index.js</span><br><span class="line">        |- index.html</span><br><span class="line">    |- package-lock.json</span><br><span class="line">    |- package.json</span><br><span class="line">    |- webpack.config.js</span><br><span class="line">    |- bable.config.js</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: YJR-1100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021-10-27 11:11:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditors</span>: YJR-1100</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@LastEditTime</span>: 2022-03-30 16:14:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FilePath</span>: \vue\day1\change-rows-color\webpack.config.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * @</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span> (c) 2022 by yjr-1100/CSU, All Rights Reserved. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//1. 1. 导入html插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 HTML 插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定要复制哪个文件</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定复制出来的文件名和路径</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 3. 把实例对象挂在plugins下</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,<span class="comment">// mode 用来指定webpack构建模式，可选值为development 和 production</span></span><br><span class="line">    <span class="comment">// entry  指定要处理哪个文件</span></span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="comment">// output 指定生成文件的位置和名字</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// 指定生成文件的目录</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 指定生成文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;js/index1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这个选项生成的source map 能保证 运行的时候报错的行号和源代码一样，开发调试方便</span></span><br><span class="line">    <span class="comment">// 发布的时候关闭这个，也可以直接写 nosources-source-map</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// 插件的数组，将来webpack在运行的时候会加载和调用这个插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin,<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),],</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,<span class="comment">//初次打包完后，自动打开浏览器</span></span><br><span class="line">        <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//试试打包使用的主机地址</span></span><br><span class="line">        <span class="attr">port</span>:<span class="number">8080</span>,<span class="comment">// 实时打包使用的端口号</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">            <span class="comment">// use 数组的顺序不能乱写</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">            <span class="comment">// 配置生成的图片在放在哪里</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=22229&amp;outputPath=images&#x27;</span>&#125;,</span><br><span class="line">            <span class="comment">// 使用babel 来解析高级js语法</span></span><br><span class="line">            <span class="comment">// &#123;test:/\.js$/,use:&#x27;babel-loader&#x27;,exclude:/node_modules/&#125;</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="comment">//要匹配哪些文件的规则</span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>,<span class="comment">//要排除哪些目录</span></span><br><span class="line">                <span class="attr">use</span>: &#123;<span class="comment">//要使用的loader</span></span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>],<span class="comment">//presets 是一个插件的集合，在编译的时候，会根据需要加载插件</span></span><br><span class="line">                    <span class="attr">plugins</span>: [<span class="comment">//执行的顺序是从右向左，所以基础插件要放在最后</span></span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span> : <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>]</span><br><span class="line">                    ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="comment">// 这个配置说明@ 代表 src文件夹目录，在js中improt 可以通过@来查找路径，</span></span><br><span class="line">        <span class="attr">alias</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>事实上，我们一般不用自己配置webpack ， 学习webpack是为了可以大概看懂配置，以防出现奇起怪怪的错误</p>]]></content>
      
      
      <categories>
          
          <category> VUE学习 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
